package de.shorti.baseknowledge.objects;

/**
 * Class generated by automatic ClassGenerator
 * Date: Sat May 11 21:15:22 GMT+02:00 2002
 */
import java.sql.DatabaseMetaData;
import java.sql.ResultSet;
import java.util.ArrayList;

class _dbTelekom extends dbObject 
{

	String    description;
	String    number;
	String    dialPrefix;


	/**
	 * destroy a object in the database
	 */
	public boolean destroy()
	{
		boolean result = false;
		String    _key   = id;
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbTelekom.destroyInstance");
			try
			{
					stmt.executeUpdate( "DELETE FROM Telekom WHERE id='"+_key+"'");
					result = true;
					removeFromCache(this);
					id     = null;
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}



	/**
	 * Method:      getDescription()
	 * Description: 
	 * Returns:     String
	 */
	public String getDescription()
	{
		return description;
	}

	/**
	 * Method:      setDescription(String _description, boolean _autoCommit)
	 * Description: 
	 * Returns:     void
	 */
	public void setDescription(String _description, boolean _autoCommit)
	{
		description=_description;
		if(_autoCommit)
		{
			commit();
		}
	}

	/**
	 * Method:      getNumber()
	 * Description: 
	 * Returns:     String
	 */
	public String getNumber()
	{
		return number;
	}

	/**
	 * Method:      setNumber(String _number, boolean _autoCommit)
	 * Description: 
	 * Returns:     void
	 */
	public void setNumber(String _number, boolean _autoCommit)
	{
		number=_number;
		if(_autoCommit)
		{
			commit();
		}
	}

	/**
	 * Method:      getDialPrefix()
	 * Description: 
	 * Returns:     String
	 */
	public String getDialPrefix()
	{
		return dialPrefix;
	}

	/**
	 * Method:      setDialPrefix(String _dialPrefix, boolean _autoCommit)
	 * Description: 
	 * Returns:     void
	 */
	public void setDialPrefix(String _dialPrefix, boolean _autoCommit)
	{
		dialPrefix=_dialPrefix;
		if(_autoCommit)
		{
			commit();
		}
	}

	/**
	 * Method:      getId()
	 * Description: 
	 * Returns:     String
	 */
	public String getId()
	{
		return id;
	}

	/**
	 *  Method:      getContactPersons()
	 *  Description:                              
	 *  Returns:     ArrayList<ContactPerson>
	 */
	public ArrayList getContactPersons()
	{
		return _dbContactPerson.findByTelekom(this);
	}


	/**
	 *  Method:      getGeschaeftsstelles()
	 *  Description:                              
	 *  Returns:     ArrayList<Geschaeftsstelle>
	 */
	public ArrayList getGeschaeftsstelles()
	{
		return _dbGeschaeftsstelle.findByTelekom(this);
	}


	/**
	 *  Method:      findByDescription(String _description)
	 *  Description: 
	 *  Returns:     ArrayList<Telekom>
	 */
	public static ArrayList findByDescription(String _description)
	{
		ArrayList result = new ArrayList();
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbTelekom.findByDescription");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT id, description, number, dialPrefix FROM Telekom WHERE description='"+toSQL(_description)+"'"+" order by generatedId desc");
				while(s.next())
				{
					String _tmpID = s.getString(1);
					Telekom newObject = (Telekom)getFromCache(_tmpID);
					if(newObject ==null)
					{
						newObject = new Telekom();
						newObject.description=s.getString(2);
						newObject.number=s.getString(3);
						newObject.dialPrefix=s.getString(4);
						newObject.id=_tmpID;
						putToCache(newObject);
					}
					result.add(newObject);
				}
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}

	/**
	 *  Method:      findByNumber(String _number)
	 *  Description: 
	 *  Returns:     ArrayList<Telekom>
	 */
	public static ArrayList findByNumber(String _number)
	{
		ArrayList result = new ArrayList();
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbTelekom.findByNumber");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT id, description, number, dialPrefix FROM Telekom WHERE number='"+toSQL(_number)+"'"+" order by generatedId desc");
				while(s.next())
				{
					String _tmpID = s.getString(1);
					Telekom newObject = (Telekom)getFromCache(_tmpID);
					if(newObject ==null)
					{
						newObject = new Telekom();
						newObject.description=s.getString(2);
						newObject.number=s.getString(3);
						newObject.dialPrefix=s.getString(4);
						newObject.id=_tmpID;
						putToCache(newObject);
					}
					result.add(newObject);
				}
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}

	/**
	 *  Method:      findByDialPrefix(String _dialPrefix)
	 *  Description: 
	 *  Returns:     ArrayList<Telekom>
	 */
	public static ArrayList findByDialPrefix(String _dialPrefix)
	{
		ArrayList result = new ArrayList();
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbTelekom.findByDialPrefix");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT id, description, number, dialPrefix FROM Telekom WHERE dialPrefix='"+toSQL(_dialPrefix)+"'"+" order by generatedId desc");
				while(s.next())
				{
					String _tmpID = s.getString(1);
					Telekom newObject = (Telekom)getFromCache(_tmpID);
					if(newObject ==null)
					{
						newObject = new Telekom();
						newObject.description=s.getString(2);
						newObject.number=s.getString(3);
						newObject.dialPrefix=s.getString(4);
						newObject.id=_tmpID;
						putToCache(newObject);
					}
					result.add(newObject);
				}
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}

	/**
	 *  Method:      findById(String _id)
	 *  Description: 
	 *  Returns:     Telekom
	 */
	public static Telekom findById(String _id)
	{
		Telekom result = (Telekom)getFromCache(_id);
		if(result!=null) return result;
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbTelekom.findById");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT id, description, number, dialPrefix FROM Telekom WHERE id='"+toSQL(_id)+"'"+" order by generatedId desc");
				if(s.next())
				{
					result = new Telekom();
					result.description= s.getString(2);
					result.number= s.getString(3);
					result.dialPrefix= s.getString(4);
					result.id= _id;
					putToCache(result);
				}
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}

	/**
	 * returns boolean
	 */
	public boolean commit()
	{
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbTelekom.commit");
			try
			{
				stmt.executeUpdate( "UPDATE Telekom set description= '"+toSQL(description)+"', number= '"+toSQL(number)+"', dialPrefix= '"+toSQL(dialPrefix)+"' WHERE id='"+id+"'");
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return true;
	}


	/**
	 * returns ArrayList<Telekom>
	 */
	public static ArrayList getAll()
	{
		ArrayList result = new ArrayList();
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbTelekom.getAll");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT id, description, number, dialPrefix FROM Telekom order by generatedId desc");
				while(s.next())
				{
					String _tmpID = s.getString(1);
					Telekom newObject = (Telekom)getFromCache(_tmpID);
					if(newObject ==null)
					{
						newObject = new Telekom();
						newObject.description=s.getString(2);
						newObject.number=s.getString(3);
						newObject.dialPrefix=s.getString(4);
						newObject.id=_tmpID;
						putToCache(newObject);
					}
					result.add(newObject);
				}
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}


	/**
	 * create a new object in the database
	 */
	static public Telekom createInstance( String  _description, String  _number, String  _dialPrefix )
	{
		Telekom result = null;
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbTelekom.createInstance");
			try
			{
				String nextGUID = new java.rmi.server.UID().toString();
				stmt.executeUpdate( "INSERT INTO Telekom ( description, number, dialPrefix, id) VALUES ( '"+toSQL(_description)+"',  '"+toSQL(_number)+"',  '"+toSQL(_dialPrefix)+"', '"+nextGUID+"')");
				result = new Telekom();
				result.description= _description;
				result.number= _number;
				result.dialPrefix= _dialPrefix;
				result.id= nextGUID;
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}


	/**
	 * create a new object in the database
	 */
	static public void newInstance( String  _description, String  _number, String  _dialPrefix )
	{
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbTelekom.newInstance");
			try
			{
				String nextGUID = new java.rmi.server.UID().toString();
				stmt.executeUpdate( "INSERT INTO Telekom ( description, number, dialPrefix, id) VALUES ( '"+toSQL(_description)+"',  '"+toSQL(_number)+"',  '"+toSQL(_dialPrefix)+"', '"+nextGUID+"')");
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
	}


	/**
	 * destroy a object in the database
	 */
	static public boolean destroyInstance( String  _key)
	{
		boolean result = false;
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbTelekom.destroyInstance");
			try
			{
					stmt.executeUpdate( "DELETE FROM Telekom WHERE id='"+_key+"'");
					result = true;
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}


	/**
	 * destroy ALL objects in the database
	 */
	static public boolean destroyAll()
	{
		boolean result = false;
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbTelekom.destroyAll");
			try
			{
					stmt.executeUpdate("DELETE from Telekom" );
					result = true;
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}


	/**
	 */
	public String toString()
	{
		StringBuffer result = new StringBuffer(1024);
		result.append(description);
		result.append("|");
		result.append(number);
		result.append("|");
		result.append(dialPrefix);
		result.append("|");
		result.append(id);
		return result.toString();
	}


	/**
	 * init the class
	 */
	static
	{
		try
		{
			DatabaseMetaData dMeta = ConnectionManager.getValid().getMetaData ();
			ResultSet result;
			result=dMeta.getColumns(null,null,"Telekom","description");
			if(!result.next())
			{
				System.out.println("ERROR: installed DB-schema not compatible to java classes");
				System.out.println("       Attribute 'description' in table 'Telekom' missing");
			}
			result.close();
			result=dMeta.getColumns(null,null,"Telekom","number");
			if(!result.next())
			{
				System.out.println("ERROR: installed DB-schema not compatible to java classes");
				System.out.println("       Attribute 'number' in table 'Telekom' missing");
			}
			result.close();
			result=dMeta.getColumns(null,null,"Telekom","dialPrefix");
			if(!result.next())
			{
				System.out.println("ERROR: installed DB-schema not compatible to java classes");
				System.out.println("       Attribute 'dialPrefix' in table 'Telekom' missing");
			}
			result.close();
			result=dMeta.getColumns(null,null,"Telekom","id");
			if(!result.next())
			{
				System.out.println("ERROR: installed DB-schema not compatible to java classes");
				System.out.println("       Attribute 'id' in table 'Telekom' missing");
			}
			result.close();
		}
		catch (Exception ex)
		{
		}
	}


}
