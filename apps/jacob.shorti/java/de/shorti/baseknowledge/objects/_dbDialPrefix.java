package de.shorti.baseknowledge.objects;

/**
 * short-i Class generated by automatic ClassGenerator
 * Date: Fri Apr 20 17:23:50 GMT+02:00 2001
 */
import de.shorti.db.*;
import de.shorti.util.basic.*;
import java.util.ArrayList;
import java.util.Iterator;
import java.sql.*;

class _dbDialPrefix
{

	static TraceDispatcher  trace = TraceFactory.getTraceDispatcher();
	String    prefix;
	String    city_id;	// Foreign Key pointing to Table [City], Field [id]
	String    id;	// Key


	/**
	 * destroy a object in the database
	 */
	public boolean destroy()
	{
		boolean result = false;
		String    _key   = id;
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbDialPrefix.destroyInstance");
			try
			{
					stmt.executeUpdate( "DELETE FROM DialPrefix WHERE id='"+_key+"'");
					result = true;
					id     = null;
			}
			catch(Exception exc)
			{
				trace.error(exc);
				exc.printStackTrace();
			}
			stmt.close();

		}
		catch (Exception ex)
		{
			trace.error(ex);
			ex.printStackTrace();
		}
		return result;
	}



	/**
	 * Method:      getPrefix()
	 * Description:
	 * Returns:     String
	 */
	public String getPrefix()
	{
		return prefix;
	}

	/**
	 * Method:      setPrefix(String _prefix, boolean _autoCommit)
	 * Description:
	 * Returns:     void
	 */
	public void setPrefix(String _prefix, boolean _autoCommit)
	{
		prefix=_prefix;
		if(_autoCommit)
		{
			commit();
		}
	}

	/**
	 * Method:      getId()
	 * Description:
	 * Returns:     String
	 */
	public String getId()
	{
		return id;
	}

	/**
	 * Method:      getCity()
	 * Description:
	 * Returns:     City
	 */
	public City getCity()
	{
		return City.findById(city_id);
	}

	/**
	 * Method:      setCity()
	 * Description:
	 * Returns:     void
	 */
	public void setCity(City _foreigner, boolean _autocommit)
	{
		city_id= _foreigner.getId();
		if (_autocommit == true)
			commit();
	}

	/**
	 *  Method:      findByPrefix(String _prefix)
	 *  Description:
	 *  Returns:     ArrayList<DialPrefix>
	 */
	public static ArrayList findByPrefix(String _prefix)
	{
		ArrayList result = new ArrayList();
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbDialPrefix.findByPrefix");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT prefix, city_id, id FROM DialPrefix WHERE prefix='"+_prefix+"'"+" order by generatedId desc");
				while(s.next())
				{
					DialPrefix newObject = new DialPrefix();
					newObject.prefix=s.getString(1);
					newObject.city_id=s.getString(2);
					newObject.id=s.getString(3);
					result.add(newObject);
				}
			}
			catch(Exception exc)
			{
				trace.error(exc);
				exc.printStackTrace();
			}
			stmt.close();

		}
		catch (Exception ex)
		{
			trace.error(ex);
			ex.printStackTrace();
		}
		return result;
	}

	/**
	 *  Method:      findByCity(_dbCity _city)
	 *  Description:
	 *  Returns:     ArrayList<DialPrefix>
	 */
	public static ArrayList findByCity(_dbCity _city)
	{
		ArrayList result = new ArrayList();
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbDialPrefix.findByCity");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT prefix, city_id, id FROM DialPrefix WHERE city_id='"+_city.getId()+"'"+" order by generatedId desc");
				while(s.next())
				{
					DialPrefix newObject = new DialPrefix();
					newObject.prefix=s.getString(1);
					newObject.city_id=s.getString(2);
					newObject.id=s.getString(3);
					result.add(newObject);
				}
			}
			catch(Exception exc)
			{
				trace.error(exc);
				exc.printStackTrace();
			}
			stmt.close();

		}
		catch (Exception ex)
		{
			trace.error(ex);
			ex.printStackTrace();
		}
		return result;
	}

	/**
	 *  Method:      findById(String _id)
	 *  Description:
	 *  Returns:     DialPrefix
	 */
	public static DialPrefix findById(String _id)
	{
		DialPrefix result = null;
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbDialPrefix.findById");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT prefix, city_id, id FROM DialPrefix WHERE id='"+_id+"'"+" order by generatedId desc");
				if(s.next())
				{
					result = new DialPrefix();
					result.prefix= s.getString(1);
					result.city_id= s.getString(2);
					result.id= s.getString(3);
				}
			}
			catch(Exception exc)
			{
				trace.error(exc);
				exc.printStackTrace();
			}
			stmt.close();

		}
		catch (Exception ex)
		{
			trace.error(ex);
			ex.printStackTrace();
		}
		return result;
	}

	/**
	 * returns boolean
	 */
	public boolean commit()
	{
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbDialPrefix.commit");
			try
			{
				stmt.executeUpdate( "UPDATE DialPrefix set prefix= '"+prefix+"', city_id= '"+city_id+"' WHERE id='"+id+"'");
			}
			catch(Exception exc)
			{
				trace.error(exc);
				exc.printStackTrace();
			}
			stmt.close();

		}
		catch (Exception ex)
		{
			trace.error(ex);
			ex.printStackTrace();
		}
		return true;
	}


	/**
	 * returns ArrayList<DialPrefix>
	 */
	public static ArrayList getAll()
	{
		ArrayList result = new ArrayList();
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbDialPrefix.getAll");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT prefix, city_id, id FROM DialPrefix order by generatedId desc");
				while(s.next())
				{
					DialPrefix newObject = new DialPrefix();
					newObject.prefix=s.getString(1);
					newObject.city_id=s.getString(2);
					newObject.id=s.getString(3);
					result.add(newObject);
				}
			}
			catch(Exception exc)
			{
				trace.error(exc);
				exc.printStackTrace();
			}
			stmt.close();

		}
		catch (Exception ex)
		{
			trace.error(ex);
			ex.printStackTrace();
		}
		return result;
	}


	/**
	 * create a new object in the database
	 */
	static public DialPrefix createInstance( String  _prefix, _dbCity _city )
	{
		DialPrefix result = null;
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbDialPrefix.createInstance");
			try
			{
				String nextGUID = new java.rmi.server.UID().toString();
				stmt.executeUpdate( "INSERT INTO DialPrefix ( prefix, city_id, id) VALUES ( '"+((_prefix==null)?"":_prefix.toString())+"',  '"+((_city==null)?"":_city.getId())+"', '"+nextGUID+"')");
				result = new DialPrefix();
				result.prefix= _prefix;
				result.city_id= (_city==null)?"":_city.getId();
				result.id= nextGUID;
			}
			catch(Exception exc)
			{
				trace.error(exc);
				exc.printStackTrace();
			}
			stmt.close();

		}
		catch (Exception ex)
		{
			trace.error(ex);
			ex.printStackTrace();
		}
		return result;
	}


	/**
	 * destroy a object in the database
	 */
	static public boolean destroyInstance( String  _key)
	{
		boolean result = false;
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbDialPrefix.destroyInstance");
			try
			{
					stmt.executeUpdate( "DELETE FROM DialPrefix WHERE id='"+_key+"'");
					result = true;
			}
			catch(Exception exc)
			{
				trace.error(exc);
				exc.printStackTrace();
			}
			stmt.close();

		}
		catch (Exception ex)
		{
			trace.error(ex);
			ex.printStackTrace();
		}
		return result;
	}


	/**
	 * destroy ALL objects in the database
	 */
	static public boolean destroyAll()
	{
		boolean result = false;
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbDialPrefix.destroyAll");
			try
			{
					stmt.executeUpdate("DELETE from DialPrefix" );
					result = true;
			}
			catch(Exception exc)
			{
				trace.error(exc);
				exc.printStackTrace();
			}
			stmt.close();

		}
		catch (Exception ex)
		{
			trace.error(ex);
			ex.printStackTrace();
		}
		return result;
	}


	/**
	 */
	public String toString()
	{
		StringBuffer result = new StringBuffer(1024);
		result.append(prefix);
		result.append("|");
		result.append(city_id);
		result.append("|");
		result.append(id);
		return result.toString();
	}


	/**
	 * init the class
	 */
	static
	{
	}


}
