package de.shorti.baseknowledge.objects;

/**
 * Class generated by automatic ClassGenerator
 * Date: Sat May 11 21:15:23 GMT+02:00 2002
 */
import java.sql.DatabaseMetaData;
import java.sql.ResultSet;
import java.util.ArrayList;

class _dbSubscribedAction extends dbObject 
{

	long      minuteInterval;
	long      lastDate;
	long      startDate;
	int       lockStatus;
	String    formatType;
	int       sendCount;
	long      endDate;
	String    channel_id;	// Foreign Key pointing to Table [CommunicationChannel], Field [id]
	String    action_id;	// Foreign Key pointing to Table [Action], Field [id]


	/**
	 * destroy a object in the database
	 */
	public boolean destroy()
	{
		boolean result = false;
		String    _key   = id;
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbSubscribedAction.destroyInstance");
			try
			{
					stmt.executeUpdate( "DELETE FROM SubscribedAction WHERE id='"+_key+"'");
					result = true;
					removeFromCache(this);
					id     = null;
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}



	/**
	 * Method:      getMinuteInterval()
	 * Description: 
	 * Returns:     long
	 */
	public long getMinuteInterval()
	{
		return minuteInterval;
	}

	/**
	 * Method:      setMinuteInterval(long _minuteInterval, boolean _autoCommit)
	 * Description: 
	 * Returns:     void
	 */
	public void setMinuteInterval(long _minuteInterval, boolean _autoCommit)
	{
		minuteInterval=_minuteInterval;
		if(_autoCommit)
		{
			commit();
		}
	}

	/**
	 * Method:      getLastDate()
	 * Description: 
	 * Returns:     long
	 */
	public long getLastDate()
	{
		return lastDate;
	}

	/**
	 * Method:      setLastDate(long _lastDate, boolean _autoCommit)
	 * Description: 
	 * Returns:     void
	 */
	public void setLastDate(long _lastDate, boolean _autoCommit)
	{
		lastDate=_lastDate;
		if(_autoCommit)
		{
			commit();
		}
	}

	/**
	 * Method:      getId()
	 * Description: 
	 * Returns:     String
	 */
	public String getId()
	{
		return id;
	}

	/**
	 * Method:      getStartDate()
	 * Description: 
	 * Returns:     long
	 */
	public long getStartDate()
	{
		return startDate;
	}

	/**
	 * Method:      setStartDate(long _startDate, boolean _autoCommit)
	 * Description: 
	 * Returns:     void
	 */
	public void setStartDate(long _startDate, boolean _autoCommit)
	{
		startDate=_startDate;
		if(_autoCommit)
		{
			commit();
		}
	}

	/**
	 * Method:      getLockStatus()
	 * Description: 
	 * Returns:     int
	 */
	public int getLockStatus()
	{
		return lockStatus;
	}

	/**
	 * Method:      setLockStatus(int _lockStatus, boolean _autoCommit)
	 * Description: 
	 * Returns:     void
	 */
	public void setLockStatus(int _lockStatus, boolean _autoCommit)
	{
		lockStatus=_lockStatus;
		if(_autoCommit)
		{
			commit();
		}
	}

	/**
	 * Method:      getFormatType()
	 * Description: 
	 * Returns:     String
	 */
	public String getFormatType()
	{
		return formatType;
	}

	/**
	 * Method:      setFormatType(String _formatType, boolean _autoCommit)
	 * Description: 
	 * Returns:     void
	 */
	public void setFormatType(String _formatType, boolean _autoCommit)
	{
		formatType=_formatType;
		if(_autoCommit)
		{
			commit();
		}
	}

	/**
	 * Method:      getSendCount()
	 * Description: 
	 * Returns:     int
	 */
	public int getSendCount()
	{
		return sendCount;
	}

	/**
	 * Method:      setSendCount(int _sendCount, boolean _autoCommit)
	 * Description: 
	 * Returns:     void
	 */
	public void setSendCount(int _sendCount, boolean _autoCommit)
	{
		sendCount=_sendCount;
		if(_autoCommit)
		{
			commit();
		}
	}

	/**
	 * Method:      getEndDate()
	 * Description: 
	 * Returns:     long
	 */
	public long getEndDate()
	{
		return endDate;
	}

	/**
	 * Method:      setEndDate(long _endDate, boolean _autoCommit)
	 * Description: 
	 * Returns:     void
	 */
	public void setEndDate(long _endDate, boolean _autoCommit)
	{
		endDate=_endDate;
		if(_autoCommit)
		{
			commit();
		}
	}

	/**
	 * Method:      getChannel()
	 * Description: 
	 * Returns:     CommunicationChannel
	 */
	public CommunicationChannel getChannel()
	{
		return CommunicationChannel.findById(channel_id);
	}

	/**
	 * Method:      setChannel()
	 * Description: 
	 * Returns:     void
	 */
	public void setChannel(CommunicationChannel _foreigner, boolean _autocommit)
	{
		channel_id= _foreigner.getId();
		if (_autocommit == true)
			commit();
	}

	/**
	 * Method:      getAction()
	 * Description: 
	 * Returns:     Action
	 */
	public Action getAction()
	{
		return Action.findById(action_id);
	}

	/**
	 * Method:      setAction()
	 * Description: 
	 * Returns:     void
	 */
	public void setAction(Action _foreigner, boolean _autocommit)
	{
		action_id= _foreigner.getId();
		if (_autocommit == true)
			commit();
	}

	/**
	 *  Method:      findByMinuteInterval(long _minuteInterval)
	 *  Description: 
	 *  Returns:     SubscribedAction
	 */
	public static SubscribedAction findByMinuteInterval(long _minuteInterval)
	{
		SubscribedAction result = null;
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbSubscribedAction.findByMinuteInterval");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT id, minuteInterval, lastDate, startDate, lockStatus, formatType, sendCount, endDate, channel_id, action_id FROM SubscribedAction WHERE minuteInterval="+_minuteInterval+" order by generatedId desc");
				if(s.next())
				{
					String _tmpID = s.getString(1);
					result = (SubscribedAction)getFromCache(_tmpID);
					if(result ==null)
					{
						result = new SubscribedAction();
						result.minuteInterval= s.getLong(2);
						result.lastDate= s.getLong(3);
						result.id= _tmpID;
						result.startDate= s.getLong(4);
						result.lockStatus= s.getInt(5);
						result.formatType= s.getString(6);
						result.sendCount= s.getInt(7);
						result.endDate= s.getLong(8);
						result.channel_id= s.getString(9);
						result.action_id= s.getString(10);
						putToCache(result);
					}
				}
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}

	/**
	 *  Method:      findByLastDate(long _lastDate)
	 *  Description: 
	 *  Returns:     ArrayList<SubscribedAction>
	 */
	public static ArrayList findByLastDate(long _lastDate)
	{
		ArrayList result = new ArrayList();
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbSubscribedAction.findByLastDate");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT id, minuteInterval, lastDate, startDate, lockStatus, formatType, sendCount, endDate, channel_id, action_id FROM SubscribedAction WHERE lastDate="+_lastDate+" order by generatedId desc");
				while(s.next())
				{
					String _tmpID = s.getString(1);
					SubscribedAction newObject = (SubscribedAction)getFromCache(_tmpID);
					if(newObject ==null)
					{
						newObject = new SubscribedAction();
						newObject.minuteInterval=s.getLong(2);
						newObject.lastDate=s.getLong(3);
						newObject.id=_tmpID;
						newObject.startDate=s.getLong(4);
						newObject.lockStatus=s.getInt(5);
						newObject.formatType=s.getString(6);
						newObject.sendCount=s.getInt(7);
						newObject.endDate=s.getLong(8);
						newObject.channel_id=s.getString(9);
						newObject.action_id=s.getString(10);
						putToCache(newObject);
					}
					result.add(newObject);
				}
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}

	/**
	 *  Method:      findById(String _id)
	 *  Description: 
	 *  Returns:     SubscribedAction
	 */
	public static SubscribedAction findById(String _id)
	{
		SubscribedAction result = (SubscribedAction)getFromCache(_id);
		if(result!=null) return result;
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbSubscribedAction.findById");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT id, minuteInterval, lastDate, startDate, lockStatus, formatType, sendCount, endDate, channel_id, action_id FROM SubscribedAction WHERE id='"+toSQL(_id)+"'"+" order by generatedId desc");
				if(s.next())
				{
					result = new SubscribedAction();
					result.minuteInterval= s.getLong(2);
					result.lastDate= s.getLong(3);
					result.id= _id;
					result.startDate= s.getLong(4);
					result.lockStatus= s.getInt(5);
					result.formatType= s.getString(6);
					result.sendCount= s.getInt(7);
					result.endDate= s.getLong(8);
					result.channel_id= s.getString(9);
					result.action_id= s.getString(10);
					putToCache(result);
				}
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}

	/**
	 *  Method:      findByStartDate(long _startDate)
	 *  Description: 
	 *  Returns:     ArrayList<SubscribedAction>
	 */
	public static ArrayList findByStartDate(long _startDate)
	{
		ArrayList result = new ArrayList();
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbSubscribedAction.findByStartDate");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT id, minuteInterval, lastDate, startDate, lockStatus, formatType, sendCount, endDate, channel_id, action_id FROM SubscribedAction WHERE startDate="+_startDate+" order by generatedId desc");
				while(s.next())
				{
					String _tmpID = s.getString(1);
					SubscribedAction newObject = (SubscribedAction)getFromCache(_tmpID);
					if(newObject ==null)
					{
						newObject = new SubscribedAction();
						newObject.minuteInterval=s.getLong(2);
						newObject.lastDate=s.getLong(3);
						newObject.id=_tmpID;
						newObject.startDate=s.getLong(4);
						newObject.lockStatus=s.getInt(5);
						newObject.formatType=s.getString(6);
						newObject.sendCount=s.getInt(7);
						newObject.endDate=s.getLong(8);
						newObject.channel_id=s.getString(9);
						newObject.action_id=s.getString(10);
						putToCache(newObject);
					}
					result.add(newObject);
				}
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}

	/**
	 *  Method:      findByLockStatus(int _lockStatus)
	 *  Description: 
	 *  Returns:     ArrayList<SubscribedAction>
	 */
	public static ArrayList findByLockStatus(int _lockStatus)
	{
		ArrayList result = new ArrayList();
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbSubscribedAction.findByLockStatus");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT id, minuteInterval, lastDate, startDate, lockStatus, formatType, sendCount, endDate, channel_id, action_id FROM SubscribedAction WHERE lockStatus="+_lockStatus+" order by generatedId desc");
				while(s.next())
				{
					String _tmpID = s.getString(1);
					SubscribedAction newObject = (SubscribedAction)getFromCache(_tmpID);
					if(newObject ==null)
					{
						newObject = new SubscribedAction();
						newObject.minuteInterval=s.getLong(2);
						newObject.lastDate=s.getLong(3);
						newObject.id=_tmpID;
						newObject.startDate=s.getLong(4);
						newObject.lockStatus=s.getInt(5);
						newObject.formatType=s.getString(6);
						newObject.sendCount=s.getInt(7);
						newObject.endDate=s.getLong(8);
						newObject.channel_id=s.getString(9);
						newObject.action_id=s.getString(10);
						putToCache(newObject);
					}
					result.add(newObject);
				}
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}

	/**
	 *  Method:      findByFormatType(String _formatType)
	 *  Description: 
	 *  Returns:     ArrayList<SubscribedAction>
	 */
	public static ArrayList findByFormatType(String _formatType)
	{
		ArrayList result = new ArrayList();
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbSubscribedAction.findByFormatType");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT id, minuteInterval, lastDate, startDate, lockStatus, formatType, sendCount, endDate, channel_id, action_id FROM SubscribedAction WHERE formatType='"+toSQL(_formatType)+"'"+" order by generatedId desc");
				while(s.next())
				{
					String _tmpID = s.getString(1);
					SubscribedAction newObject = (SubscribedAction)getFromCache(_tmpID);
					if(newObject ==null)
					{
						newObject = new SubscribedAction();
						newObject.minuteInterval=s.getLong(2);
						newObject.lastDate=s.getLong(3);
						newObject.id=_tmpID;
						newObject.startDate=s.getLong(4);
						newObject.lockStatus=s.getInt(5);
						newObject.formatType=s.getString(6);
						newObject.sendCount=s.getInt(7);
						newObject.endDate=s.getLong(8);
						newObject.channel_id=s.getString(9);
						newObject.action_id=s.getString(10);
						putToCache(newObject);
					}
					result.add(newObject);
				}
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}

	/**
	 *  Method:      findBySendCount(int _sendCount)
	 *  Description: 
	 *  Returns:     ArrayList<SubscribedAction>
	 */
	public static ArrayList findBySendCount(int _sendCount)
	{
		ArrayList result = new ArrayList();
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbSubscribedAction.findBySendCount");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT id, minuteInterval, lastDate, startDate, lockStatus, formatType, sendCount, endDate, channel_id, action_id FROM SubscribedAction WHERE sendCount="+_sendCount+" order by generatedId desc");
				while(s.next())
				{
					String _tmpID = s.getString(1);
					SubscribedAction newObject = (SubscribedAction)getFromCache(_tmpID);
					if(newObject ==null)
					{
						newObject = new SubscribedAction();
						newObject.minuteInterval=s.getLong(2);
						newObject.lastDate=s.getLong(3);
						newObject.id=_tmpID;
						newObject.startDate=s.getLong(4);
						newObject.lockStatus=s.getInt(5);
						newObject.formatType=s.getString(6);
						newObject.sendCount=s.getInt(7);
						newObject.endDate=s.getLong(8);
						newObject.channel_id=s.getString(9);
						newObject.action_id=s.getString(10);
						putToCache(newObject);
					}
					result.add(newObject);
				}
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}

	/**
	 *  Method:      findByEndDate(long _endDate)
	 *  Description: 
	 *  Returns:     ArrayList<SubscribedAction>
	 */
	public static ArrayList findByEndDate(long _endDate)
	{
		ArrayList result = new ArrayList();
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbSubscribedAction.findByEndDate");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT id, minuteInterval, lastDate, startDate, lockStatus, formatType, sendCount, endDate, channel_id, action_id FROM SubscribedAction WHERE endDate="+_endDate+" order by generatedId desc");
				while(s.next())
				{
					String _tmpID = s.getString(1);
					SubscribedAction newObject = (SubscribedAction)getFromCache(_tmpID);
					if(newObject ==null)
					{
						newObject = new SubscribedAction();
						newObject.minuteInterval=s.getLong(2);
						newObject.lastDate=s.getLong(3);
						newObject.id=_tmpID;
						newObject.startDate=s.getLong(4);
						newObject.lockStatus=s.getInt(5);
						newObject.formatType=s.getString(6);
						newObject.sendCount=s.getInt(7);
						newObject.endDate=s.getLong(8);
						newObject.channel_id=s.getString(9);
						newObject.action_id=s.getString(10);
						putToCache(newObject);
					}
					result.add(newObject);
				}
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}

	/**
	 *  Method:      findByChannel(_dbCommunicationChannel _channel)
	 *  Description: 
	 *  Returns:     ArrayList<SubscribedAction>
	 */
	public static ArrayList findByChannel(_dbCommunicationChannel _channel)
	{
		ArrayList result = new ArrayList();
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbSubscribedAction.findByChannel");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT id, minuteInterval, lastDate, startDate, lockStatus, formatType, sendCount, endDate, channel_id, action_id FROM SubscribedAction WHERE channel_id='"+toSQL(((_channel==null)?"":_channel.getId()))+"'"+" order by generatedId desc");
				while(s.next())
				{
					String _tmpID = s.getString(1);
					SubscribedAction newObject = (SubscribedAction)getFromCache(_tmpID);
					if(newObject ==null)
					{
						newObject = new SubscribedAction();
						newObject.minuteInterval=s.getLong(2);
						newObject.lastDate=s.getLong(3);
						newObject.id=_tmpID;
						newObject.startDate=s.getLong(4);
						newObject.lockStatus=s.getInt(5);
						newObject.formatType=s.getString(6);
						newObject.sendCount=s.getInt(7);
						newObject.endDate=s.getLong(8);
						newObject.channel_id=s.getString(9);
						newObject.action_id=s.getString(10);
						putToCache(newObject);
					}
					result.add(newObject);
				}
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}

	/**
	 *  Method:      findByAction(_dbAction _action)
	 *  Description: 
	 *  Returns:     ArrayList<SubscribedAction>
	 */
	public static ArrayList findByAction(_dbAction _action)
	{
		ArrayList result = new ArrayList();
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbSubscribedAction.findByAction");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT id, minuteInterval, lastDate, startDate, lockStatus, formatType, sendCount, endDate, channel_id, action_id FROM SubscribedAction WHERE action_id='"+toSQL(((_action==null)?"":_action.getId()))+"'"+" order by generatedId desc");
				while(s.next())
				{
					String _tmpID = s.getString(1);
					SubscribedAction newObject = (SubscribedAction)getFromCache(_tmpID);
					if(newObject ==null)
					{
						newObject = new SubscribedAction();
						newObject.minuteInterval=s.getLong(2);
						newObject.lastDate=s.getLong(3);
						newObject.id=_tmpID;
						newObject.startDate=s.getLong(4);
						newObject.lockStatus=s.getInt(5);
						newObject.formatType=s.getString(6);
						newObject.sendCount=s.getInt(7);
						newObject.endDate=s.getLong(8);
						newObject.channel_id=s.getString(9);
						newObject.action_id=s.getString(10);
						putToCache(newObject);
					}
					result.add(newObject);
				}
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}

	/**
	 * returns boolean
	 */
	public boolean commit()
	{
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbSubscribedAction.commit");
			try
			{
				stmt.executeUpdate( "UPDATE SubscribedAction set minuteInterval= "+minuteInterval+", lastDate= "+lastDate+", startDate= "+startDate+", lockStatus= "+lockStatus+", formatType= '"+toSQL(formatType)+"', sendCount= "+sendCount+", endDate= "+endDate+", channel_id= '"+toSQL(channel_id)+"', action_id= '"+toSQL(action_id)+"' WHERE id='"+id+"'");
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return true;
	}


	/**
	 * returns ArrayList<SubscribedAction>
	 */
	public static ArrayList getAll()
	{
		ArrayList result = new ArrayList();
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbSubscribedAction.getAll");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT id, minuteInterval, lastDate, startDate, lockStatus, formatType, sendCount, endDate, channel_id, action_id FROM SubscribedAction order by generatedId desc");
				while(s.next())
				{
					String _tmpID = s.getString(1);
					SubscribedAction newObject = (SubscribedAction)getFromCache(_tmpID);
					if(newObject ==null)
					{
						newObject = new SubscribedAction();
						newObject.minuteInterval=s.getLong(2);
						newObject.lastDate=s.getLong(3);
						newObject.id=_tmpID;
						newObject.startDate=s.getLong(4);
						newObject.lockStatus=s.getInt(5);
						newObject.formatType=s.getString(6);
						newObject.sendCount=s.getInt(7);
						newObject.endDate=s.getLong(8);
						newObject.channel_id=s.getString(9);
						newObject.action_id=s.getString(10);
						putToCache(newObject);
					}
					result.add(newObject);
				}
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}


	/**
	 * create a new object in the database
	 */
	static public SubscribedAction createInstance( long  _minuteInterval, long  _lastDate, long  _startDate, int  _lockStatus, String  _formatType, int  _sendCount, long  _endDate, _dbCommunicationChannel _channel, _dbAction _action )
	{
		SubscribedAction result = null;
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbSubscribedAction.createInstance");
			try
			{
				String nextGUID = new java.rmi.server.UID().toString();
				stmt.executeUpdate( "INSERT INTO SubscribedAction ( minuteInterval, lastDate, id, startDate, lockStatus, formatType, sendCount, endDate, channel_id, action_id) VALUES ("+_minuteInterval+", "+_lastDate+", '"+nextGUID+"', "+_startDate+", "+_lockStatus+",  '"+toSQL(_formatType)+"', "+_sendCount+", "+_endDate+",  '"+((_channel==null)?"":_channel.getId())+"',  '"+((_action==null)?"":_action.getId())+"')");
				result = new SubscribedAction();
				result.minuteInterval= _minuteInterval;
				result.lastDate= _lastDate;
				result.id= nextGUID;
				result.startDate= _startDate;
				result.lockStatus= _lockStatus;
				result.formatType= _formatType;
				result.sendCount= _sendCount;
				result.endDate= _endDate;
				result.channel_id= (_channel==null)?"":_channel.getId();
				result.action_id= (_action==null)?"":_action.getId();
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}


	/**
	 * create a new object in the database
	 */
	static public void newInstance( long  _minuteInterval, long  _lastDate, long  _startDate, int  _lockStatus, String  _formatType, int  _sendCount, long  _endDate, _dbCommunicationChannel _channel, _dbAction _action )
	{
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbSubscribedAction.newInstance");
			try
			{
				String nextGUID = new java.rmi.server.UID().toString();
				stmt.executeUpdate( "INSERT INTO SubscribedAction ( minuteInterval, lastDate, id, startDate, lockStatus, formatType, sendCount, endDate, channel_id, action_id) VALUES ("+_minuteInterval+", "+_lastDate+", '"+nextGUID+"', "+_startDate+", "+_lockStatus+",  '"+toSQL(_formatType)+"', "+_sendCount+", "+_endDate+",  '"+((_channel==null)?"":_channel.getId())+"',  '"+((_action==null)?"":_action.getId())+"')");
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
	}


	/**
	 * destroy a object in the database
	 */
	static public boolean destroyInstance( String  _key)
	{
		boolean result = false;
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbSubscribedAction.destroyInstance");
			try
			{
					stmt.executeUpdate( "DELETE FROM SubscribedAction WHERE id='"+_key+"'");
					result = true;
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}


	/**
	 * destroy ALL objects in the database
	 */
	static public boolean destroyAll()
	{
		boolean result = false;
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbSubscribedAction.destroyAll");
			try
			{
					stmt.executeUpdate("DELETE from SubscribedAction" );
					result = true;
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}


	/**
	 */
	public String toString()
	{
		StringBuffer result = new StringBuffer(1024);
		result.append(minuteInterval);
		result.append("|");
		result.append(lastDate);
		result.append("|");
		result.append(id);
		result.append("|");
		result.append(startDate);
		result.append("|");
		result.append(lockStatus);
		result.append("|");
		result.append(formatType);
		result.append("|");
		result.append(sendCount);
		result.append("|");
		result.append(endDate);
		result.append("|");
		result.append(channel_id);
		result.append("|");
		result.append(action_id);
		return result.toString();
	}


	/**
	 * init the class
	 */
	static
	{
		try
		{
			DatabaseMetaData dMeta = ConnectionManager.getValid().getMetaData ();
			ResultSet result;
			result=dMeta.getColumns(null,null,"SubscribedAction","minuteInterval");
			if(!result.next())
			{
				System.out.println("ERROR: installed DB-schema not compatible to java classes");
				System.out.println("       Attribute 'minuteInterval' in table 'SubscribedAction' missing");
			}
			result.close();
			result=dMeta.getColumns(null,null,"SubscribedAction","lastDate");
			if(!result.next())
			{
				System.out.println("ERROR: installed DB-schema not compatible to java classes");
				System.out.println("       Attribute 'lastDate' in table 'SubscribedAction' missing");
			}
			result.close();
			result=dMeta.getColumns(null,null,"SubscribedAction","id");
			if(!result.next())
			{
				System.out.println("ERROR: installed DB-schema not compatible to java classes");
				System.out.println("       Attribute 'id' in table 'SubscribedAction' missing");
			}
			result.close();
			result=dMeta.getColumns(null,null,"SubscribedAction","startDate");
			if(!result.next())
			{
				System.out.println("ERROR: installed DB-schema not compatible to java classes");
				System.out.println("       Attribute 'startDate' in table 'SubscribedAction' missing");
			}
			result.close();
			result=dMeta.getColumns(null,null,"SubscribedAction","lockStatus");
			if(!result.next())
			{
				System.out.println("ERROR: installed DB-schema not compatible to java classes");
				System.out.println("       Attribute 'lockStatus' in table 'SubscribedAction' missing");
			}
			result.close();
			result=dMeta.getColumns(null,null,"SubscribedAction","formatType");
			if(!result.next())
			{
				System.out.println("ERROR: installed DB-schema not compatible to java classes");
				System.out.println("       Attribute 'formatType' in table 'SubscribedAction' missing");
			}
			result.close();
			result=dMeta.getColumns(null,null,"SubscribedAction","sendCount");
			if(!result.next())
			{
				System.out.println("ERROR: installed DB-schema not compatible to java classes");
				System.out.println("       Attribute 'sendCount' in table 'SubscribedAction' missing");
			}
			result.close();
			result=dMeta.getColumns(null,null,"SubscribedAction","endDate");
			if(!result.next())
			{
				System.out.println("ERROR: installed DB-schema not compatible to java classes");
				System.out.println("       Attribute 'endDate' in table 'SubscribedAction' missing");
			}
			result.close();
			result=dMeta.getColumns(null,null,"SubscribedAction","channel_id");
			if(!result.next())
			{
				System.out.println("ERROR: installed DB-schema not compatible to java classes");
				System.out.println("       Attribute 'channel_id' in table 'SubscribedAction' missing");
			}
			result.close();
			result=dMeta.getColumns(null,null,"SubscribedAction","action_id");
			if(!result.next())
			{
				System.out.println("ERROR: installed DB-schema not compatible to java classes");
				System.out.println("       Attribute 'action_id' in table 'SubscribedAction' missing");
			}
			result.close();
		}
		catch (Exception ex)
		{
		}
	}


}
