package de.shorti.baseknowledge.objects;

/**
 * Class generated by automatic ClassGenerator
 * Date: Sat May 11 21:15:24 GMT+02:00 2002
 */
import de.shorti.db.*;
import java.util.ArrayList;
import java.util.Iterator;
import java.sql.*;

class _dbGeschaeftsstelle2Service extends dbObject 
{

	String    service_id;	// Foreign Key pointing to Table [Service], Field [id]
	int       amount;
	String    geschaeftsstelle_id;	// Foreign Key pointing to Table [Geschaeftsstelle], Field [id]


	/**
	 * destroy a object in the database
	 */
	public boolean destroy()
	{
		boolean result = false;
		String    _key   = id;
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbGeschaeftsstelle2Service.destroyInstance");
			try
			{
					stmt.executeUpdate( "DELETE FROM Geschaeftsstelle2Service WHERE id='"+_key+"'");
					result = true;
					removeFromCache(this);
					id     = null;
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}



	/**
	 * Method:      getAmount()
	 * Description: 
	 * Returns:     int
	 */
	public int getAmount()
	{
		return amount;
	}

	/**
	 * Method:      setAmount(int _amount, boolean _autoCommit)
	 * Description: 
	 * Returns:     void
	 */
	public void setAmount(int _amount, boolean _autoCommit)
	{
		amount=_amount;
		if(_autoCommit)
		{
			commit();
		}
	}

	/**
	 * Method:      getId()
	 * Description: 
	 * Returns:     String
	 */
	public String getId()
	{
		return id;
	}

	/**
	 * Method:      getService()
	 * Description: 
	 * Returns:     Service
	 */
	public Service getService()
	{
		return Service.findById(service_id);
	}

	/**
	 * Method:      setService()
	 * Description: 
	 * Returns:     void
	 */
	public void setService(Service _foreigner, boolean _autocommit)
	{
		service_id= _foreigner.getId();
		if (_autocommit == true)
			commit();
	}

	/**
	 * Method:      getGeschaeftsstelle()
	 * Description: 
	 * Returns:     Geschaeftsstelle
	 */
	public Geschaeftsstelle getGeschaeftsstelle()
	{
		return Geschaeftsstelle.findById(geschaeftsstelle_id);
	}

	/**
	 * Method:      setGeschaeftsstelle()
	 * Description: 
	 * Returns:     void
	 */
	public void setGeschaeftsstelle(Geschaeftsstelle _foreigner, boolean _autocommit)
	{
		geschaeftsstelle_id= _foreigner.getId();
		if (_autocommit == true)
			commit();
	}

	/**
	 *  Method:      findByService(_dbService _service)
	 *  Description: 
	 *  Returns:     ArrayList<Geschaeftsstelle2Service>
	 */
	public static ArrayList findByService(_dbService _service)
	{
		ArrayList result = new ArrayList();
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbGeschaeftsstelle2Service.findByService");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT id, service_id, amount, geschaeftsstelle_id FROM Geschaeftsstelle2Service WHERE service_id='"+toSQL(((_service==null)?"":_service.getId()))+"'"+" order by generatedId desc");
				while(s.next())
				{
					String _tmpID = s.getString(1);
					Geschaeftsstelle2Service newObject = (Geschaeftsstelle2Service)getFromCache(_tmpID);
					if(newObject ==null)
					{
						newObject = new Geschaeftsstelle2Service();
						newObject.service_id=s.getString(2);
						newObject.amount=s.getInt(3);
						newObject.geschaeftsstelle_id=s.getString(4);
						newObject.id=_tmpID;
						putToCache(newObject);
					}
					result.add(newObject);
				}
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}

	/**
	 *  Method:      findByAmount(int _amount)
	 *  Description: 
	 *  Returns:     ArrayList<Geschaeftsstelle2Service>
	 */
	public static ArrayList findByAmount(int _amount)
	{
		ArrayList result = new ArrayList();
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbGeschaeftsstelle2Service.findByAmount");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT id, service_id, amount, geschaeftsstelle_id FROM Geschaeftsstelle2Service WHERE amount="+_amount+" order by generatedId desc");
				while(s.next())
				{
					String _tmpID = s.getString(1);
					Geschaeftsstelle2Service newObject = (Geschaeftsstelle2Service)getFromCache(_tmpID);
					if(newObject ==null)
					{
						newObject = new Geschaeftsstelle2Service();
						newObject.service_id=s.getString(2);
						newObject.amount=s.getInt(3);
						newObject.geschaeftsstelle_id=s.getString(4);
						newObject.id=_tmpID;
						putToCache(newObject);
					}
					result.add(newObject);
				}
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}

	/**
	 *  Method:      findByGeschaeftsstelle(_dbGeschaeftsstelle _geschaeftsstelle)
	 *  Description: 
	 *  Returns:     ArrayList<Geschaeftsstelle2Service>
	 */
	public static ArrayList findByGeschaeftsstelle(_dbGeschaeftsstelle _geschaeftsstelle)
	{
		ArrayList result = new ArrayList();
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbGeschaeftsstelle2Service.findByGeschaeftsstelle");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT id, service_id, amount, geschaeftsstelle_id FROM Geschaeftsstelle2Service WHERE geschaeftsstelle_id='"+toSQL(((_geschaeftsstelle==null)?"":_geschaeftsstelle.getId()))+"'"+" order by generatedId desc");
				while(s.next())
				{
					String _tmpID = s.getString(1);
					Geschaeftsstelle2Service newObject = (Geschaeftsstelle2Service)getFromCache(_tmpID);
					if(newObject ==null)
					{
						newObject = new Geschaeftsstelle2Service();
						newObject.service_id=s.getString(2);
						newObject.amount=s.getInt(3);
						newObject.geschaeftsstelle_id=s.getString(4);
						newObject.id=_tmpID;
						putToCache(newObject);
					}
					result.add(newObject);
				}
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}

	/**
	 *  Method:      findById(String _id)
	 *  Description: 
	 *  Returns:     Geschaeftsstelle2Service
	 */
	public static Geschaeftsstelle2Service findById(String _id)
	{
		Geschaeftsstelle2Service result = (Geschaeftsstelle2Service)getFromCache(_id);
		if(result!=null) return result;
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbGeschaeftsstelle2Service.findById");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT id, service_id, amount, geschaeftsstelle_id FROM Geschaeftsstelle2Service WHERE id='"+toSQL(_id)+"'"+" order by generatedId desc");
				if(s.next())
				{
					result = new Geschaeftsstelle2Service();
					result.service_id= s.getString(2);
					result.amount= s.getInt(3);
					result.geschaeftsstelle_id= s.getString(4);
					result.id= _id;
					putToCache(result);
				}
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}

	/**
	 * returns boolean
	 */
	public boolean commit()
	{
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbGeschaeftsstelle2Service.commit");
			try
			{
				stmt.executeUpdate( "UPDATE Geschaeftsstelle2Service set service_id= '"+toSQL(service_id)+"', amount= "+amount+", geschaeftsstelle_id= '"+toSQL(geschaeftsstelle_id)+"' WHERE id='"+id+"'");
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return true;
	}


	/**
	 * returns ArrayList<Geschaeftsstelle2Service>
	 */
	public static ArrayList getAll()
	{
		ArrayList result = new ArrayList();
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbGeschaeftsstelle2Service.getAll");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT id, service_id, amount, geschaeftsstelle_id FROM Geschaeftsstelle2Service order by generatedId desc");
				while(s.next())
				{
					String _tmpID = s.getString(1);
					Geschaeftsstelle2Service newObject = (Geschaeftsstelle2Service)getFromCache(_tmpID);
					if(newObject ==null)
					{
						newObject = new Geschaeftsstelle2Service();
						newObject.service_id=s.getString(2);
						newObject.amount=s.getInt(3);
						newObject.geschaeftsstelle_id=s.getString(4);
						newObject.id=_tmpID;
						putToCache(newObject);
					}
					result.add(newObject);
				}
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}


	/**
	 * create a new object in the database
	 */
	static public Geschaeftsstelle2Service createInstance( _dbService _service, int  _amount, _dbGeschaeftsstelle _geschaeftsstelle )
	{
		Geschaeftsstelle2Service result = null;
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbGeschaeftsstelle2Service.createInstance");
			try
			{
				String nextGUID = new java.rmi.server.UID().toString();
				stmt.executeUpdate( "INSERT INTO Geschaeftsstelle2Service ( service_id, amount, geschaeftsstelle_id, id) VALUES ( '"+((_service==null)?"":_service.getId())+"', "+_amount+",  '"+((_geschaeftsstelle==null)?"":_geschaeftsstelle.getId())+"', '"+nextGUID+"')");
				result = new Geschaeftsstelle2Service();
				result.service_id= (_service==null)?"":_service.getId();
				result.amount= _amount;
				result.geschaeftsstelle_id= (_geschaeftsstelle==null)?"":_geschaeftsstelle.getId();
				result.id= nextGUID;
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}


	/**
	 * create a new object in the database
	 */
	static public void newInstance( _dbService _service, int  _amount, _dbGeschaeftsstelle _geschaeftsstelle )
	{
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbGeschaeftsstelle2Service.newInstance");
			try
			{
				String nextGUID = new java.rmi.server.UID().toString();
				stmt.executeUpdate( "INSERT INTO Geschaeftsstelle2Service ( service_id, amount, geschaeftsstelle_id, id) VALUES ( '"+((_service==null)?"":_service.getId())+"', "+_amount+",  '"+((_geschaeftsstelle==null)?"":_geschaeftsstelle.getId())+"', '"+nextGUID+"')");
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
	}


	/**
	 * destroy a object in the database
	 */
	static public boolean destroyInstance( String  _key)
	{
		boolean result = false;
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbGeschaeftsstelle2Service.destroyInstance");
			try
			{
					stmt.executeUpdate( "DELETE FROM Geschaeftsstelle2Service WHERE id='"+_key+"'");
					result = true;
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}


	/**
	 * destroy ALL objects in the database
	 */
	static public boolean destroyAll()
	{
		boolean result = false;
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbGeschaeftsstelle2Service.destroyAll");
			try
			{
					stmt.executeUpdate("DELETE from Geschaeftsstelle2Service" );
					result = true;
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}


	/**
	 */
	public String toString()
	{
		StringBuffer result = new StringBuffer(1024);
		result.append(service_id);
		result.append("|");
		result.append(amount);
		result.append("|");
		result.append(geschaeftsstelle_id);
		result.append("|");
		result.append(id);
		return result.toString();
	}


	/**
	 * init the class
	 */
	static
	{
		try
		{
			DatabaseMetaData dMeta = ConnectionManager.getValid().getMetaData ();
			ResultSet result;
			result=dMeta.getColumns(null,null,"Geschaeftsstelle2Service","service_id");
			if(!result.next())
			{
				System.out.println("ERROR: installed DB-schema not compatible to java classes");
				System.out.println("       Attribute 'service_id' in table 'Geschaeftsstelle2Service' missing");
			}
			result.close();
			result=dMeta.getColumns(null,null,"Geschaeftsstelle2Service","amount");
			if(!result.next())
			{
				System.out.println("ERROR: installed DB-schema not compatible to java classes");
				System.out.println("       Attribute 'amount' in table 'Geschaeftsstelle2Service' missing");
			}
			result.close();
			result=dMeta.getColumns(null,null,"Geschaeftsstelle2Service","geschaeftsstelle_id");
			if(!result.next())
			{
				System.out.println("ERROR: installed DB-schema not compatible to java classes");
				System.out.println("       Attribute 'geschaeftsstelle_id' in table 'Geschaeftsstelle2Service' missing");
			}
			result.close();
			result=dMeta.getColumns(null,null,"Geschaeftsstelle2Service","id");
			if(!result.next())
			{
				System.out.println("ERROR: installed DB-schema not compatible to java classes");
				System.out.println("       Attribute 'id' in table 'Geschaeftsstelle2Service' missing");
			}
			result.close();
		}
		catch (Exception ex)
		{
		}
	}


}
