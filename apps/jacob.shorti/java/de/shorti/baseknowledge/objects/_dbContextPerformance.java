package de.shorti.baseknowledge.objects;

/**
 * Class generated by automatic ClassGenerator
 * Date: Sat May 11 21:15:21 GMT+02:00 2002
 */
import de.shorti.db.*;
import java.util.ArrayList;
import java.util.Iterator;
import java.sql.*;

class _dbContextPerformance extends dbObject 
{

	long      duration;
	String    request_id;	// Foreign Key pointing to Table [Request], Field [id]
	String    contextRegistry_id;	// Foreign Key pointing to Table [ContextRegistry], Field [id]


	/**
	 * destroy a object in the database
	 */
	public boolean destroy()
	{
		boolean result = false;
		String    _key   = id;
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbContextPerformance.destroyInstance");
			try
			{
					stmt.executeUpdate( "DELETE FROM ContextPerformance WHERE id='"+_key+"'");
					result = true;
					removeFromCache(this);
					id     = null;
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}



	/**
	 * Method:      getDuration()
	 * Description: 
	 * Returns:     long
	 */
	public long getDuration()
	{
		return duration;
	}

	/**
	 * Method:      setDuration(long _duration, boolean _autoCommit)
	 * Description: 
	 * Returns:     void
	 */
	public void setDuration(long _duration, boolean _autoCommit)
	{
		duration=_duration;
		if(_autoCommit)
		{
			commit();
		}
	}

	/**
	 * Method:      getId()
	 * Description: 
	 * Returns:     String
	 */
	public String getId()
	{
		return id;
	}

	/**
	 * Method:      getRequest()
	 * Description: 
	 * Returns:     Request
	 */
	public Request getRequest()
	{
		return Request.findById(request_id);
	}

	/**
	 * Method:      setRequest()
	 * Description: 
	 * Returns:     void
	 */
	public void setRequest(Request _foreigner, boolean _autocommit)
	{
		request_id= _foreigner.getId();
		if (_autocommit == true)
			commit();
	}

	/**
	 * Method:      getContextRegistry()
	 * Description: 
	 * Returns:     ContextRegistry
	 */
	public ContextRegistry getContextRegistry()
	{
		return ContextRegistry.findById(contextRegistry_id);
	}

	/**
	 * Method:      setContextRegistry()
	 * Description: 
	 * Returns:     void
	 */
	public void setContextRegistry(ContextRegistry _foreigner, boolean _autocommit)
	{
		contextRegistry_id= _foreigner.getId();
		if (_autocommit == true)
			commit();
	}

	/**
	 *  Method:      findByDuration(long _duration)
	 *  Description: 
	 *  Returns:     ArrayList<ContextPerformance>
	 */
	public static ArrayList findByDuration(long _duration)
	{
		ArrayList result = new ArrayList();
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbContextPerformance.findByDuration");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT id, duration, request_id, contextRegistry_id FROM ContextPerformance WHERE duration="+_duration+" order by generatedId desc");
				while(s.next())
				{
					String _tmpID = s.getString(1);
					ContextPerformance newObject = (ContextPerformance)getFromCache(_tmpID);
					if(newObject ==null)
					{
						newObject = new ContextPerformance();
						newObject.duration=s.getLong(2);
						newObject.request_id=s.getString(3);
						newObject.contextRegistry_id=s.getString(4);
						newObject.id=_tmpID;
						putToCache(newObject);
					}
					result.add(newObject);
				}
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}

	/**
	 *  Method:      findByRequest(_dbRequest _request)
	 *  Description: 
	 *  Returns:     ArrayList<ContextPerformance>
	 */
	public static ArrayList findByRequest(_dbRequest _request)
	{
		ArrayList result = new ArrayList();
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbContextPerformance.findByRequest");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT id, duration, request_id, contextRegistry_id FROM ContextPerformance WHERE request_id='"+toSQL(((_request==null)?"":_request.getId()))+"'"+" order by generatedId desc");
				while(s.next())
				{
					String _tmpID = s.getString(1);
					ContextPerformance newObject = (ContextPerformance)getFromCache(_tmpID);
					if(newObject ==null)
					{
						newObject = new ContextPerformance();
						newObject.duration=s.getLong(2);
						newObject.request_id=s.getString(3);
						newObject.contextRegistry_id=s.getString(4);
						newObject.id=_tmpID;
						putToCache(newObject);
					}
					result.add(newObject);
				}
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}

	/**
	 *  Method:      findByContextRegistry(_dbContextRegistry _contextRegistry)
	 *  Description: 
	 *  Returns:     ArrayList<ContextPerformance>
	 */
	public static ArrayList findByContextRegistry(_dbContextRegistry _contextRegistry)
	{
		ArrayList result = new ArrayList();
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbContextPerformance.findByContextRegistry");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT id, duration, request_id, contextRegistry_id FROM ContextPerformance WHERE contextRegistry_id='"+toSQL(((_contextRegistry==null)?"":_contextRegistry.getId()))+"'"+" order by generatedId desc");
				while(s.next())
				{
					String _tmpID = s.getString(1);
					ContextPerformance newObject = (ContextPerformance)getFromCache(_tmpID);
					if(newObject ==null)
					{
						newObject = new ContextPerformance();
						newObject.duration=s.getLong(2);
						newObject.request_id=s.getString(3);
						newObject.contextRegistry_id=s.getString(4);
						newObject.id=_tmpID;
						putToCache(newObject);
					}
					result.add(newObject);
				}
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}

	/**
	 *  Method:      findById(String _id)
	 *  Description: 
	 *  Returns:     ContextPerformance
	 */
	public static ContextPerformance findById(String _id)
	{
		ContextPerformance result = (ContextPerformance)getFromCache(_id);
		if(result!=null) return result;
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbContextPerformance.findById");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT id, duration, request_id, contextRegistry_id FROM ContextPerformance WHERE id='"+toSQL(_id)+"'"+" order by generatedId desc");
				if(s.next())
				{
					result = new ContextPerformance();
					result.duration= s.getLong(2);
					result.request_id= s.getString(3);
					result.contextRegistry_id= s.getString(4);
					result.id= _id;
					putToCache(result);
				}
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}

	/**
	 * returns boolean
	 */
	public boolean commit()
	{
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbContextPerformance.commit");
			try
			{
				stmt.executeUpdate( "UPDATE ContextPerformance set duration= "+duration+", request_id= '"+toSQL(request_id)+"', contextRegistry_id= '"+toSQL(contextRegistry_id)+"' WHERE id='"+id+"'");
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return true;
	}


	/**
	 * returns ArrayList<ContextPerformance>
	 */
	public static ArrayList getAll()
	{
		ArrayList result = new ArrayList();
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbContextPerformance.getAll");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT id, duration, request_id, contextRegistry_id FROM ContextPerformance order by generatedId desc");
				while(s.next())
				{
					String _tmpID = s.getString(1);
					ContextPerformance newObject = (ContextPerformance)getFromCache(_tmpID);
					if(newObject ==null)
					{
						newObject = new ContextPerformance();
						newObject.duration=s.getLong(2);
						newObject.request_id=s.getString(3);
						newObject.contextRegistry_id=s.getString(4);
						newObject.id=_tmpID;
						putToCache(newObject);
					}
					result.add(newObject);
				}
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}


	/**
	 * create a new object in the database
	 */
	static public ContextPerformance createInstance( long  _duration, _dbRequest _request, _dbContextRegistry _contextRegistry )
	{
		ContextPerformance result = null;
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbContextPerformance.createInstance");
			try
			{
				String nextGUID = new java.rmi.server.UID().toString();
				stmt.executeUpdate( "INSERT INTO ContextPerformance ( duration, request_id, contextRegistry_id, id) VALUES ("+_duration+",  '"+((_request==null)?"":_request.getId())+"',  '"+((_contextRegistry==null)?"":_contextRegistry.getId())+"', '"+nextGUID+"')");
				result = new ContextPerformance();
				result.duration= _duration;
				result.request_id= (_request==null)?"":_request.getId();
				result.contextRegistry_id= (_contextRegistry==null)?"":_contextRegistry.getId();
				result.id= nextGUID;
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}


	/**
	 * create a new object in the database
	 */
	static public void newInstance( long  _duration, _dbRequest _request, _dbContextRegistry _contextRegistry )
	{
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbContextPerformance.newInstance");
			try
			{
				String nextGUID = new java.rmi.server.UID().toString();
				stmt.executeUpdate( "INSERT INTO ContextPerformance ( duration, request_id, contextRegistry_id, id) VALUES ("+_duration+",  '"+((_request==null)?"":_request.getId())+"',  '"+((_contextRegistry==null)?"":_contextRegistry.getId())+"', '"+nextGUID+"')");
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
	}


	/**
	 * destroy a object in the database
	 */
	static public boolean destroyInstance( String  _key)
	{
		boolean result = false;
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbContextPerformance.destroyInstance");
			try
			{
					stmt.executeUpdate( "DELETE FROM ContextPerformance WHERE id='"+_key+"'");
					result = true;
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}


	/**
	 * destroy ALL objects in the database
	 */
	static public boolean destroyAll()
	{
		boolean result = false;
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbContextPerformance.destroyAll");
			try
			{
					stmt.executeUpdate("DELETE from ContextPerformance" );
					result = true;
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}


	/**
	 */
	public String toString()
	{
		StringBuffer result = new StringBuffer(1024);
		result.append(duration);
		result.append("|");
		result.append(request_id);
		result.append("|");
		result.append(contextRegistry_id);
		result.append("|");
		result.append(id);
		return result.toString();
	}


	/**
	 * init the class
	 */
	static
	{
		try
		{
			DatabaseMetaData dMeta = ConnectionManager.getValid().getMetaData ();
			ResultSet result;
			result=dMeta.getColumns(null,null,"ContextPerformance","duration");
			if(!result.next())
			{
				System.out.println("ERROR: installed DB-schema not compatible to java classes");
				System.out.println("       Attribute 'duration' in table 'ContextPerformance' missing");
			}
			result.close();
			result=dMeta.getColumns(null,null,"ContextPerformance","request_id");
			if(!result.next())
			{
				System.out.println("ERROR: installed DB-schema not compatible to java classes");
				System.out.println("       Attribute 'request_id' in table 'ContextPerformance' missing");
			}
			result.close();
			result=dMeta.getColumns(null,null,"ContextPerformance","contextRegistry_id");
			if(!result.next())
			{
				System.out.println("ERROR: installed DB-schema not compatible to java classes");
				System.out.println("       Attribute 'contextRegistry_id' in table 'ContextPerformance' missing");
			}
			result.close();
			result=dMeta.getColumns(null,null,"ContextPerformance","id");
			if(!result.next())
			{
				System.out.println("ERROR: installed DB-schema not compatible to java classes");
				System.out.println("       Attribute 'id' in table 'ContextPerformance' missing");
			}
			result.close();
		}
		catch (Exception ex)
		{
		}
	}


}
