package de.shorti.baseknowledge.objects;

/**
 * Class generated by automatic ClassGenerator
 * Date: Sat May 11 21:15:23 GMT+02:00 2002
 */
import de.shorti.db.*;
import java.util.ArrayList;
import java.util.Iterator;
import java.sql.*;

class _dbGeschaeftsstelle extends dbObject 
{

	String    contactPerson_id;	// Foreign Key pointing to Table [ContactPerson], Field [id]
	String    company_id;	// Foreign Key pointing to Table [Company], Field [id]
	String    telekom_id;	// Foreign Key pointing to Table [Telekom], Field [id]
	String    description;
	String    address_id;	// Foreign Key pointing to Table [Address], Field [id]


	/**
	 * destroy a object in the database
	 */
	public boolean destroy()
	{
		boolean result = false;
		String    _key   = id;
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbGeschaeftsstelle.destroyInstance");
			try
			{
					stmt.executeUpdate( "DELETE FROM Geschaeftsstelle WHERE id='"+_key+"'");
					result = true;
					removeFromCache(this);
					id     = null;
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}



	/**
	 * Method:      getDescription()
	 * Description: 
	 * Returns:     String
	 */
	public String getDescription()
	{
		return description;
	}

	/**
	 * Method:      setDescription(String _description, boolean _autoCommit)
	 * Description: 
	 * Returns:     void
	 */
	public void setDescription(String _description, boolean _autoCommit)
	{
		description=_description;
		if(_autoCommit)
		{
			commit();
		}
	}

	/**
	 * Method:      getId()
	 * Description: 
	 * Returns:     String
	 */
	public String getId()
	{
		return id;
	}

	/**
	 * Method:      getContactPerson()
	 * Description: 
	 * Returns:     ContactPerson
	 */
	public ContactPerson getContactPerson()
	{
		return ContactPerson.findById(contactPerson_id);
	}

	/**
	 * Method:      setContactPerson()
	 * Description: 
	 * Returns:     void
	 */
	public void setContactPerson(ContactPerson _foreigner, boolean _autocommit)
	{
		contactPerson_id= _foreigner.getId();
		if (_autocommit == true)
			commit();
	}

	/**
	 * Method:      getCompany()
	 * Description: 
	 * Returns:     Company
	 */
	public Company getCompany()
	{
		return Company.findById(company_id);
	}

	/**
	 * Method:      setCompany()
	 * Description: 
	 * Returns:     void
	 */
	public void setCompany(Company _foreigner, boolean _autocommit)
	{
		company_id= _foreigner.getId();
		if (_autocommit == true)
			commit();
	}

	/**
	 * Method:      getTelekom()
	 * Description: 
	 * Returns:     Telekom
	 */
	public Telekom getTelekom()
	{
		return Telekom.findById(telekom_id);
	}

	/**
	 * Method:      setTelekom()
	 * Description: 
	 * Returns:     void
	 */
	public void setTelekom(Telekom _foreigner, boolean _autocommit)
	{
		telekom_id= _foreigner.getId();
		if (_autocommit == true)
			commit();
	}

	/**
	 * Method:      getAddress()
	 * Description: 
	 * Returns:     Address
	 */
	public Address getAddress()
	{
		return Address.findById(address_id);
	}

	/**
	 * Method:      setAddress()
	 * Description: 
	 * Returns:     void
	 */
	public void setAddress(Address _foreigner, boolean _autocommit)
	{
		address_id= _foreigner.getId();
		if (_autocommit == true)
			commit();
	}

	/**
	 *  Method:      getGeschaeftsstelle2Services()
	 *  Description:                              
	 *  Returns:     ArrayList<Geschaeftsstelle2Service>
	 */
	public ArrayList getGeschaeftsstelle2Services()
	{
		return _dbGeschaeftsstelle2Service.findByGeschaeftsstelle(this);
	}


	/**
	 *  Method:      getRadioStations()
	 *  Description:                              
	 *  Returns:     ArrayList<RadioStation>
	 */
	public ArrayList getRadioStations()
	{
		return _dbRadioStation.findByGeschaeftsstelle(this);
	}


	/**
	 *  Method:      findByContactPerson(_dbContactPerson _contactPerson)
	 *  Description: 
	 *  Returns:     ArrayList<Geschaeftsstelle>
	 */
	public static ArrayList findByContactPerson(_dbContactPerson _contactPerson)
	{
		ArrayList result = new ArrayList();
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbGeschaeftsstelle.findByContactPerson");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT id, contactPerson_id, company_id, telekom_id, description, address_id FROM Geschaeftsstelle WHERE contactPerson_id='"+toSQL(((_contactPerson==null)?"":_contactPerson.getId()))+"'"+" order by generatedId desc");
				while(s.next())
				{
					String _tmpID = s.getString(1);
					Geschaeftsstelle newObject = (Geschaeftsstelle)getFromCache(_tmpID);
					if(newObject ==null)
					{
						newObject = new Geschaeftsstelle();
						newObject.contactPerson_id=s.getString(2);
						newObject.company_id=s.getString(3);
						newObject.telekom_id=s.getString(4);
						newObject.description=s.getString(5);
						newObject.address_id=s.getString(6);
						newObject.id=_tmpID;
						putToCache(newObject);
					}
					result.add(newObject);
				}
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}

	/**
	 *  Method:      findByCompany(_dbCompany _company)
	 *  Description: 
	 *  Returns:     ArrayList<Geschaeftsstelle>
	 */
	public static ArrayList findByCompany(_dbCompany _company)
	{
		ArrayList result = new ArrayList();
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbGeschaeftsstelle.findByCompany");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT id, contactPerson_id, company_id, telekom_id, description, address_id FROM Geschaeftsstelle WHERE company_id='"+toSQL(((_company==null)?"":_company.getId()))+"'"+" order by generatedId desc");
				while(s.next())
				{
					String _tmpID = s.getString(1);
					Geschaeftsstelle newObject = (Geschaeftsstelle)getFromCache(_tmpID);
					if(newObject ==null)
					{
						newObject = new Geschaeftsstelle();
						newObject.contactPerson_id=s.getString(2);
						newObject.company_id=s.getString(3);
						newObject.telekom_id=s.getString(4);
						newObject.description=s.getString(5);
						newObject.address_id=s.getString(6);
						newObject.id=_tmpID;
						putToCache(newObject);
					}
					result.add(newObject);
				}
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}

	/**
	 *  Method:      findByTelekom(_dbTelekom _telekom)
	 *  Description: 
	 *  Returns:     ArrayList<Geschaeftsstelle>
	 */
	public static ArrayList findByTelekom(_dbTelekom _telekom)
	{
		ArrayList result = new ArrayList();
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbGeschaeftsstelle.findByTelekom");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT id, contactPerson_id, company_id, telekom_id, description, address_id FROM Geschaeftsstelle WHERE telekom_id='"+toSQL(((_telekom==null)?"":_telekom.getId()))+"'"+" order by generatedId desc");
				while(s.next())
				{
					String _tmpID = s.getString(1);
					Geschaeftsstelle newObject = (Geschaeftsstelle)getFromCache(_tmpID);
					if(newObject ==null)
					{
						newObject = new Geschaeftsstelle();
						newObject.contactPerson_id=s.getString(2);
						newObject.company_id=s.getString(3);
						newObject.telekom_id=s.getString(4);
						newObject.description=s.getString(5);
						newObject.address_id=s.getString(6);
						newObject.id=_tmpID;
						putToCache(newObject);
					}
					result.add(newObject);
				}
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}

	/**
	 *  Method:      findByDescription(String _description)
	 *  Description: 
	 *  Returns:     ArrayList<Geschaeftsstelle>
	 */
	public static ArrayList findByDescription(String _description)
	{
		ArrayList result = new ArrayList();
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbGeschaeftsstelle.findByDescription");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT id, contactPerson_id, company_id, telekom_id, description, address_id FROM Geschaeftsstelle WHERE description='"+toSQL(_description)+"'"+" order by generatedId desc");
				while(s.next())
				{
					String _tmpID = s.getString(1);
					Geschaeftsstelle newObject = (Geschaeftsstelle)getFromCache(_tmpID);
					if(newObject ==null)
					{
						newObject = new Geschaeftsstelle();
						newObject.contactPerson_id=s.getString(2);
						newObject.company_id=s.getString(3);
						newObject.telekom_id=s.getString(4);
						newObject.description=s.getString(5);
						newObject.address_id=s.getString(6);
						newObject.id=_tmpID;
						putToCache(newObject);
					}
					result.add(newObject);
				}
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}

	/**
	 *  Method:      findByAddress(_dbAddress _address)
	 *  Description: 
	 *  Returns:     ArrayList<Geschaeftsstelle>
	 */
	public static ArrayList findByAddress(_dbAddress _address)
	{
		ArrayList result = new ArrayList();
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbGeschaeftsstelle.findByAddress");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT id, contactPerson_id, company_id, telekom_id, description, address_id FROM Geschaeftsstelle WHERE address_id='"+toSQL(((_address==null)?"":_address.getId()))+"'"+" order by generatedId desc");
				while(s.next())
				{
					String _tmpID = s.getString(1);
					Geschaeftsstelle newObject = (Geschaeftsstelle)getFromCache(_tmpID);
					if(newObject ==null)
					{
						newObject = new Geschaeftsstelle();
						newObject.contactPerson_id=s.getString(2);
						newObject.company_id=s.getString(3);
						newObject.telekom_id=s.getString(4);
						newObject.description=s.getString(5);
						newObject.address_id=s.getString(6);
						newObject.id=_tmpID;
						putToCache(newObject);
					}
					result.add(newObject);
				}
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}

	/**
	 *  Method:      findById(String _id)
	 *  Description: 
	 *  Returns:     Geschaeftsstelle
	 */
	public static Geschaeftsstelle findById(String _id)
	{
		Geschaeftsstelle result = (Geschaeftsstelle)getFromCache(_id);
		if(result!=null) return result;
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbGeschaeftsstelle.findById");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT id, contactPerson_id, company_id, telekom_id, description, address_id FROM Geschaeftsstelle WHERE id='"+toSQL(_id)+"'"+" order by generatedId desc");
				if(s.next())
				{
					result = new Geschaeftsstelle();
					result.contactPerson_id= s.getString(2);
					result.company_id= s.getString(3);
					result.telekom_id= s.getString(4);
					result.description= s.getString(5);
					result.address_id= s.getString(6);
					result.id= _id;
					putToCache(result);
				}
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}

	/**
	 * returns boolean
	 */
	public boolean commit()
	{
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbGeschaeftsstelle.commit");
			try
			{
				stmt.executeUpdate( "UPDATE Geschaeftsstelle set contactPerson_id= '"+toSQL(contactPerson_id)+"', company_id= '"+toSQL(company_id)+"', telekom_id= '"+toSQL(telekom_id)+"', description= '"+toSQL(description)+"', address_id= '"+toSQL(address_id)+"' WHERE id='"+id+"'");
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return true;
	}


	/**
	 * returns ArrayList<Geschaeftsstelle>
	 */
	public static ArrayList getAll()
	{
		ArrayList result = new ArrayList();
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbGeschaeftsstelle.getAll");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT id, contactPerson_id, company_id, telekom_id, description, address_id FROM Geschaeftsstelle order by generatedId desc");
				while(s.next())
				{
					String _tmpID = s.getString(1);
					Geschaeftsstelle newObject = (Geschaeftsstelle)getFromCache(_tmpID);
					if(newObject ==null)
					{
						newObject = new Geschaeftsstelle();
						newObject.contactPerson_id=s.getString(2);
						newObject.company_id=s.getString(3);
						newObject.telekom_id=s.getString(4);
						newObject.description=s.getString(5);
						newObject.address_id=s.getString(6);
						newObject.id=_tmpID;
						putToCache(newObject);
					}
					result.add(newObject);
				}
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}


	/**
	 * create a new object in the database
	 */
	static public Geschaeftsstelle createInstance( _dbContactPerson _contactPerson, _dbCompany _company, _dbTelekom _telekom, String  _description, _dbAddress _address )
	{
		Geschaeftsstelle result = null;
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbGeschaeftsstelle.createInstance");
			try
			{
				String nextGUID = new java.rmi.server.UID().toString();
				stmt.executeUpdate( "INSERT INTO Geschaeftsstelle ( contactPerson_id, company_id, telekom_id, description, address_id, id) VALUES ( '"+((_contactPerson==null)?"":_contactPerson.getId())+"',  '"+((_company==null)?"":_company.getId())+"',  '"+((_telekom==null)?"":_telekom.getId())+"',  '"+toSQL(_description)+"',  '"+((_address==null)?"":_address.getId())+"', '"+nextGUID+"')");
				result = new Geschaeftsstelle();
				result.contactPerson_id= (_contactPerson==null)?"":_contactPerson.getId();
				result.company_id= (_company==null)?"":_company.getId();
				result.telekom_id= (_telekom==null)?"":_telekom.getId();
				result.description= _description;
				result.address_id= (_address==null)?"":_address.getId();
				result.id= nextGUID;
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}


	/**
	 * create a new object in the database
	 */
	static public void newInstance( _dbContactPerson _contactPerson, _dbCompany _company, _dbTelekom _telekom, String  _description, _dbAddress _address )
	{
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbGeschaeftsstelle.newInstance");
			try
			{
				String nextGUID = new java.rmi.server.UID().toString();
				stmt.executeUpdate( "INSERT INTO Geschaeftsstelle ( contactPerson_id, company_id, telekom_id, description, address_id, id) VALUES ( '"+((_contactPerson==null)?"":_contactPerson.getId())+"',  '"+((_company==null)?"":_company.getId())+"',  '"+((_telekom==null)?"":_telekom.getId())+"',  '"+toSQL(_description)+"',  '"+((_address==null)?"":_address.getId())+"', '"+nextGUID+"')");
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
	}


	/**
	 * destroy a object in the database
	 */
	static public boolean destroyInstance( String  _key)
	{
		boolean result = false;
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbGeschaeftsstelle.destroyInstance");
			try
			{
					stmt.executeUpdate( "DELETE FROM Geschaeftsstelle WHERE id='"+_key+"'");
					result = true;
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}


	/**
	 * destroy ALL objects in the database
	 */
	static public boolean destroyAll()
	{
		boolean result = false;
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbGeschaeftsstelle.destroyAll");
			try
			{
					stmt.executeUpdate("DELETE from Geschaeftsstelle" );
					result = true;
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}


	/**
	 */
	public String toString()
	{
		StringBuffer result = new StringBuffer(1024);
		result.append(contactPerson_id);
		result.append("|");
		result.append(company_id);
		result.append("|");
		result.append(telekom_id);
		result.append("|");
		result.append(description);
		result.append("|");
		result.append(address_id);
		result.append("|");
		result.append(id);
		return result.toString();
	}


	/**
	 * init the class
	 */
	static
	{
		try
		{
			DatabaseMetaData dMeta = ConnectionManager.getValid().getMetaData ();
			ResultSet result;
			result=dMeta.getColumns(null,null,"Geschaeftsstelle","contactPerson_id");
			if(!result.next())
			{
				System.out.println("ERROR: installed DB-schema not compatible to java classes");
				System.out.println("       Attribute 'contactPerson_id' in table 'Geschaeftsstelle' missing");
			}
			result.close();
			result=dMeta.getColumns(null,null,"Geschaeftsstelle","company_id");
			if(!result.next())
			{
				System.out.println("ERROR: installed DB-schema not compatible to java classes");
				System.out.println("       Attribute 'company_id' in table 'Geschaeftsstelle' missing");
			}
			result.close();
			result=dMeta.getColumns(null,null,"Geschaeftsstelle","telekom_id");
			if(!result.next())
			{
				System.out.println("ERROR: installed DB-schema not compatible to java classes");
				System.out.println("       Attribute 'telekom_id' in table 'Geschaeftsstelle' missing");
			}
			result.close();
			result=dMeta.getColumns(null,null,"Geschaeftsstelle","description");
			if(!result.next())
			{
				System.out.println("ERROR: installed DB-schema not compatible to java classes");
				System.out.println("       Attribute 'description' in table 'Geschaeftsstelle' missing");
			}
			result.close();
			result=dMeta.getColumns(null,null,"Geschaeftsstelle","address_id");
			if(!result.next())
			{
				System.out.println("ERROR: installed DB-schema not compatible to java classes");
				System.out.println("       Attribute 'address_id' in table 'Geschaeftsstelle' missing");
			}
			result.close();
			result=dMeta.getColumns(null,null,"Geschaeftsstelle","id");
			if(!result.next())
			{
				System.out.println("ERROR: installed DB-schema not compatible to java classes");
				System.out.println("       Attribute 'id' in table 'Geschaeftsstelle' missing");
			}
			result.close();
		}
		catch (Exception ex)
		{
		}
	}


}
