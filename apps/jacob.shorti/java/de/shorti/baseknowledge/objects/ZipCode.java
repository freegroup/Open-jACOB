package de.shorti.baseknowledge.objects;

/**
 * short-i Class generated by automatic ClassGenerator
 * Date: Wed Mar 14 14:59:41 GMT+01:00 2001
 */
import de.shorti.db.*;
import de.shorti.baseknowledge.*;
import java.util.ArrayList;
import java.util.Iterator;
import java.sql.*;
import de.shorti.util.basic.*;

public class ZipCode extends _dbZipCode
{
    static TraceDispatcher  trace = TraceFactory.getTraceDispatcher();

    public double getDistance(double latitude, double longitude)
    {
        GISCoordinate c1 = new GISCoordinate(this.latitude,this.longitude , true, true, true);
        GISCoordinate c2 = new GISCoordinate(latitude,longitude , true, true, true);
        return c1.getDistance(c2);
    }

    public double getDistance(ZipCode zip2)
    {
        return GISCoordinate.getDistance( new GISCoordinate( latitude , longitude  ,true, true, true),
                                          new GISCoordinate( zip2.latitude,zip2.longitude , true, true, true));
    }

    public static double getDistance(ZipCode zip1, ZipCode zip2)
    {
        GISCoordinate c1 = new GISCoordinate(zip1.latitude,zip1.longitude , true, true, true);
        GISCoordinate c2 = new GISCoordinate(zip2.latitude,zip2.longitude , true, true, true);
        return c1.getDistance(c2);
    }

    public static ArrayList findZipCodesInRange(String zipString, ArrayList zipCodes, double rangeMeter)
    {
        ArrayList codes = findByCode(zipString);
        ZipCode zipRef = (ZipCode) codes.get(0);
        return zipRef.findZipCodesInRange(zipCodes, rangeMeter);
    }

    public ArrayList findZipCodesInRange(ArrayList zipCodes, double rangeMeter)
    {
        ArrayList result = new ArrayList();
        ZipCode zipTemp = null;
        ZipCode zipTemp2 = null;
        Iterator it = zipCodes.iterator();

        GISCoordinate c1 = new GISCoordinate(latitude,longitude );

        while(it.hasNext())
        {
            zipTemp = (ZipCode) it.next();
            GISCoordinate c2 = new GISCoordinate(zipTemp.latitude, zipTemp.longitude );
            if(c1.getDistance(c2) <= rangeMeter)
            {
                Iterator sortIt = result.iterator();
                int i = 0;
                while(sortIt.hasNext())
                {
                    zipTemp2 = (ZipCode) sortIt.next();
                    GISCoordinate c3 = new GISCoordinate(zipTemp2.latitude,zipTemp2.longitude);
                    if(c1.getDistance(c3) > c1.getDistance(c2))
                        break;
                    i++;
                }
                result.add(i,zipTemp);
            }
        }
        return result;
    }

    public static ArrayList findZipCodesInRange( double latitude, double longitude,double rangeMeter)
    {
        ArrayList zipCodes = ZipCode.getAll();
        ArrayList result = new ArrayList();
        ZipCode zipTemp = null;
        ZipCode zipTemp2 = null;
        Iterator it = zipCodes.iterator();

        GISCoordinate c1 = new GISCoordinate(latitude, longitude);

        while(it.hasNext())
        {
            zipTemp = (ZipCode) it.next();
            GISCoordinate c2 = new GISCoordinate(zipTemp.latitude,zipTemp.longitude );
            if(c1.getDistance(c2) <= rangeMeter)
            {
                Iterator sortIt = result.iterator();
                int i = 0;
                while(sortIt.hasNext())
                {
                    zipTemp2 = (ZipCode) sortIt.next();
                    GISCoordinate c3 = new GISCoordinate(zipTemp2.latitude, zipTemp2.longitude);
                    if(c1.getDistance(c3) > c1.getDistance(c2))
                        break;
                    i++;
                }
                result.add(i,zipTemp);
            }
        }
        return result;
    }

	/**
	 *  Method:      findByCodeAndCountry(String _code, Country _country)
	 *  Description:
	 *  Returns:     ZipCode
	 */
	public static ZipCode findByCodeAndCountry(String _code, Country _country)
	{
		SaveStatement  stmt=null;
		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbZipCode.findByCodeAndCountry");
            StringBuffer statement=new StringBuffer(1024);
            statement.append("SELECT  ZipCode.id ");
            statement.append("  FROM  ZipCode, City, State ");
            statement.append("  WHERE ZipCode.code='");
            statement.append( _code );
            statement.append("'     AND ZipCode.city_id=City.id ");
            statement.append("    AND City.state_id=State.id ");
            statement.append("    AND State.country_id='" + _country.getId() + "'");

            ResultSet s = stmt.executeQuery(statement.toString());
            if(s.next())
                return findById(s.getString(1));
		}
		catch (Exception ex)
		{
            trace.error(ex);
		}
        finally
        {
            stmt.close();
        }
		return null;
	}

    public static void main(String[] argc)
    {
        double bGrad     = Double.parseDouble( "49");
        double bMinute   = Double.parseDouble( "14");
        double bSekunde  = Double.parseDouble( "32.9");
        double lGrad     = Double.parseDouble( "8");
        double lMinute   = Double.parseDouble( "38");
        double lSekunde  = Double.parseDouble( "20.6");
        double latitude  = (bGrad+(bMinute/60)+(bSekunde/3600));
        double longitude = (lGrad+(lMinute/60)+(lSekunde/3600));

        ArrayList result = ZipCode.findZipCodesInRange(latitude, longitude,8000);
        Iterator  iter = result.iterator();
        while(iter.hasNext())
        {
            ZipCode zip = (ZipCode)iter.next();
            System.out.println(zip.getDistance(latitude, longitude)+" Meter nach "+zip.getCode()+" "+ zip.getCity().getName());
        }

        System.out.println( GISCoordinate.getDistance(
                                                new GISCoordinate(latitude, longitude),
                                                new GISCoordinate(49.2695 , 8.6044444))/1000
                                                );
    }
}
