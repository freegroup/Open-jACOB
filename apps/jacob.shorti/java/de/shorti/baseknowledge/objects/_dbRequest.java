package de.shorti.baseknowledge.objects;

/**
 * Class generated by automatic ClassGenerator
 * Date: Sat May 11 21:15:24 GMT+02:00 2002
 */
import de.shorti.db.*;
import java.util.ArrayList;
import java.util.Iterator;
import java.sql.*;

class _dbRequest extends dbObject 
{

	String    contextRegistry_id;	// Foreign Key pointing to Table [ContextRegistry], Field [id]
	long      startDate;
	String    question;
	long      finishDate;
	int       status;
	String    bannerAdvertisement_id;	// Foreign Key pointing to Table [BannerAdvertisement], Field [id]
	String    channel_id;	// Foreign Key pointing to Table [CommunicationChannel], Field [id]
	String    answer;
	String    sourceZipCode_id;	// Foreign Key pointing to Table [ZipCode], Field [id]


	/**
	 * destroy a object in the database
	 */
	public boolean destroy()
	{
		boolean result = false;
		String    _key   = id;
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbRequest.destroyInstance");
			try
			{
					stmt.executeUpdate( "DELETE FROM Request WHERE id='"+_key+"'");
					result = true;
					removeFromCache(this);
					id     = null;
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}



	/**
	 * Method:      getId()
	 * Description: 
	 * Returns:     String
	 */
	public String getId()
	{
		return id;
	}

	/**
	 * Method:      getStartDate()
	 * Description: 
	 * Returns:     long
	 */
	public long getStartDate()
	{
		return startDate;
	}

	/**
	 * Method:      setStartDate(long _startDate, boolean _autoCommit)
	 * Description: 
	 * Returns:     void
	 */
	public void setStartDate(long _startDate, boolean _autoCommit)
	{
		startDate=_startDate;
		if(_autoCommit)
		{
			commit();
		}
	}

	/**
	 * Method:      getQuestion()
	 * Description: 
	 * Returns:     String
	 */
	public String getQuestion()
	{
		return question;
	}

	/**
	 * Method:      setQuestion(String _question, boolean _autoCommit)
	 * Description: 
	 * Returns:     void
	 */
	public void setQuestion(String _question, boolean _autoCommit)
	{
		question=_question;
		if(_autoCommit)
		{
			commit();
		}
	}

	/**
	 * Method:      getFinishDate()
	 * Description: 
	 * Returns:     long
	 */
	public long getFinishDate()
	{
		return finishDate;
	}

	/**
	 * Method:      setFinishDate(long _finishDate, boolean _autoCommit)
	 * Description: 
	 * Returns:     void
	 */
	public void setFinishDate(long _finishDate, boolean _autoCommit)
	{
		finishDate=_finishDate;
		if(_autoCommit)
		{
			commit();
		}
	}

	/**
	 * Method:      getStatus()
	 * Description: 
	 * Returns:     int
	 */
	public int getStatus()
	{
		return status;
	}

	/**
	 * Method:      setStatus(int _status, boolean _autoCommit)
	 * Description: 
	 * Returns:     void
	 */
	public void setStatus(int _status, boolean _autoCommit)
	{
		status=_status;
		if(_autoCommit)
		{
			commit();
		}
	}

	/**
	 * Method:      getAnswer()
	 * Description: 
	 * Returns:     String
	 */
	public String getAnswer()
	{
		return answer;
	}

	/**
	 * Method:      setAnswer(String _answer, boolean _autoCommit)
	 * Description: 
	 * Returns:     void
	 */
	public void setAnswer(String _answer, boolean _autoCommit)
	{
		answer=_answer;
		if(_autoCommit)
		{
			commit();
		}
	}

	/**
	 * Method:      getContextRegistry()
	 * Description: 
	 * Returns:     ContextRegistry
	 */
	public ContextRegistry getContextRegistry()
	{
		return ContextRegistry.findById(contextRegistry_id);
	}

	/**
	 * Method:      setContextRegistry()
	 * Description: 
	 * Returns:     void
	 */
	public void setContextRegistry(ContextRegistry _foreigner, boolean _autocommit)
	{
		contextRegistry_id= _foreigner.getId();
		if (_autocommit == true)
			commit();
	}

	/**
	 * Method:      getBannerAdvertisement()
	 * Description: 
	 * Returns:     BannerAdvertisement
	 */
	public BannerAdvertisement getBannerAdvertisement()
	{
		return BannerAdvertisement.findById(bannerAdvertisement_id);
	}

	/**
	 * Method:      setBannerAdvertisement()
	 * Description: 
	 * Returns:     void
	 */
	public void setBannerAdvertisement(BannerAdvertisement _foreigner, boolean _autocommit)
	{
		bannerAdvertisement_id= _foreigner.getId();
		if (_autocommit == true)
			commit();
	}

	/**
	 * Method:      getChannel()
	 * Description: 
	 * Returns:     CommunicationChannel
	 */
	public CommunicationChannel getChannel()
	{
		return CommunicationChannel.findById(channel_id);
	}

	/**
	 * Method:      setChannel()
	 * Description: 
	 * Returns:     void
	 */
	public void setChannel(CommunicationChannel _foreigner, boolean _autocommit)
	{
		channel_id= _foreigner.getId();
		if (_autocommit == true)
			commit();
	}

	/**
	 * Method:      getSourceZipCode()
	 * Description: 
	 * Returns:     ZipCode
	 */
	public ZipCode getSourceZipCode()
	{
		return ZipCode.findById(sourceZipCode_id);
	}

	/**
	 * Method:      setSourceZipCode()
	 * Description: 
	 * Returns:     void
	 */
	public void setSourceZipCode(ZipCode _foreigner, boolean _autocommit)
	{
		sourceZipCode_id= _foreigner.getId();
		if (_autocommit == true)
			commit();
	}

	/**
	 *  Method:      getBillingInformations()
	 *  Description:                              
	 *  Returns:     ArrayList<BillingInformation>
	 */
	public ArrayList getBillingInformations()
	{
		return _dbBillingInformation.findByRequest(this);
	}


	/**
	 *  Method:      getContextPerformances()
	 *  Description:                              
	 *  Returns:     ArrayList<ContextPerformance>
	 */
	public ArrayList getContextPerformances()
	{
		return _dbContextPerformance.findByRequest(this);
	}


	/**
	 *  Method:      getRequestLogs()
	 *  Description:                              
	 *  Returns:     ArrayList<RequestLog>
	 */
	public ArrayList getRequestLogs()
	{
		return _dbRequestLog.findByRequest(this);
	}


	/**
	 *  Method:      findByContextRegistry(_dbContextRegistry _contextRegistry)
	 *  Description: 
	 *  Returns:     ArrayList<Request>
	 */
	public static ArrayList findByContextRegistry(_dbContextRegistry _contextRegistry)
	{
		ArrayList result = new ArrayList();
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbRequest.findByContextRegistry");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT id, contextRegistry_id, startDate, question, finishDate, status, bannerAdvertisement_id, channel_id, answer, sourceZipCode_id FROM Request WHERE contextRegistry_id='"+toSQL(((_contextRegistry==null)?"":_contextRegistry.getId()))+"'"+" order by generatedId desc");
				while(s.next())
				{
					String _tmpID = s.getString(1);
					Request newObject = (Request)getFromCache(_tmpID);
					if(newObject ==null)
					{
						newObject = new Request();
						newObject.contextRegistry_id=s.getString(2);
						newObject.id=_tmpID;
						newObject.startDate=s.getLong(3);
						newObject.question=s.getString(4);
						newObject.finishDate=s.getLong(5);
						newObject.status=s.getInt(6);
						newObject.bannerAdvertisement_id=s.getString(7);
						newObject.channel_id=s.getString(8);
						newObject.answer=s.getString(9);
						newObject.sourceZipCode_id=s.getString(10);
						putToCache(newObject);
					}
					result.add(newObject);
				}
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}

	/**
	 *  Method:      findById(String _id)
	 *  Description: 
	 *  Returns:     Request
	 */
	public static Request findById(String _id)
	{
		Request result = (Request)getFromCache(_id);
		if(result!=null) return result;
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbRequest.findById");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT id, contextRegistry_id, startDate, question, finishDate, status, bannerAdvertisement_id, channel_id, answer, sourceZipCode_id FROM Request WHERE id='"+toSQL(_id)+"'"+" order by generatedId desc");
				if(s.next())
				{
					result = new Request();
					result.contextRegistry_id= s.getString(2);
					result.id= _id;
					result.startDate= s.getLong(3);
					result.question= s.getString(4);
					result.finishDate= s.getLong(5);
					result.status= s.getInt(6);
					result.bannerAdvertisement_id= s.getString(7);
					result.channel_id= s.getString(8);
					result.answer= s.getString(9);
					result.sourceZipCode_id= s.getString(10);
					putToCache(result);
				}
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}

	/**
	 *  Method:      findByStartDate(long _startDate)
	 *  Description: 
	 *  Returns:     ArrayList<Request>
	 */
	public static ArrayList findByStartDate(long _startDate)
	{
		ArrayList result = new ArrayList();
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbRequest.findByStartDate");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT id, contextRegistry_id, startDate, question, finishDate, status, bannerAdvertisement_id, channel_id, answer, sourceZipCode_id FROM Request WHERE startDate="+_startDate+" order by generatedId desc");
				while(s.next())
				{
					String _tmpID = s.getString(1);
					Request newObject = (Request)getFromCache(_tmpID);
					if(newObject ==null)
					{
						newObject = new Request();
						newObject.contextRegistry_id=s.getString(2);
						newObject.id=_tmpID;
						newObject.startDate=s.getLong(3);
						newObject.question=s.getString(4);
						newObject.finishDate=s.getLong(5);
						newObject.status=s.getInt(6);
						newObject.bannerAdvertisement_id=s.getString(7);
						newObject.channel_id=s.getString(8);
						newObject.answer=s.getString(9);
						newObject.sourceZipCode_id=s.getString(10);
						putToCache(newObject);
					}
					result.add(newObject);
				}
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}

	/**
	 *  Method:      findByQuestion(String _question)
	 *  Description: 
	 *  Returns:     ArrayList<Request>
	 */
	public static ArrayList findByQuestion(String _question)
	{
		ArrayList result = new ArrayList();
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbRequest.findByQuestion");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT id, contextRegistry_id, startDate, question, finishDate, status, bannerAdvertisement_id, channel_id, answer, sourceZipCode_id FROM Request WHERE question='"+toSQL(_question)+"'"+" order by generatedId desc");
				while(s.next())
				{
					String _tmpID = s.getString(1);
					Request newObject = (Request)getFromCache(_tmpID);
					if(newObject ==null)
					{
						newObject = new Request();
						newObject.contextRegistry_id=s.getString(2);
						newObject.id=_tmpID;
						newObject.startDate=s.getLong(3);
						newObject.question=s.getString(4);
						newObject.finishDate=s.getLong(5);
						newObject.status=s.getInt(6);
						newObject.bannerAdvertisement_id=s.getString(7);
						newObject.channel_id=s.getString(8);
						newObject.answer=s.getString(9);
						newObject.sourceZipCode_id=s.getString(10);
						putToCache(newObject);
					}
					result.add(newObject);
				}
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}

	/**
	 *  Method:      findByFinishDate(long _finishDate)
	 *  Description: 
	 *  Returns:     ArrayList<Request>
	 */
	public static ArrayList findByFinishDate(long _finishDate)
	{
		ArrayList result = new ArrayList();
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbRequest.findByFinishDate");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT id, contextRegistry_id, startDate, question, finishDate, status, bannerAdvertisement_id, channel_id, answer, sourceZipCode_id FROM Request WHERE finishDate="+_finishDate+" order by generatedId desc");
				while(s.next())
				{
					String _tmpID = s.getString(1);
					Request newObject = (Request)getFromCache(_tmpID);
					if(newObject ==null)
					{
						newObject = new Request();
						newObject.contextRegistry_id=s.getString(2);
						newObject.id=_tmpID;
						newObject.startDate=s.getLong(3);
						newObject.question=s.getString(4);
						newObject.finishDate=s.getLong(5);
						newObject.status=s.getInt(6);
						newObject.bannerAdvertisement_id=s.getString(7);
						newObject.channel_id=s.getString(8);
						newObject.answer=s.getString(9);
						newObject.sourceZipCode_id=s.getString(10);
						putToCache(newObject);
					}
					result.add(newObject);
				}
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}

	/**
	 *  Method:      findByStatus(int _status)
	 *  Description: 
	 *  Returns:     ArrayList<Request>
	 */
	public static ArrayList findByStatus(int _status)
	{
		ArrayList result = new ArrayList();
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbRequest.findByStatus");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT id, contextRegistry_id, startDate, question, finishDate, status, bannerAdvertisement_id, channel_id, answer, sourceZipCode_id FROM Request WHERE status="+_status+" order by generatedId desc");
				while(s.next())
				{
					String _tmpID = s.getString(1);
					Request newObject = (Request)getFromCache(_tmpID);
					if(newObject ==null)
					{
						newObject = new Request();
						newObject.contextRegistry_id=s.getString(2);
						newObject.id=_tmpID;
						newObject.startDate=s.getLong(3);
						newObject.question=s.getString(4);
						newObject.finishDate=s.getLong(5);
						newObject.status=s.getInt(6);
						newObject.bannerAdvertisement_id=s.getString(7);
						newObject.channel_id=s.getString(8);
						newObject.answer=s.getString(9);
						newObject.sourceZipCode_id=s.getString(10);
						putToCache(newObject);
					}
					result.add(newObject);
				}
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}

	/**
	 *  Method:      findByBannerAdvertisement(_dbBannerAdvertisement _bannerAdvertisement)
	 *  Description: 
	 *  Returns:     ArrayList<Request>
	 */
	public static ArrayList findByBannerAdvertisement(_dbBannerAdvertisement _bannerAdvertisement)
	{
		ArrayList result = new ArrayList();
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbRequest.findByBannerAdvertisement");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT id, contextRegistry_id, startDate, question, finishDate, status, bannerAdvertisement_id, channel_id, answer, sourceZipCode_id FROM Request WHERE bannerAdvertisement_id='"+toSQL(((_bannerAdvertisement==null)?"":_bannerAdvertisement.getId()))+"'"+" order by generatedId desc");
				while(s.next())
				{
					String _tmpID = s.getString(1);
					Request newObject = (Request)getFromCache(_tmpID);
					if(newObject ==null)
					{
						newObject = new Request();
						newObject.contextRegistry_id=s.getString(2);
						newObject.id=_tmpID;
						newObject.startDate=s.getLong(3);
						newObject.question=s.getString(4);
						newObject.finishDate=s.getLong(5);
						newObject.status=s.getInt(6);
						newObject.bannerAdvertisement_id=s.getString(7);
						newObject.channel_id=s.getString(8);
						newObject.answer=s.getString(9);
						newObject.sourceZipCode_id=s.getString(10);
						putToCache(newObject);
					}
					result.add(newObject);
				}
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}

	/**
	 *  Method:      findByChannel(_dbCommunicationChannel _channel)
	 *  Description: 
	 *  Returns:     ArrayList<Request>
	 */
	public static ArrayList findByChannel(_dbCommunicationChannel _channel)
	{
		ArrayList result = new ArrayList();
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbRequest.findByChannel");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT id, contextRegistry_id, startDate, question, finishDate, status, bannerAdvertisement_id, channel_id, answer, sourceZipCode_id FROM Request WHERE channel_id='"+toSQL(((_channel==null)?"":_channel.getId()))+"'"+" order by generatedId desc");
				while(s.next())
				{
					String _tmpID = s.getString(1);
					Request newObject = (Request)getFromCache(_tmpID);
					if(newObject ==null)
					{
						newObject = new Request();
						newObject.contextRegistry_id=s.getString(2);
						newObject.id=_tmpID;
						newObject.startDate=s.getLong(3);
						newObject.question=s.getString(4);
						newObject.finishDate=s.getLong(5);
						newObject.status=s.getInt(6);
						newObject.bannerAdvertisement_id=s.getString(7);
						newObject.channel_id=s.getString(8);
						newObject.answer=s.getString(9);
						newObject.sourceZipCode_id=s.getString(10);
						putToCache(newObject);
					}
					result.add(newObject);
				}
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}

	/**
	 *  Method:      findByAnswer(String _answer)
	 *  Description: 
	 *  Returns:     ArrayList<Request>
	 */
	public static ArrayList findByAnswer(String _answer)
	{
		ArrayList result = new ArrayList();
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbRequest.findByAnswer");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT id, contextRegistry_id, startDate, question, finishDate, status, bannerAdvertisement_id, channel_id, answer, sourceZipCode_id FROM Request WHERE answer='"+toSQL(_answer)+"'"+" order by generatedId desc");
				while(s.next())
				{
					String _tmpID = s.getString(1);
					Request newObject = (Request)getFromCache(_tmpID);
					if(newObject ==null)
					{
						newObject = new Request();
						newObject.contextRegistry_id=s.getString(2);
						newObject.id=_tmpID;
						newObject.startDate=s.getLong(3);
						newObject.question=s.getString(4);
						newObject.finishDate=s.getLong(5);
						newObject.status=s.getInt(6);
						newObject.bannerAdvertisement_id=s.getString(7);
						newObject.channel_id=s.getString(8);
						newObject.answer=s.getString(9);
						newObject.sourceZipCode_id=s.getString(10);
						putToCache(newObject);
					}
					result.add(newObject);
				}
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}

	/**
	 *  Method:      findBySourceZipCode(_dbZipCode _sourceZipCode)
	 *  Description: 
	 *  Returns:     ArrayList<Request>
	 */
	public static ArrayList findBySourceZipCode(_dbZipCode _sourceZipCode)
	{
		ArrayList result = new ArrayList();
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbRequest.findBySourceZipCode");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT id, contextRegistry_id, startDate, question, finishDate, status, bannerAdvertisement_id, channel_id, answer, sourceZipCode_id FROM Request WHERE sourceZipCode_id='"+toSQL(((_sourceZipCode==null)?"":_sourceZipCode.getId()))+"'"+" order by generatedId desc");
				while(s.next())
				{
					String _tmpID = s.getString(1);
					Request newObject = (Request)getFromCache(_tmpID);
					if(newObject ==null)
					{
						newObject = new Request();
						newObject.contextRegistry_id=s.getString(2);
						newObject.id=_tmpID;
						newObject.startDate=s.getLong(3);
						newObject.question=s.getString(4);
						newObject.finishDate=s.getLong(5);
						newObject.status=s.getInt(6);
						newObject.bannerAdvertisement_id=s.getString(7);
						newObject.channel_id=s.getString(8);
						newObject.answer=s.getString(9);
						newObject.sourceZipCode_id=s.getString(10);
						putToCache(newObject);
					}
					result.add(newObject);
				}
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}

	/**
	 * returns boolean
	 */
	public boolean commit()
	{
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbRequest.commit");
			try
			{
				stmt.executeUpdate( "UPDATE Request set contextRegistry_id= '"+toSQL(contextRegistry_id)+"', startDate= "+startDate+", question= '"+toSQL(question)+"', finishDate= "+finishDate+", status= "+status+", bannerAdvertisement_id= '"+toSQL(bannerAdvertisement_id)+"', channel_id= '"+toSQL(channel_id)+"', answer= '"+toSQL(answer)+"', sourceZipCode_id= '"+toSQL(sourceZipCode_id)+"' WHERE id='"+id+"'");
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return true;
	}


	/**
	 * returns ArrayList<Request>
	 */
	public static ArrayList getAll()
	{
		ArrayList result = new ArrayList();
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbRequest.getAll");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT id, contextRegistry_id, startDate, question, finishDate, status, bannerAdvertisement_id, channel_id, answer, sourceZipCode_id FROM Request order by generatedId desc");
				while(s.next())
				{
					String _tmpID = s.getString(1);
					Request newObject = (Request)getFromCache(_tmpID);
					if(newObject ==null)
					{
						newObject = new Request();
						newObject.contextRegistry_id=s.getString(2);
						newObject.id=_tmpID;
						newObject.startDate=s.getLong(3);
						newObject.question=s.getString(4);
						newObject.finishDate=s.getLong(5);
						newObject.status=s.getInt(6);
						newObject.bannerAdvertisement_id=s.getString(7);
						newObject.channel_id=s.getString(8);
						newObject.answer=s.getString(9);
						newObject.sourceZipCode_id=s.getString(10);
						putToCache(newObject);
					}
					result.add(newObject);
				}
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}


	/**
	 * create a new object in the database
	 */
	static public Request createInstance( _dbContextRegistry _contextRegistry, long  _startDate, String  _question, long  _finishDate, int  _status, _dbBannerAdvertisement _bannerAdvertisement, _dbCommunicationChannel _channel, String  _answer, _dbZipCode _sourceZipCode )
	{
		Request result = null;
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbRequest.createInstance");
			try
			{
				String nextGUID = new java.rmi.server.UID().toString();
				stmt.executeUpdate( "INSERT INTO Request ( contextRegistry_id, id, startDate, question, finishDate, status, bannerAdvertisement_id, channel_id, answer, sourceZipCode_id) VALUES ( '"+((_contextRegistry==null)?"":_contextRegistry.getId())+"', '"+nextGUID+"', "+_startDate+",  '"+toSQL(_question)+"', "+_finishDate+", "+_status+",  '"+((_bannerAdvertisement==null)?"":_bannerAdvertisement.getId())+"',  '"+((_channel==null)?"":_channel.getId())+"',  '"+toSQL(_answer)+"',  '"+((_sourceZipCode==null)?"":_sourceZipCode.getId())+"')");
				result = new Request();
				result.contextRegistry_id= (_contextRegistry==null)?"":_contextRegistry.getId();
				result.id= nextGUID;
				result.startDate= _startDate;
				result.question= _question;
				result.finishDate= _finishDate;
				result.status= _status;
				result.bannerAdvertisement_id= (_bannerAdvertisement==null)?"":_bannerAdvertisement.getId();
				result.channel_id= (_channel==null)?"":_channel.getId();
				result.answer= _answer;
				result.sourceZipCode_id= (_sourceZipCode==null)?"":_sourceZipCode.getId();
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}


	/**
	 * create a new object in the database
	 */
	static public void newInstance( _dbContextRegistry _contextRegistry, long  _startDate, String  _question, long  _finishDate, int  _status, _dbBannerAdvertisement _bannerAdvertisement, _dbCommunicationChannel _channel, String  _answer, _dbZipCode _sourceZipCode )
	{
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbRequest.newInstance");
			try
			{
				String nextGUID = new java.rmi.server.UID().toString();
				stmt.executeUpdate( "INSERT INTO Request ( contextRegistry_id, id, startDate, question, finishDate, status, bannerAdvertisement_id, channel_id, answer, sourceZipCode_id) VALUES ( '"+((_contextRegistry==null)?"":_contextRegistry.getId())+"', '"+nextGUID+"', "+_startDate+",  '"+toSQL(_question)+"', "+_finishDate+", "+_status+",  '"+((_bannerAdvertisement==null)?"":_bannerAdvertisement.getId())+"',  '"+((_channel==null)?"":_channel.getId())+"',  '"+toSQL(_answer)+"',  '"+((_sourceZipCode==null)?"":_sourceZipCode.getId())+"')");
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
	}


	/**
	 * destroy a object in the database
	 */
	static public boolean destroyInstance( String  _key)
	{
		boolean result = false;
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbRequest.destroyInstance");
			try
			{
					stmt.executeUpdate( "DELETE FROM Request WHERE id='"+_key+"'");
					result = true;
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}


	/**
	 * destroy ALL objects in the database
	 */
	static public boolean destroyAll()
	{
		boolean result = false;
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbRequest.destroyAll");
			try
			{
					stmt.executeUpdate("DELETE from Request" );
					result = true;
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}


	/**
	 */
	public String toString()
	{
		StringBuffer result = new StringBuffer(1024);
		result.append(contextRegistry_id);
		result.append("|");
		result.append(id);
		result.append("|");
		result.append(startDate);
		result.append("|");
		result.append(question);
		result.append("|");
		result.append(finishDate);
		result.append("|");
		result.append(status);
		result.append("|");
		result.append(bannerAdvertisement_id);
		result.append("|");
		result.append(channel_id);
		result.append("|");
		result.append(answer);
		result.append("|");
		result.append(sourceZipCode_id);
		return result.toString();
	}


	/**
	 * init the class
	 */
	static
	{
		try
		{
			DatabaseMetaData dMeta = ConnectionManager.getValid().getMetaData ();
			ResultSet result;
			result=dMeta.getColumns(null,null,"Request","contextRegistry_id");
			if(!result.next())
			{
				System.out.println("ERROR: installed DB-schema not compatible to java classes");
				System.out.println("       Attribute 'contextRegistry_id' in table 'Request' missing");
			}
			result.close();
			result=dMeta.getColumns(null,null,"Request","id");
			if(!result.next())
			{
				System.out.println("ERROR: installed DB-schema not compatible to java classes");
				System.out.println("       Attribute 'id' in table 'Request' missing");
			}
			result.close();
			result=dMeta.getColumns(null,null,"Request","startDate");
			if(!result.next())
			{
				System.out.println("ERROR: installed DB-schema not compatible to java classes");
				System.out.println("       Attribute 'startDate' in table 'Request' missing");
			}
			result.close();
			result=dMeta.getColumns(null,null,"Request","question");
			if(!result.next())
			{
				System.out.println("ERROR: installed DB-schema not compatible to java classes");
				System.out.println("       Attribute 'question' in table 'Request' missing");
			}
			result.close();
			result=dMeta.getColumns(null,null,"Request","finishDate");
			if(!result.next())
			{
				System.out.println("ERROR: installed DB-schema not compatible to java classes");
				System.out.println("       Attribute 'finishDate' in table 'Request' missing");
			}
			result.close();
			result=dMeta.getColumns(null,null,"Request","status");
			if(!result.next())
			{
				System.out.println("ERROR: installed DB-schema not compatible to java classes");
				System.out.println("       Attribute 'status' in table 'Request' missing");
			}
			result.close();
			result=dMeta.getColumns(null,null,"Request","bannerAdvertisement_id");
			if(!result.next())
			{
				System.out.println("ERROR: installed DB-schema not compatible to java classes");
				System.out.println("       Attribute 'bannerAdvertisement_id' in table 'Request' missing");
			}
			result.close();
			result=dMeta.getColumns(null,null,"Request","channel_id");
			if(!result.next())
			{
				System.out.println("ERROR: installed DB-schema not compatible to java classes");
				System.out.println("       Attribute 'channel_id' in table 'Request' missing");
			}
			result.close();
			result=dMeta.getColumns(null,null,"Request","answer");
			if(!result.next())
			{
				System.out.println("ERROR: installed DB-schema not compatible to java classes");
				System.out.println("       Attribute 'answer' in table 'Request' missing");
			}
			result.close();
			result=dMeta.getColumns(null,null,"Request","sourceZipCode_id");
			if(!result.next())
			{
				System.out.println("ERROR: installed DB-schema not compatible to java classes");
				System.out.println("       Attribute 'sourceZipCode_id' in table 'Request' missing");
			}
			result.close();
		}
		catch (Exception ex)
		{
		}
	}


}
