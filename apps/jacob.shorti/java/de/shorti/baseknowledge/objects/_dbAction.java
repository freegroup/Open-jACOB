package de.shorti.baseknowledge.objects;

/**
 * Class generated by automatic ClassGenerator
 * Date: Sat May 11 21:15:22 GMT+02:00 2002
 */
import de.shorti.db.*;
import java.util.ArrayList;
import java.util.Iterator;
import java.sql.*;

class _dbAction extends dbObject 
{

	String    displayName;
	int       lockStatus;
	String    question;
	int       estimatedPrice;
	int       userAmount;
	String    description;


	/**
	 * destroy a object in the database
	 */
	public boolean destroy()
	{
		boolean result = false;
		String    _key   = id;
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbAction.destroyInstance");
			try
			{
					stmt.executeUpdate( "DELETE FROM Action WHERE id='"+_key+"'");
					result = true;
					removeFromCache(this);
					id     = null;
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}



	/**
	 * Method:      getDisplayName()
	 * Description: 
	 * Returns:     String
	 */
	public String getDisplayName()
	{
		return displayName;
	}

	/**
	 * Method:      setDisplayName(String _displayName, boolean _autoCommit)
	 * Description: 
	 * Returns:     void
	 */
	public void setDisplayName(String _displayName, boolean _autoCommit)
	{
		displayName=_displayName;
		if(_autoCommit)
		{
			commit();
		}
	}

	/**
	 * Method:      getLockStatus()
	 * Description: 
	 * Returns:     int
	 */
	public int getLockStatus()
	{
		return lockStatus;
	}

	/**
	 * Method:      setLockStatus(int _lockStatus, boolean _autoCommit)
	 * Description: 
	 * Returns:     void
	 */
	public void setLockStatus(int _lockStatus, boolean _autoCommit)
	{
		lockStatus=_lockStatus;
		if(_autoCommit)
		{
			commit();
		}
	}

	/**
	 * Method:      getQuestion()
	 * Description: 
	 * Returns:     String
	 */
	public String getQuestion()
	{
		return question;
	}

	/**
	 * Method:      setQuestion(String _question, boolean _autoCommit)
	 * Description: 
	 * Returns:     void
	 */
	public void setQuestion(String _question, boolean _autoCommit)
	{
		question=_question;
		if(_autoCommit)
		{
			commit();
		}
	}

	/**
	 * Method:      getEstimatedPrice()
	 * Description: 
	 * Returns:     int
	 */
	public int getEstimatedPrice()
	{
		return estimatedPrice;
	}

	/**
	 * Method:      setEstimatedPrice(int _estimatedPrice, boolean _autoCommit)
	 * Description: 
	 * Returns:     void
	 */
	public void setEstimatedPrice(int _estimatedPrice, boolean _autoCommit)
	{
		estimatedPrice=_estimatedPrice;
		if(_autoCommit)
		{
			commit();
		}
	}

	/**
	 * Method:      getUserAmount()
	 * Description: 
	 * Returns:     int
	 */
	public int getUserAmount()
	{
		return userAmount;
	}

	/**
	 * Method:      setUserAmount(int _userAmount, boolean _autoCommit)
	 * Description: 
	 * Returns:     void
	 */
	public void setUserAmount(int _userAmount, boolean _autoCommit)
	{
		userAmount=_userAmount;
		if(_autoCommit)
		{
			commit();
		}
	}

	/**
	 * Method:      getDescription()
	 * Description: 
	 * Returns:     String
	 */
	public String getDescription()
	{
		return description;
	}

	/**
	 * Method:      setDescription(String _description, boolean _autoCommit)
	 * Description: 
	 * Returns:     void
	 */
	public void setDescription(String _description, boolean _autoCommit)
	{
		description=_description;
		if(_autoCommit)
		{
			commit();
		}
	}

	/**
	 * Method:      getId()
	 * Description: 
	 * Returns:     String
	 */
	public String getId()
	{
		return id;
	}

	/**
	 *  Method:      getSubscribedActions()
	 *  Description:                              
	 *  Returns:     ArrayList<SubscribedAction>
	 */
	public ArrayList getSubscribedActions()
	{
		return _dbSubscribedAction.findByAction(this);
	}


	/**
	 *  Method:      findByDisplayName(String _displayName)
	 *  Description: 
	 *  Returns:     Action
	 */
	public static Action findByDisplayName(String _displayName)
	{
		Action result = null;
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbAction.findByDisplayName");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT id, displayName, lockStatus, question, estimatedPrice, userAmount, description FROM Action WHERE displayName='"+toSQL(_displayName)+"'"+" order by generatedId desc");
				if(s.next())
				{
					String _tmpID = s.getString(1);
					result = (Action)getFromCache(_tmpID);
					if(result ==null)
					{
						result = new Action();
						result.displayName= s.getString(2);
						result.lockStatus= s.getInt(3);
						result.question= s.getString(4);
						result.estimatedPrice= s.getInt(5);
						result.userAmount= s.getInt(6);
						result.description= s.getString(7);
						result.id= _tmpID;
						putToCache(result);
					}
				}
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}

	/**
	 *  Method:      findByLockStatus(int _lockStatus)
	 *  Description: 
	 *  Returns:     ArrayList<Action>
	 */
	public static ArrayList findByLockStatus(int _lockStatus)
	{
		ArrayList result = new ArrayList();
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbAction.findByLockStatus");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT id, displayName, lockStatus, question, estimatedPrice, userAmount, description FROM Action WHERE lockStatus="+_lockStatus+" order by generatedId desc");
				while(s.next())
				{
					String _tmpID = s.getString(1);
					Action newObject = (Action)getFromCache(_tmpID);
					if(newObject ==null)
					{
						newObject = new Action();
						newObject.displayName=s.getString(2);
						newObject.lockStatus=s.getInt(3);
						newObject.question=s.getString(4);
						newObject.estimatedPrice=s.getInt(5);
						newObject.userAmount=s.getInt(6);
						newObject.description=s.getString(7);
						newObject.id=_tmpID;
						putToCache(newObject);
					}
					result.add(newObject);
				}
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}

	/**
	 *  Method:      findByQuestion(String _question)
	 *  Description: 
	 *  Returns:     Action
	 */
	public static Action findByQuestion(String _question)
	{
		Action result = null;
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbAction.findByQuestion");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT id, displayName, lockStatus, question, estimatedPrice, userAmount, description FROM Action WHERE question='"+toSQL(_question)+"'"+" order by generatedId desc");
				if(s.next())
				{
					String _tmpID = s.getString(1);
					result = (Action)getFromCache(_tmpID);
					if(result ==null)
					{
						result = new Action();
						result.displayName= s.getString(2);
						result.lockStatus= s.getInt(3);
						result.question= s.getString(4);
						result.estimatedPrice= s.getInt(5);
						result.userAmount= s.getInt(6);
						result.description= s.getString(7);
						result.id= _tmpID;
						putToCache(result);
					}
				}
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}

	/**
	 *  Method:      findByEstimatedPrice(int _estimatedPrice)
	 *  Description: 
	 *  Returns:     ArrayList<Action>
	 */
	public static ArrayList findByEstimatedPrice(int _estimatedPrice)
	{
		ArrayList result = new ArrayList();
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbAction.findByEstimatedPrice");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT id, displayName, lockStatus, question, estimatedPrice, userAmount, description FROM Action WHERE estimatedPrice="+_estimatedPrice+" order by generatedId desc");
				while(s.next())
				{
					String _tmpID = s.getString(1);
					Action newObject = (Action)getFromCache(_tmpID);
					if(newObject ==null)
					{
						newObject = new Action();
						newObject.displayName=s.getString(2);
						newObject.lockStatus=s.getInt(3);
						newObject.question=s.getString(4);
						newObject.estimatedPrice=s.getInt(5);
						newObject.userAmount=s.getInt(6);
						newObject.description=s.getString(7);
						newObject.id=_tmpID;
						putToCache(newObject);
					}
					result.add(newObject);
				}
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}

	/**
	 *  Method:      findByUserAmount(int _userAmount)
	 *  Description: 
	 *  Returns:     ArrayList<Action>
	 */
	public static ArrayList findByUserAmount(int _userAmount)
	{
		ArrayList result = new ArrayList();
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbAction.findByUserAmount");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT id, displayName, lockStatus, question, estimatedPrice, userAmount, description FROM Action WHERE userAmount="+_userAmount+" order by generatedId desc");
				while(s.next())
				{
					String _tmpID = s.getString(1);
					Action newObject = (Action)getFromCache(_tmpID);
					if(newObject ==null)
					{
						newObject = new Action();
						newObject.displayName=s.getString(2);
						newObject.lockStatus=s.getInt(3);
						newObject.question=s.getString(4);
						newObject.estimatedPrice=s.getInt(5);
						newObject.userAmount=s.getInt(6);
						newObject.description=s.getString(7);
						newObject.id=_tmpID;
						putToCache(newObject);
					}
					result.add(newObject);
				}
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}

	/**
	 *  Method:      findByDescription(String _description)
	 *  Description: 
	 *  Returns:     ArrayList<Action>
	 */
	public static ArrayList findByDescription(String _description)
	{
		ArrayList result = new ArrayList();
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbAction.findByDescription");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT id, displayName, lockStatus, question, estimatedPrice, userAmount, description FROM Action WHERE description='"+toSQL(_description)+"'"+" order by generatedId desc");
				while(s.next())
				{
					String _tmpID = s.getString(1);
					Action newObject = (Action)getFromCache(_tmpID);
					if(newObject ==null)
					{
						newObject = new Action();
						newObject.displayName=s.getString(2);
						newObject.lockStatus=s.getInt(3);
						newObject.question=s.getString(4);
						newObject.estimatedPrice=s.getInt(5);
						newObject.userAmount=s.getInt(6);
						newObject.description=s.getString(7);
						newObject.id=_tmpID;
						putToCache(newObject);
					}
					result.add(newObject);
				}
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}

	/**
	 *  Method:      findById(String _id)
	 *  Description: 
	 *  Returns:     Action
	 */
	public static Action findById(String _id)
	{
		Action result = (Action)getFromCache(_id);
		if(result!=null) return result;
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbAction.findById");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT id, displayName, lockStatus, question, estimatedPrice, userAmount, description FROM Action WHERE id='"+toSQL(_id)+"'"+" order by generatedId desc");
				if(s.next())
				{
					result = new Action();
					result.displayName= s.getString(2);
					result.lockStatus= s.getInt(3);
					result.question= s.getString(4);
					result.estimatedPrice= s.getInt(5);
					result.userAmount= s.getInt(6);
					result.description= s.getString(7);
					result.id= _id;
					putToCache(result);
				}
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}

	/**
	 * returns boolean
	 */
	public boolean commit()
	{
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbAction.commit");
			try
			{
				stmt.executeUpdate( "UPDATE Action set displayName= '"+toSQL(displayName)+"', lockStatus= "+lockStatus+", question= '"+toSQL(question)+"', estimatedPrice= "+estimatedPrice+", userAmount= "+userAmount+", description= '"+toSQL(description)+"' WHERE id='"+id+"'");
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return true;
	}


	/**
	 * returns ArrayList<Action>
	 */
	public static ArrayList getAll()
	{
		ArrayList result = new ArrayList();
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbAction.getAll");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT id, displayName, lockStatus, question, estimatedPrice, userAmount, description FROM Action order by generatedId desc");
				while(s.next())
				{
					String _tmpID = s.getString(1);
					Action newObject = (Action)getFromCache(_tmpID);
					if(newObject ==null)
					{
						newObject = new Action();
						newObject.displayName=s.getString(2);
						newObject.lockStatus=s.getInt(3);
						newObject.question=s.getString(4);
						newObject.estimatedPrice=s.getInt(5);
						newObject.userAmount=s.getInt(6);
						newObject.description=s.getString(7);
						newObject.id=_tmpID;
						putToCache(newObject);
					}
					result.add(newObject);
				}
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}


	/**
	 * create a new object in the database
	 */
	static public Action createInstance( String  _displayName, int  _lockStatus, String  _question, int  _estimatedPrice, int  _userAmount, String  _description )
	{
		Action result = null;
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbAction.createInstance");
			try
			{
				String nextGUID = new java.rmi.server.UID().toString();
				stmt.executeUpdate( "INSERT INTO Action ( displayName, lockStatus, question, estimatedPrice, userAmount, description, id) VALUES ( '"+toSQL(_displayName)+"', "+_lockStatus+",  '"+toSQL(_question)+"', "+_estimatedPrice+", "+_userAmount+",  '"+toSQL(_description)+"', '"+nextGUID+"')");
				result = new Action();
				result.displayName= _displayName;
				result.lockStatus= _lockStatus;
				result.question= _question;
				result.estimatedPrice= _estimatedPrice;
				result.userAmount= _userAmount;
				result.description= _description;
				result.id= nextGUID;
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}


	/**
	 * create a new object in the database
	 */
	static public void newInstance( String  _displayName, int  _lockStatus, String  _question, int  _estimatedPrice, int  _userAmount, String  _description )
	{
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbAction.newInstance");
			try
			{
				String nextGUID = new java.rmi.server.UID().toString();
				stmt.executeUpdate( "INSERT INTO Action ( displayName, lockStatus, question, estimatedPrice, userAmount, description, id) VALUES ( '"+toSQL(_displayName)+"', "+_lockStatus+",  '"+toSQL(_question)+"', "+_estimatedPrice+", "+_userAmount+",  '"+toSQL(_description)+"', '"+nextGUID+"')");
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
	}


	/**
	 * destroy a object in the database
	 */
	static public boolean destroyInstance( String  _key)
	{
		boolean result = false;
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbAction.destroyInstance");
			try
			{
					stmt.executeUpdate( "DELETE FROM Action WHERE id='"+_key+"'");
					result = true;
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}


	/**
	 * destroy ALL objects in the database
	 */
	static public boolean destroyAll()
	{
		boolean result = false;
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbAction.destroyAll");
			try
			{
					stmt.executeUpdate("DELETE from Action" );
					result = true;
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}


	/**
	 */
	public String toString()
	{
		StringBuffer result = new StringBuffer(1024);
		result.append(displayName);
		result.append("|");
		result.append(lockStatus);
		result.append("|");
		result.append(question);
		result.append("|");
		result.append(estimatedPrice);
		result.append("|");
		result.append(userAmount);
		result.append("|");
		result.append(description);
		result.append("|");
		result.append(id);
		return result.toString();
	}


	/**
	 * init the class
	 */
	static
	{
		try
		{
			DatabaseMetaData dMeta = ConnectionManager.getValid().getMetaData ();
			ResultSet result;
			result=dMeta.getColumns(null,null,"Action","displayName");
			if(!result.next())
			{
				System.out.println("ERROR: installed DB-schema not compatible to java classes");
				System.out.println("       Attribute 'displayName' in table 'Action' missing");
			}
			result.close();
			result=dMeta.getColumns(null,null,"Action","lockStatus");
			if(!result.next())
			{
				System.out.println("ERROR: installed DB-schema not compatible to java classes");
				System.out.println("       Attribute 'lockStatus' in table 'Action' missing");
			}
			result.close();
			result=dMeta.getColumns(null,null,"Action","question");
			if(!result.next())
			{
				System.out.println("ERROR: installed DB-schema not compatible to java classes");
				System.out.println("       Attribute 'question' in table 'Action' missing");
			}
			result.close();
			result=dMeta.getColumns(null,null,"Action","estimatedPrice");
			if(!result.next())
			{
				System.out.println("ERROR: installed DB-schema not compatible to java classes");
				System.out.println("       Attribute 'estimatedPrice' in table 'Action' missing");
			}
			result.close();
			result=dMeta.getColumns(null,null,"Action","userAmount");
			if(!result.next())
			{
				System.out.println("ERROR: installed DB-schema not compatible to java classes");
				System.out.println("       Attribute 'userAmount' in table 'Action' missing");
			}
			result.close();
			result=dMeta.getColumns(null,null,"Action","description");
			if(!result.next())
			{
				System.out.println("ERROR: installed DB-schema not compatible to java classes");
				System.out.println("       Attribute 'description' in table 'Action' missing");
			}
			result.close();
			result=dMeta.getColumns(null,null,"Action","id");
			if(!result.next())
			{
				System.out.println("ERROR: installed DB-schema not compatible to java classes");
				System.out.println("       Attribute 'id' in table 'Action' missing");
			}
			result.close();
		}
		catch (Exception ex)
		{
		}
	}


}
