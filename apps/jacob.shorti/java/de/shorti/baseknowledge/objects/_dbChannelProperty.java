package de.shorti.baseknowledge.objects;

/**
 * Class generated by automatic ClassGenerator
 * Date: Sat May 11 21:15:22 GMT+02:00 2002
 */
import de.shorti.db.*;
import java.util.ArrayList;
import java.util.Iterator;
import java.sql.*;

class _dbChannelProperty extends dbObject 
{

	String    name;
	String    communicationChannel_di;	// Foreign Key pointing to Table [CommunicationChannel], Field [id]
	String    value;


	/**
	 * destroy a object in the database
	 */
	public boolean destroy()
	{
		boolean result = false;
		String    _key   = id;
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbChannelProperty.destroyInstance");
			try
			{
					stmt.executeUpdate( "DELETE FROM ChannelProperty WHERE id='"+_key+"'");
					result = true;
					removeFromCache(this);
					id     = null;
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}



	/**
	 * Method:      getName()
	 * Description: 
	 * Returns:     String
	 */
	public String getName()
	{
		return name;
	}

	/**
	 * Method:      setName(String _name, boolean _autoCommit)
	 * Description: 
	 * Returns:     void
	 */
	public void setName(String _name, boolean _autoCommit)
	{
		name=_name;
		if(_autoCommit)
		{
			commit();
		}
	}

	/**
	 * Method:      getValue()
	 * Description: 
	 * Returns:     String
	 */
	public String getValue()
	{
		return value;
	}

	/**
	 * Method:      setValue(String _value, boolean _autoCommit)
	 * Description: 
	 * Returns:     void
	 */
	public void setValue(String _value, boolean _autoCommit)
	{
		value=_value;
		if(_autoCommit)
		{
			commit();
		}
	}

	/**
	 * Method:      getId()
	 * Description: 
	 * Returns:     String
	 */
	public String getId()
	{
		return id;
	}

	/**
	 * Method:      getCommunicationChannel_di()
	 * Description: 
	 * Returns:     CommunicationChannel
	 */
	public CommunicationChannel getCommunicationChannel_di()
	{
		return CommunicationChannel.findById(communicationChannel_di);
	}

	/**
	 * Method:      setCommunicationChannel_di()
	 * Description: 
	 * Returns:     void
	 */
	public void setCommunicationChannel_di(CommunicationChannel _foreigner, boolean _autocommit)
	{
		communicationChannel_di= _foreigner.getId();
		if (_autocommit == true)
			commit();
	}

	/**
	 *  Method:      findByName(String _name)
	 *  Description: 
	 *  Returns:     ArrayList<ChannelProperty>
	 */
	public static ArrayList findByName(String _name)
	{
		ArrayList result = new ArrayList();
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbChannelProperty.findByName");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT id, name, communicationChannel_di, value FROM ChannelProperty WHERE name='"+toSQL(_name)+"'"+" order by generatedId desc");
				while(s.next())
				{
					String _tmpID = s.getString(1);
					ChannelProperty newObject = (ChannelProperty)getFromCache(_tmpID);
					if(newObject ==null)
					{
						newObject = new ChannelProperty();
						newObject.name=s.getString(2);
						newObject.communicationChannel_di=s.getString(3);
						newObject.value=s.getString(4);
						newObject.id=_tmpID;
						putToCache(newObject);
					}
					result.add(newObject);
				}
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}

	/**
	 *  Method:      findByCommunicationChannel_di(_dbCommunicationChannel _communicationChannel_di)
	 *  Description: 
	 *  Returns:     ArrayList<ChannelProperty>
	 */
	public static ArrayList findByCommunicationChannel_di(_dbCommunicationChannel _communicationChannel_di)
	{
		ArrayList result = new ArrayList();
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbChannelProperty.findByCommunicationChannel_di");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT id, name, communicationChannel_di, value FROM ChannelProperty WHERE communicationChannel_di='"+toSQL(((_communicationChannel_di==null)?"":_communicationChannel_di.getId()))+"'"+" order by generatedId desc");
				while(s.next())
				{
					String _tmpID = s.getString(1);
					ChannelProperty newObject = (ChannelProperty)getFromCache(_tmpID);
					if(newObject ==null)
					{
						newObject = new ChannelProperty();
						newObject.name=s.getString(2);
						newObject.communicationChannel_di=s.getString(3);
						newObject.value=s.getString(4);
						newObject.id=_tmpID;
						putToCache(newObject);
					}
					result.add(newObject);
				}
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}

	/**
	 *  Method:      findByValue(String _value)
	 *  Description: 
	 *  Returns:     ArrayList<ChannelProperty>
	 */
	public static ArrayList findByValue(String _value)
	{
		ArrayList result = new ArrayList();
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbChannelProperty.findByValue");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT id, name, communicationChannel_di, value FROM ChannelProperty WHERE value='"+toSQL(_value)+"'"+" order by generatedId desc");
				while(s.next())
				{
					String _tmpID = s.getString(1);
					ChannelProperty newObject = (ChannelProperty)getFromCache(_tmpID);
					if(newObject ==null)
					{
						newObject = new ChannelProperty();
						newObject.name=s.getString(2);
						newObject.communicationChannel_di=s.getString(3);
						newObject.value=s.getString(4);
						newObject.id=_tmpID;
						putToCache(newObject);
					}
					result.add(newObject);
				}
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}

	/**
	 *  Method:      findById(String _id)
	 *  Description: 
	 *  Returns:     ChannelProperty
	 */
	public static ChannelProperty findById(String _id)
	{
		ChannelProperty result = (ChannelProperty)getFromCache(_id);
		if(result!=null) return result;
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbChannelProperty.findById");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT id, name, communicationChannel_di, value FROM ChannelProperty WHERE id='"+toSQL(_id)+"'"+" order by generatedId desc");
				if(s.next())
				{
					result = new ChannelProperty();
					result.name= s.getString(2);
					result.communicationChannel_di= s.getString(3);
					result.value= s.getString(4);
					result.id= _id;
					putToCache(result);
				}
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}

	/**
	 * returns boolean
	 */
	public boolean commit()
	{
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbChannelProperty.commit");
			try
			{
				stmt.executeUpdate( "UPDATE ChannelProperty set name= '"+toSQL(name)+"', communicationChannel_di= '"+toSQL(communicationChannel_di)+"', value= '"+toSQL(value)+"' WHERE id='"+id+"'");
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return true;
	}


	/**
	 * returns ArrayList<ChannelProperty>
	 */
	public static ArrayList getAll()
	{
		ArrayList result = new ArrayList();
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbChannelProperty.getAll");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT id, name, communicationChannel_di, value FROM ChannelProperty order by generatedId desc");
				while(s.next())
				{
					String _tmpID = s.getString(1);
					ChannelProperty newObject = (ChannelProperty)getFromCache(_tmpID);
					if(newObject ==null)
					{
						newObject = new ChannelProperty();
						newObject.name=s.getString(2);
						newObject.communicationChannel_di=s.getString(3);
						newObject.value=s.getString(4);
						newObject.id=_tmpID;
						putToCache(newObject);
					}
					result.add(newObject);
				}
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}


	/**
	 * create a new object in the database
	 */
	static public ChannelProperty createInstance( String  _name, _dbCommunicationChannel _communicationChannel_di, String  _value )
	{
		ChannelProperty result = null;
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbChannelProperty.createInstance");
			try
			{
				String nextGUID = new java.rmi.server.UID().toString();
				stmt.executeUpdate( "INSERT INTO ChannelProperty ( name, communicationChannel_di, value, id) VALUES ( '"+toSQL(_name)+"',  '"+((_communicationChannel_di==null)?"":_communicationChannel_di.getId())+"',  '"+toSQL(_value)+"', '"+nextGUID+"')");
				result = new ChannelProperty();
				result.name= _name;
				result.communicationChannel_di= (_communicationChannel_di==null)?"":_communicationChannel_di.getId();
				result.value= _value;
				result.id= nextGUID;
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}


	/**
	 * create a new object in the database
	 */
	static public void newInstance( String  _name, _dbCommunicationChannel _communicationChannel_di, String  _value )
	{
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbChannelProperty.newInstance");
			try
			{
				String nextGUID = new java.rmi.server.UID().toString();
				stmt.executeUpdate( "INSERT INTO ChannelProperty ( name, communicationChannel_di, value, id) VALUES ( '"+toSQL(_name)+"',  '"+((_communicationChannel_di==null)?"":_communicationChannel_di.getId())+"',  '"+toSQL(_value)+"', '"+nextGUID+"')");
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
	}


	/**
	 * destroy a object in the database
	 */
	static public boolean destroyInstance( String  _key)
	{
		boolean result = false;
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbChannelProperty.destroyInstance");
			try
			{
					stmt.executeUpdate( "DELETE FROM ChannelProperty WHERE id='"+_key+"'");
					result = true;
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}


	/**
	 * destroy ALL objects in the database
	 */
	static public boolean destroyAll()
	{
		boolean result = false;
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbChannelProperty.destroyAll");
			try
			{
					stmt.executeUpdate("DELETE from ChannelProperty" );
					result = true;
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}


	/**
	 */
	public String toString()
	{
		StringBuffer result = new StringBuffer(1024);
		result.append(name);
		result.append("|");
		result.append(communicationChannel_di);
		result.append("|");
		result.append(value);
		result.append("|");
		result.append(id);
		return result.toString();
	}


	/**
	 * init the class
	 */
	static
	{
		try
		{
			DatabaseMetaData dMeta = ConnectionManager.getValid().getMetaData ();
			ResultSet result;
			result=dMeta.getColumns(null,null,"ChannelProperty","name");
			if(!result.next())
			{
				System.out.println("ERROR: installed DB-schema not compatible to java classes");
				System.out.println("       Attribute 'name' in table 'ChannelProperty' missing");
			}
			result.close();
			result=dMeta.getColumns(null,null,"ChannelProperty","communicationChannel_di");
			if(!result.next())
			{
				System.out.println("ERROR: installed DB-schema not compatible to java classes");
				System.out.println("       Attribute 'communicationChannel_di' in table 'ChannelProperty' missing");
			}
			result.close();
			result=dMeta.getColumns(null,null,"ChannelProperty","value");
			if(!result.next())
			{
				System.out.println("ERROR: installed DB-schema not compatible to java classes");
				System.out.println("       Attribute 'value' in table 'ChannelProperty' missing");
			}
			result.close();
			result=dMeta.getColumns(null,null,"ChannelProperty","id");
			if(!result.next())
			{
				System.out.println("ERROR: installed DB-schema not compatible to java classes");
				System.out.println("       Attribute 'id' in table 'ChannelProperty' missing");
			}
			result.close();
		}
		catch (Exception ex)
		{
		}
	}


}
