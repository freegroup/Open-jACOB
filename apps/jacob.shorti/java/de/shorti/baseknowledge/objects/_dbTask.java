package de.shorti.baseknowledge.objects;

/**
 * Class generated by automatic ClassGenerator
 * Date: Sat May 11 21:15:22 GMT+02:00 2002
 */
import de.shorti.db.*;
import java.util.ArrayList;
import java.util.Iterator;
import java.sql.*;

class _dbTask extends dbObject 
{

	String    foreignId;
	long      startTime;
	long      duration;
	int       status;
	long      creationTime;
	String    allDayEventPattern;
	long      endTime;
	int       isPrivate;
	String    calendar_id;	// Foreign Key pointing to Table [Calendar], Field [id]
	int       reminderSet;
	String    subject;
	int       importance;
	int       allDayEvent;


	/**
	 * destroy a object in the database
	 */
	public boolean destroy()
	{
		boolean result = false;
		String    _key   = id;
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbTask.destroyInstance");
			try
			{
					stmt.executeUpdate( "DELETE FROM Task WHERE id='"+_key+"'");
					result = true;
					removeFromCache(this);
					id     = null;
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}



	/**
	 * Method:      getForeignId()
	 * Description: 
	 * Returns:     String
	 */
	public String getForeignId()
	{
		return foreignId;
	}

	/**
	 * Method:      setForeignId(String _foreignId, boolean _autoCommit)
	 * Description: 
	 * Returns:     void
	 */
	public void setForeignId(String _foreignId, boolean _autoCommit)
	{
		foreignId=_foreignId;
		if(_autoCommit)
		{
			commit();
		}
	}

	/**
	 * Method:      getId()
	 * Description: 
	 * Returns:     String
	 */
	public String getId()
	{
		return id;
	}

	/**
	 * Method:      getStartTime()
	 * Description: 
	 * Returns:     long
	 */
	public long getStartTime()
	{
		return startTime;
	}

	/**
	 * Method:      setStartTime(long _startTime, boolean _autoCommit)
	 * Description: 
	 * Returns:     void
	 */
	public void setStartTime(long _startTime, boolean _autoCommit)
	{
		startTime=_startTime;
		if(_autoCommit)
		{
			commit();
		}
	}

	/**
	 * Method:      getDuration()
	 * Description: 
	 * Returns:     long
	 */
	public long getDuration()
	{
		return duration;
	}

	/**
	 * Method:      setDuration(long _duration, boolean _autoCommit)
	 * Description: 
	 * Returns:     void
	 */
	public void setDuration(long _duration, boolean _autoCommit)
	{
		duration=_duration;
		if(_autoCommit)
		{
			commit();
		}
	}

	/**
	 * Method:      getStatus()
	 * Description: 
	 * Returns:     int
	 */
	public int getStatus()
	{
		return status;
	}

	/**
	 * Method:      setStatus(int _status, boolean _autoCommit)
	 * Description: 
	 * Returns:     void
	 */
	public void setStatus(int _status, boolean _autoCommit)
	{
		status=_status;
		if(_autoCommit)
		{
			commit();
		}
	}

	/**
	 * Method:      getCreationTime()
	 * Description: 
	 * Returns:     long
	 */
	public long getCreationTime()
	{
		return creationTime;
	}

	/**
	 * Method:      setCreationTime(long _creationTime, boolean _autoCommit)
	 * Description: 
	 * Returns:     void
	 */
	public void setCreationTime(long _creationTime, boolean _autoCommit)
	{
		creationTime=_creationTime;
		if(_autoCommit)
		{
			commit();
		}
	}

	/**
	 * Method:      getAllDayEventPattern()
	 * Description: 
	 * Returns:     String
	 */
	public String getAllDayEventPattern()
	{
		return allDayEventPattern;
	}

	/**
	 * Method:      setAllDayEventPattern(String _allDayEventPattern, boolean _autoCommit)
	 * Description: 
	 * Returns:     void
	 */
	public void setAllDayEventPattern(String _allDayEventPattern, boolean _autoCommit)
	{
		allDayEventPattern=_allDayEventPattern;
		if(_autoCommit)
		{
			commit();
		}
	}

	/**
	 * Method:      getEndTime()
	 * Description: 
	 * Returns:     long
	 */
	public long getEndTime()
	{
		return endTime;
	}

	/**
	 * Method:      setEndTime(long _endTime, boolean _autoCommit)
	 * Description: 
	 * Returns:     void
	 */
	public void setEndTime(long _endTime, boolean _autoCommit)
	{
		endTime=_endTime;
		if(_autoCommit)
		{
			commit();
		}
	}

	/**
	 * Method:      getIsPrivate()
	 * Description: 
	 * Returns:     int
	 */
	public int getIsPrivate()
	{
		return isPrivate;
	}

	/**
	 * Method:      setIsPrivate(int _isPrivate, boolean _autoCommit)
	 * Description: 
	 * Returns:     void
	 */
	public void setIsPrivate(int _isPrivate, boolean _autoCommit)
	{
		isPrivate=_isPrivate;
		if(_autoCommit)
		{
			commit();
		}
	}

	/**
	 * Method:      getReminderSet()
	 * Description: 
	 * Returns:     int
	 */
	public int getReminderSet()
	{
		return reminderSet;
	}

	/**
	 * Method:      setReminderSet(int _reminderSet, boolean _autoCommit)
	 * Description: 
	 * Returns:     void
	 */
	public void setReminderSet(int _reminderSet, boolean _autoCommit)
	{
		reminderSet=_reminderSet;
		if(_autoCommit)
		{
			commit();
		}
	}

	/**
	 * Method:      getSubject()
	 * Description: 
	 * Returns:     String
	 */
	public String getSubject()
	{
		return subject;
	}

	/**
	 * Method:      setSubject(String _subject, boolean _autoCommit)
	 * Description: 
	 * Returns:     void
	 */
	public void setSubject(String _subject, boolean _autoCommit)
	{
		subject=_subject;
		if(_autoCommit)
		{
			commit();
		}
	}

	/**
	 * Method:      getImportance()
	 * Description: 
	 * Returns:     int
	 */
	public int getImportance()
	{
		return importance;
	}

	/**
	 * Method:      setImportance(int _importance, boolean _autoCommit)
	 * Description: 
	 * Returns:     void
	 */
	public void setImportance(int _importance, boolean _autoCommit)
	{
		importance=_importance;
		if(_autoCommit)
		{
			commit();
		}
	}

	/**
	 * Method:      getAllDayEvent()
	 * Description: 
	 * Returns:     int
	 */
	public int getAllDayEvent()
	{
		return allDayEvent;
	}

	/**
	 * Method:      setAllDayEvent(int _allDayEvent, boolean _autoCommit)
	 * Description: 
	 * Returns:     void
	 */
	public void setAllDayEvent(int _allDayEvent, boolean _autoCommit)
	{
		allDayEvent=_allDayEvent;
		if(_autoCommit)
		{
			commit();
		}
	}

	/**
	 * Method:      getCalendar()
	 * Description: 
	 * Returns:     Calendar
	 */
	public Calendar getCalendar()
	{
		return Calendar.findById(calendar_id);
	}

	/**
	 * Method:      setCalendar()
	 * Description: 
	 * Returns:     void
	 */
	public void setCalendar(Calendar _foreigner, boolean _autocommit)
	{
		calendar_id= _foreigner.getId();
		if (_autocommit == true)
			commit();
	}

	/**
	 *  Method:      findByForeignId(String _foreignId)
	 *  Description: 
	 *  Returns:     Task
	 */
	public static Task findByForeignId(String _foreignId)
	{
		Task result = null;
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbTask.findByForeignId");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT id, foreignId, startTime, duration, status, creationTime, allDayEventPattern, endTime, isPrivate, calendar_id, reminderSet, subject, importance, allDayEvent FROM Task WHERE foreignId='"+toSQL(_foreignId)+"'"+" order by generatedId desc");
				if(s.next())
				{
					String _tmpID = s.getString(1);
					result = (Task)getFromCache(_tmpID);
					if(result ==null)
					{
						result = new Task();
						result.foreignId= s.getString(2);
						result.id= _tmpID;
						result.startTime= s.getLong(3);
						result.duration= s.getLong(4);
						result.status= s.getInt(5);
						result.creationTime= s.getLong(6);
						result.allDayEventPattern= s.getString(7);
						result.endTime= s.getLong(8);
						result.isPrivate= s.getInt(9);
						result.calendar_id= s.getString(10);
						result.reminderSet= s.getInt(11);
						result.subject= s.getString(12);
						result.importance= s.getInt(13);
						result.allDayEvent= s.getInt(14);
						putToCache(result);
					}
				}
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}

	/**
	 *  Method:      findById(String _id)
	 *  Description: 
	 *  Returns:     Task
	 */
	public static Task findById(String _id)
	{
		Task result = (Task)getFromCache(_id);
		if(result!=null) return result;
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbTask.findById");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT id, foreignId, startTime, duration, status, creationTime, allDayEventPattern, endTime, isPrivate, calendar_id, reminderSet, subject, importance, allDayEvent FROM Task WHERE id='"+toSQL(_id)+"'"+" order by generatedId desc");
				if(s.next())
				{
					result = new Task();
					result.foreignId= s.getString(2);
					result.id= _id;
					result.startTime= s.getLong(3);
					result.duration= s.getLong(4);
					result.status= s.getInt(5);
					result.creationTime= s.getLong(6);
					result.allDayEventPattern= s.getString(7);
					result.endTime= s.getLong(8);
					result.isPrivate= s.getInt(9);
					result.calendar_id= s.getString(10);
					result.reminderSet= s.getInt(11);
					result.subject= s.getString(12);
					result.importance= s.getInt(13);
					result.allDayEvent= s.getInt(14);
					putToCache(result);
				}
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}

	/**
	 *  Method:      findByStartTime(long _startTime)
	 *  Description: 
	 *  Returns:     ArrayList<Task>
	 */
	public static ArrayList findByStartTime(long _startTime)
	{
		ArrayList result = new ArrayList();
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbTask.findByStartTime");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT id, foreignId, startTime, duration, status, creationTime, allDayEventPattern, endTime, isPrivate, calendar_id, reminderSet, subject, importance, allDayEvent FROM Task WHERE startTime="+_startTime+" order by generatedId desc");
				while(s.next())
				{
					String _tmpID = s.getString(1);
					Task newObject = (Task)getFromCache(_tmpID);
					if(newObject ==null)
					{
						newObject = new Task();
						newObject.foreignId=s.getString(2);
						newObject.id=_tmpID;
						newObject.startTime=s.getLong(3);
						newObject.duration=s.getLong(4);
						newObject.status=s.getInt(5);
						newObject.creationTime=s.getLong(6);
						newObject.allDayEventPattern=s.getString(7);
						newObject.endTime=s.getLong(8);
						newObject.isPrivate=s.getInt(9);
						newObject.calendar_id=s.getString(10);
						newObject.reminderSet=s.getInt(11);
						newObject.subject=s.getString(12);
						newObject.importance=s.getInt(13);
						newObject.allDayEvent=s.getInt(14);
						putToCache(newObject);
					}
					result.add(newObject);
				}
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}

	/**
	 *  Method:      findByDuration(long _duration)
	 *  Description: 
	 *  Returns:     ArrayList<Task>
	 */
	public static ArrayList findByDuration(long _duration)
	{
		ArrayList result = new ArrayList();
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbTask.findByDuration");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT id, foreignId, startTime, duration, status, creationTime, allDayEventPattern, endTime, isPrivate, calendar_id, reminderSet, subject, importance, allDayEvent FROM Task WHERE duration="+_duration+" order by generatedId desc");
				while(s.next())
				{
					String _tmpID = s.getString(1);
					Task newObject = (Task)getFromCache(_tmpID);
					if(newObject ==null)
					{
						newObject = new Task();
						newObject.foreignId=s.getString(2);
						newObject.id=_tmpID;
						newObject.startTime=s.getLong(3);
						newObject.duration=s.getLong(4);
						newObject.status=s.getInt(5);
						newObject.creationTime=s.getLong(6);
						newObject.allDayEventPattern=s.getString(7);
						newObject.endTime=s.getLong(8);
						newObject.isPrivate=s.getInt(9);
						newObject.calendar_id=s.getString(10);
						newObject.reminderSet=s.getInt(11);
						newObject.subject=s.getString(12);
						newObject.importance=s.getInt(13);
						newObject.allDayEvent=s.getInt(14);
						putToCache(newObject);
					}
					result.add(newObject);
				}
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}

	/**
	 *  Method:      findByStatus(int _status)
	 *  Description: 
	 *  Returns:     ArrayList<Task>
	 */
	public static ArrayList findByStatus(int _status)
	{
		ArrayList result = new ArrayList();
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbTask.findByStatus");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT id, foreignId, startTime, duration, status, creationTime, allDayEventPattern, endTime, isPrivate, calendar_id, reminderSet, subject, importance, allDayEvent FROM Task WHERE status="+_status+" order by generatedId desc");
				while(s.next())
				{
					String _tmpID = s.getString(1);
					Task newObject = (Task)getFromCache(_tmpID);
					if(newObject ==null)
					{
						newObject = new Task();
						newObject.foreignId=s.getString(2);
						newObject.id=_tmpID;
						newObject.startTime=s.getLong(3);
						newObject.duration=s.getLong(4);
						newObject.status=s.getInt(5);
						newObject.creationTime=s.getLong(6);
						newObject.allDayEventPattern=s.getString(7);
						newObject.endTime=s.getLong(8);
						newObject.isPrivate=s.getInt(9);
						newObject.calendar_id=s.getString(10);
						newObject.reminderSet=s.getInt(11);
						newObject.subject=s.getString(12);
						newObject.importance=s.getInt(13);
						newObject.allDayEvent=s.getInt(14);
						putToCache(newObject);
					}
					result.add(newObject);
				}
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}

	/**
	 *  Method:      findByCreationTime(long _creationTime)
	 *  Description: 
	 *  Returns:     ArrayList<Task>
	 */
	public static ArrayList findByCreationTime(long _creationTime)
	{
		ArrayList result = new ArrayList();
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbTask.findByCreationTime");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT id, foreignId, startTime, duration, status, creationTime, allDayEventPattern, endTime, isPrivate, calendar_id, reminderSet, subject, importance, allDayEvent FROM Task WHERE creationTime="+_creationTime+" order by generatedId desc");
				while(s.next())
				{
					String _tmpID = s.getString(1);
					Task newObject = (Task)getFromCache(_tmpID);
					if(newObject ==null)
					{
						newObject = new Task();
						newObject.foreignId=s.getString(2);
						newObject.id=_tmpID;
						newObject.startTime=s.getLong(3);
						newObject.duration=s.getLong(4);
						newObject.status=s.getInt(5);
						newObject.creationTime=s.getLong(6);
						newObject.allDayEventPattern=s.getString(7);
						newObject.endTime=s.getLong(8);
						newObject.isPrivate=s.getInt(9);
						newObject.calendar_id=s.getString(10);
						newObject.reminderSet=s.getInt(11);
						newObject.subject=s.getString(12);
						newObject.importance=s.getInt(13);
						newObject.allDayEvent=s.getInt(14);
						putToCache(newObject);
					}
					result.add(newObject);
				}
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}

	/**
	 *  Method:      findByAllDayEventPattern(String _allDayEventPattern)
	 *  Description: 
	 *  Returns:     ArrayList<Task>
	 */
	public static ArrayList findByAllDayEventPattern(String _allDayEventPattern)
	{
		ArrayList result = new ArrayList();
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbTask.findByAllDayEventPattern");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT id, foreignId, startTime, duration, status, creationTime, allDayEventPattern, endTime, isPrivate, calendar_id, reminderSet, subject, importance, allDayEvent FROM Task WHERE allDayEventPattern='"+toSQL(_allDayEventPattern)+"'"+" order by generatedId desc");
				while(s.next())
				{
					String _tmpID = s.getString(1);
					Task newObject = (Task)getFromCache(_tmpID);
					if(newObject ==null)
					{
						newObject = new Task();
						newObject.foreignId=s.getString(2);
						newObject.id=_tmpID;
						newObject.startTime=s.getLong(3);
						newObject.duration=s.getLong(4);
						newObject.status=s.getInt(5);
						newObject.creationTime=s.getLong(6);
						newObject.allDayEventPattern=s.getString(7);
						newObject.endTime=s.getLong(8);
						newObject.isPrivate=s.getInt(9);
						newObject.calendar_id=s.getString(10);
						newObject.reminderSet=s.getInt(11);
						newObject.subject=s.getString(12);
						newObject.importance=s.getInt(13);
						newObject.allDayEvent=s.getInt(14);
						putToCache(newObject);
					}
					result.add(newObject);
				}
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}

	/**
	 *  Method:      findByEndTime(long _endTime)
	 *  Description: 
	 *  Returns:     ArrayList<Task>
	 */
	public static ArrayList findByEndTime(long _endTime)
	{
		ArrayList result = new ArrayList();
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbTask.findByEndTime");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT id, foreignId, startTime, duration, status, creationTime, allDayEventPattern, endTime, isPrivate, calendar_id, reminderSet, subject, importance, allDayEvent FROM Task WHERE endTime="+_endTime+" order by generatedId desc");
				while(s.next())
				{
					String _tmpID = s.getString(1);
					Task newObject = (Task)getFromCache(_tmpID);
					if(newObject ==null)
					{
						newObject = new Task();
						newObject.foreignId=s.getString(2);
						newObject.id=_tmpID;
						newObject.startTime=s.getLong(3);
						newObject.duration=s.getLong(4);
						newObject.status=s.getInt(5);
						newObject.creationTime=s.getLong(6);
						newObject.allDayEventPattern=s.getString(7);
						newObject.endTime=s.getLong(8);
						newObject.isPrivate=s.getInt(9);
						newObject.calendar_id=s.getString(10);
						newObject.reminderSet=s.getInt(11);
						newObject.subject=s.getString(12);
						newObject.importance=s.getInt(13);
						newObject.allDayEvent=s.getInt(14);
						putToCache(newObject);
					}
					result.add(newObject);
				}
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}

	/**
	 *  Method:      findByIsPrivate(int _isPrivate)
	 *  Description: 
	 *  Returns:     ArrayList<Task>
	 */
	public static ArrayList findByIsPrivate(int _isPrivate)
	{
		ArrayList result = new ArrayList();
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbTask.findByIsPrivate");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT id, foreignId, startTime, duration, status, creationTime, allDayEventPattern, endTime, isPrivate, calendar_id, reminderSet, subject, importance, allDayEvent FROM Task WHERE isPrivate="+_isPrivate+" order by generatedId desc");
				while(s.next())
				{
					String _tmpID = s.getString(1);
					Task newObject = (Task)getFromCache(_tmpID);
					if(newObject ==null)
					{
						newObject = new Task();
						newObject.foreignId=s.getString(2);
						newObject.id=_tmpID;
						newObject.startTime=s.getLong(3);
						newObject.duration=s.getLong(4);
						newObject.status=s.getInt(5);
						newObject.creationTime=s.getLong(6);
						newObject.allDayEventPattern=s.getString(7);
						newObject.endTime=s.getLong(8);
						newObject.isPrivate=s.getInt(9);
						newObject.calendar_id=s.getString(10);
						newObject.reminderSet=s.getInt(11);
						newObject.subject=s.getString(12);
						newObject.importance=s.getInt(13);
						newObject.allDayEvent=s.getInt(14);
						putToCache(newObject);
					}
					result.add(newObject);
				}
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}

	/**
	 *  Method:      findByCalendar(_dbCalendar _calendar)
	 *  Description: 
	 *  Returns:     ArrayList<Task>
	 */
	public static ArrayList findByCalendar(_dbCalendar _calendar)
	{
		ArrayList result = new ArrayList();
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbTask.findByCalendar");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT id, foreignId, startTime, duration, status, creationTime, allDayEventPattern, endTime, isPrivate, calendar_id, reminderSet, subject, importance, allDayEvent FROM Task WHERE calendar_id='"+toSQL(((_calendar==null)?"":_calendar.getId()))+"'"+" order by generatedId desc");
				while(s.next())
				{
					String _tmpID = s.getString(1);
					Task newObject = (Task)getFromCache(_tmpID);
					if(newObject ==null)
					{
						newObject = new Task();
						newObject.foreignId=s.getString(2);
						newObject.id=_tmpID;
						newObject.startTime=s.getLong(3);
						newObject.duration=s.getLong(4);
						newObject.status=s.getInt(5);
						newObject.creationTime=s.getLong(6);
						newObject.allDayEventPattern=s.getString(7);
						newObject.endTime=s.getLong(8);
						newObject.isPrivate=s.getInt(9);
						newObject.calendar_id=s.getString(10);
						newObject.reminderSet=s.getInt(11);
						newObject.subject=s.getString(12);
						newObject.importance=s.getInt(13);
						newObject.allDayEvent=s.getInt(14);
						putToCache(newObject);
					}
					result.add(newObject);
				}
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}

	/**
	 *  Method:      findByReminderSet(int _reminderSet)
	 *  Description: 
	 *  Returns:     ArrayList<Task>
	 */
	public static ArrayList findByReminderSet(int _reminderSet)
	{
		ArrayList result = new ArrayList();
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbTask.findByReminderSet");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT id, foreignId, startTime, duration, status, creationTime, allDayEventPattern, endTime, isPrivate, calendar_id, reminderSet, subject, importance, allDayEvent FROM Task WHERE reminderSet="+_reminderSet+" order by generatedId desc");
				while(s.next())
				{
					String _tmpID = s.getString(1);
					Task newObject = (Task)getFromCache(_tmpID);
					if(newObject ==null)
					{
						newObject = new Task();
						newObject.foreignId=s.getString(2);
						newObject.id=_tmpID;
						newObject.startTime=s.getLong(3);
						newObject.duration=s.getLong(4);
						newObject.status=s.getInt(5);
						newObject.creationTime=s.getLong(6);
						newObject.allDayEventPattern=s.getString(7);
						newObject.endTime=s.getLong(8);
						newObject.isPrivate=s.getInt(9);
						newObject.calendar_id=s.getString(10);
						newObject.reminderSet=s.getInt(11);
						newObject.subject=s.getString(12);
						newObject.importance=s.getInt(13);
						newObject.allDayEvent=s.getInt(14);
						putToCache(newObject);
					}
					result.add(newObject);
				}
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}

	/**
	 *  Method:      findBySubject(String _subject)
	 *  Description: 
	 *  Returns:     ArrayList<Task>
	 */
	public static ArrayList findBySubject(String _subject)
	{
		ArrayList result = new ArrayList();
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbTask.findBySubject");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT id, foreignId, startTime, duration, status, creationTime, allDayEventPattern, endTime, isPrivate, calendar_id, reminderSet, subject, importance, allDayEvent FROM Task WHERE subject='"+toSQL(_subject)+"'"+" order by generatedId desc");
				while(s.next())
				{
					String _tmpID = s.getString(1);
					Task newObject = (Task)getFromCache(_tmpID);
					if(newObject ==null)
					{
						newObject = new Task();
						newObject.foreignId=s.getString(2);
						newObject.id=_tmpID;
						newObject.startTime=s.getLong(3);
						newObject.duration=s.getLong(4);
						newObject.status=s.getInt(5);
						newObject.creationTime=s.getLong(6);
						newObject.allDayEventPattern=s.getString(7);
						newObject.endTime=s.getLong(8);
						newObject.isPrivate=s.getInt(9);
						newObject.calendar_id=s.getString(10);
						newObject.reminderSet=s.getInt(11);
						newObject.subject=s.getString(12);
						newObject.importance=s.getInt(13);
						newObject.allDayEvent=s.getInt(14);
						putToCache(newObject);
					}
					result.add(newObject);
				}
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}

	/**
	 *  Method:      findByImportance(int _importance)
	 *  Description: 
	 *  Returns:     ArrayList<Task>
	 */
	public static ArrayList findByImportance(int _importance)
	{
		ArrayList result = new ArrayList();
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbTask.findByImportance");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT id, foreignId, startTime, duration, status, creationTime, allDayEventPattern, endTime, isPrivate, calendar_id, reminderSet, subject, importance, allDayEvent FROM Task WHERE importance="+_importance+" order by generatedId desc");
				while(s.next())
				{
					String _tmpID = s.getString(1);
					Task newObject = (Task)getFromCache(_tmpID);
					if(newObject ==null)
					{
						newObject = new Task();
						newObject.foreignId=s.getString(2);
						newObject.id=_tmpID;
						newObject.startTime=s.getLong(3);
						newObject.duration=s.getLong(4);
						newObject.status=s.getInt(5);
						newObject.creationTime=s.getLong(6);
						newObject.allDayEventPattern=s.getString(7);
						newObject.endTime=s.getLong(8);
						newObject.isPrivate=s.getInt(9);
						newObject.calendar_id=s.getString(10);
						newObject.reminderSet=s.getInt(11);
						newObject.subject=s.getString(12);
						newObject.importance=s.getInt(13);
						newObject.allDayEvent=s.getInt(14);
						putToCache(newObject);
					}
					result.add(newObject);
				}
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}

	/**
	 *  Method:      findByAllDayEvent(int _allDayEvent)
	 *  Description: 
	 *  Returns:     ArrayList<Task>
	 */
	public static ArrayList findByAllDayEvent(int _allDayEvent)
	{
		ArrayList result = new ArrayList();
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbTask.findByAllDayEvent");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT id, foreignId, startTime, duration, status, creationTime, allDayEventPattern, endTime, isPrivate, calendar_id, reminderSet, subject, importance, allDayEvent FROM Task WHERE allDayEvent="+_allDayEvent+" order by generatedId desc");
				while(s.next())
				{
					String _tmpID = s.getString(1);
					Task newObject = (Task)getFromCache(_tmpID);
					if(newObject ==null)
					{
						newObject = new Task();
						newObject.foreignId=s.getString(2);
						newObject.id=_tmpID;
						newObject.startTime=s.getLong(3);
						newObject.duration=s.getLong(4);
						newObject.status=s.getInt(5);
						newObject.creationTime=s.getLong(6);
						newObject.allDayEventPattern=s.getString(7);
						newObject.endTime=s.getLong(8);
						newObject.isPrivate=s.getInt(9);
						newObject.calendar_id=s.getString(10);
						newObject.reminderSet=s.getInt(11);
						newObject.subject=s.getString(12);
						newObject.importance=s.getInt(13);
						newObject.allDayEvent=s.getInt(14);
						putToCache(newObject);
					}
					result.add(newObject);
				}
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}

	/**
	 * returns boolean
	 */
	public boolean commit()
	{
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbTask.commit");
			try
			{
				stmt.executeUpdate( "UPDATE Task set foreignId= '"+toSQL(foreignId)+"', startTime= "+startTime+", duration= "+duration+", status= "+status+", creationTime= "+creationTime+", allDayEventPattern= '"+toSQL(allDayEventPattern)+"', endTime= "+endTime+", isPrivate= "+isPrivate+", calendar_id= '"+toSQL(calendar_id)+"', reminderSet= "+reminderSet+", subject= '"+toSQL(subject)+"', importance= "+importance+", allDayEvent= "+allDayEvent+" WHERE id='"+id+"'");
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return true;
	}


	/**
	 * returns ArrayList<Task>
	 */
	public static ArrayList getAll()
	{
		ArrayList result = new ArrayList();
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbTask.getAll");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT id, foreignId, startTime, duration, status, creationTime, allDayEventPattern, endTime, isPrivate, calendar_id, reminderSet, subject, importance, allDayEvent FROM Task order by generatedId desc");
				while(s.next())
				{
					String _tmpID = s.getString(1);
					Task newObject = (Task)getFromCache(_tmpID);
					if(newObject ==null)
					{
						newObject = new Task();
						newObject.foreignId=s.getString(2);
						newObject.id=_tmpID;
						newObject.startTime=s.getLong(3);
						newObject.duration=s.getLong(4);
						newObject.status=s.getInt(5);
						newObject.creationTime=s.getLong(6);
						newObject.allDayEventPattern=s.getString(7);
						newObject.endTime=s.getLong(8);
						newObject.isPrivate=s.getInt(9);
						newObject.calendar_id=s.getString(10);
						newObject.reminderSet=s.getInt(11);
						newObject.subject=s.getString(12);
						newObject.importance=s.getInt(13);
						newObject.allDayEvent=s.getInt(14);
						putToCache(newObject);
					}
					result.add(newObject);
				}
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}


	/**
	 * create a new object in the database
	 */
	static public Task createInstance( String  _foreignId, long  _startTime, long  _duration, int  _status, long  _creationTime, String  _allDayEventPattern, long  _endTime, int  _isPrivate, _dbCalendar _calendar, int  _reminderSet, String  _subject, int  _importance, int  _allDayEvent )
	{
		Task result = null;
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbTask.createInstance");
			try
			{
				String nextGUID = new java.rmi.server.UID().toString();
				stmt.executeUpdate( "INSERT INTO Task ( foreignId, id, startTime, duration, status, creationTime, allDayEventPattern, endTime, isPrivate, calendar_id, reminderSet, subject, importance, allDayEvent) VALUES ( '"+toSQL(_foreignId)+"', '"+nextGUID+"', "+_startTime+", "+_duration+", "+_status+", "+_creationTime+",  '"+toSQL(_allDayEventPattern)+"', "+_endTime+", "+_isPrivate+",  '"+((_calendar==null)?"":_calendar.getId())+"', "+_reminderSet+",  '"+toSQL(_subject)+"', "+_importance+", "+_allDayEvent+")");
				result = new Task();
				result.foreignId= _foreignId;
				result.id= nextGUID;
				result.startTime= _startTime;
				result.duration= _duration;
				result.status= _status;
				result.creationTime= _creationTime;
				result.allDayEventPattern= _allDayEventPattern;
				result.endTime= _endTime;
				result.isPrivate= _isPrivate;
				result.calendar_id= (_calendar==null)?"":_calendar.getId();
				result.reminderSet= _reminderSet;
				result.subject= _subject;
				result.importance= _importance;
				result.allDayEvent= _allDayEvent;
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}


	/**
	 * create a new object in the database
	 */
	static public void newInstance( String  _foreignId, long  _startTime, long  _duration, int  _status, long  _creationTime, String  _allDayEventPattern, long  _endTime, int  _isPrivate, _dbCalendar _calendar, int  _reminderSet, String  _subject, int  _importance, int  _allDayEvent )
	{
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbTask.newInstance");
			try
			{
				String nextGUID = new java.rmi.server.UID().toString();
				stmt.executeUpdate( "INSERT INTO Task ( foreignId, id, startTime, duration, status, creationTime, allDayEventPattern, endTime, isPrivate, calendar_id, reminderSet, subject, importance, allDayEvent) VALUES ( '"+toSQL(_foreignId)+"', '"+nextGUID+"', "+_startTime+", "+_duration+", "+_status+", "+_creationTime+",  '"+toSQL(_allDayEventPattern)+"', "+_endTime+", "+_isPrivate+",  '"+((_calendar==null)?"":_calendar.getId())+"', "+_reminderSet+",  '"+toSQL(_subject)+"', "+_importance+", "+_allDayEvent+")");
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
	}


	/**
	 * destroy a object in the database
	 */
	static public boolean destroyInstance( String  _key)
	{
		boolean result = false;
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbTask.destroyInstance");
			try
			{
					stmt.executeUpdate( "DELETE FROM Task WHERE id='"+_key+"'");
					result = true;
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}


	/**
	 * destroy ALL objects in the database
	 */
	static public boolean destroyAll()
	{
		boolean result = false;
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbTask.destroyAll");
			try
			{
					stmt.executeUpdate("DELETE from Task" );
					result = true;
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}


	/**
	 */
	public String toString()
	{
		StringBuffer result = new StringBuffer(1024);
		result.append(foreignId);
		result.append("|");
		result.append(id);
		result.append("|");
		result.append(startTime);
		result.append("|");
		result.append(duration);
		result.append("|");
		result.append(status);
		result.append("|");
		result.append(creationTime);
		result.append("|");
		result.append(allDayEventPattern);
		result.append("|");
		result.append(endTime);
		result.append("|");
		result.append(isPrivate);
		result.append("|");
		result.append(calendar_id);
		result.append("|");
		result.append(reminderSet);
		result.append("|");
		result.append(subject);
		result.append("|");
		result.append(importance);
		result.append("|");
		result.append(allDayEvent);
		return result.toString();
	}


	/**
	 * init the class
	 */
	static
	{
		try
		{
			DatabaseMetaData dMeta = ConnectionManager.getValid().getMetaData ();
			ResultSet result;
			result=dMeta.getColumns(null,null,"Task","foreignId");
			if(!result.next())
			{
				System.out.println("ERROR: installed DB-schema not compatible to java classes");
				System.out.println("       Attribute 'foreignId' in table 'Task' missing");
			}
			result.close();
			result=dMeta.getColumns(null,null,"Task","id");
			if(!result.next())
			{
				System.out.println("ERROR: installed DB-schema not compatible to java classes");
				System.out.println("       Attribute 'id' in table 'Task' missing");
			}
			result.close();
			result=dMeta.getColumns(null,null,"Task","startTime");
			if(!result.next())
			{
				System.out.println("ERROR: installed DB-schema not compatible to java classes");
				System.out.println("       Attribute 'startTime' in table 'Task' missing");
			}
			result.close();
			result=dMeta.getColumns(null,null,"Task","duration");
			if(!result.next())
			{
				System.out.println("ERROR: installed DB-schema not compatible to java classes");
				System.out.println("       Attribute 'duration' in table 'Task' missing");
			}
			result.close();
			result=dMeta.getColumns(null,null,"Task","status");
			if(!result.next())
			{
				System.out.println("ERROR: installed DB-schema not compatible to java classes");
				System.out.println("       Attribute 'status' in table 'Task' missing");
			}
			result.close();
			result=dMeta.getColumns(null,null,"Task","creationTime");
			if(!result.next())
			{
				System.out.println("ERROR: installed DB-schema not compatible to java classes");
				System.out.println("       Attribute 'creationTime' in table 'Task' missing");
			}
			result.close();
			result=dMeta.getColumns(null,null,"Task","allDayEventPattern");
			if(!result.next())
			{
				System.out.println("ERROR: installed DB-schema not compatible to java classes");
				System.out.println("       Attribute 'allDayEventPattern' in table 'Task' missing");
			}
			result.close();
			result=dMeta.getColumns(null,null,"Task","endTime");
			if(!result.next())
			{
				System.out.println("ERROR: installed DB-schema not compatible to java classes");
				System.out.println("       Attribute 'endTime' in table 'Task' missing");
			}
			result.close();
			result=dMeta.getColumns(null,null,"Task","isPrivate");
			if(!result.next())
			{
				System.out.println("ERROR: installed DB-schema not compatible to java classes");
				System.out.println("       Attribute 'isPrivate' in table 'Task' missing");
			}
			result.close();
			result=dMeta.getColumns(null,null,"Task","calendar_id");
			if(!result.next())
			{
				System.out.println("ERROR: installed DB-schema not compatible to java classes");
				System.out.println("       Attribute 'calendar_id' in table 'Task' missing");
			}
			result.close();
			result=dMeta.getColumns(null,null,"Task","reminderSet");
			if(!result.next())
			{
				System.out.println("ERROR: installed DB-schema not compatible to java classes");
				System.out.println("       Attribute 'reminderSet' in table 'Task' missing");
			}
			result.close();
			result=dMeta.getColumns(null,null,"Task","subject");
			if(!result.next())
			{
				System.out.println("ERROR: installed DB-schema not compatible to java classes");
				System.out.println("       Attribute 'subject' in table 'Task' missing");
			}
			result.close();
			result=dMeta.getColumns(null,null,"Task","importance");
			if(!result.next())
			{
				System.out.println("ERROR: installed DB-schema not compatible to java classes");
				System.out.println("       Attribute 'importance' in table 'Task' missing");
			}
			result.close();
			result=dMeta.getColumns(null,null,"Task","allDayEvent");
			if(!result.next())
			{
				System.out.println("ERROR: installed DB-schema not compatible to java classes");
				System.out.println("       Attribute 'allDayEvent' in table 'Task' missing");
			}
			result.close();
		}
		catch (Exception ex)
		{
		}
	}


}
