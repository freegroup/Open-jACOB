package de.shorti.baseknowledge.objects;

/**
 * Class generated by automatic ClassGenerator
 * Date: Mon Oct 15 15:41:21 GMT+02:00 2001
 */
import de.shorti.db.*;
import java.util.ArrayList;
import java.util.Iterator;
import java.sql.*;

class _dbEntry extends dbObject 
{

	String    id;	// Key
	long      creationTime;
	String    allDayEventPattern;
	String    calendar_id;	// Foreign Key pointing to Table [Calendar], Field [id]
	String    isPrivate;
	String    reminderChannel;	// Foreign Key pointing to Table [CommunicationChannel], Field [id]
	int       reminderSet;
	int       view;
	int       allDayEvent;


	/**
	 * destroy a object in the database
	 */
	public boolean destroy()
	{
		boolean result = false;
		String    _key   = id;
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbEntry.destroyInstance");
			try
			{
					stmt.executeUpdate( "DELETE FROM Entry WHERE id='"+_key+"'");
					result = true;
					id     = null;
			}
			catch(Exception exc)
			{
				System.err.println(exc);
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
		}
		return result;
	}



	/**
	 * Method:      getId()
	 * Description: 
	 * Returns:     String
	 */
	public String getId()
	{
		return id;
	}

	/**
	 * Method:      getCreationTime()
	 * Description: 
	 * Returns:     long
	 */
	public long getCreationTime()
	{
		return creationTime;
	}

	/**
	 * Method:      setCreationTime(long _creationTime, boolean _autoCommit)
	 * Description: 
	 * Returns:     void
	 */
	public void setCreationTime(long _creationTime, boolean _autoCommit)
	{
		creationTime=_creationTime;
		if(_autoCommit)
		{
			commit();
		}
	}

	/**
	 * Method:      getAllDayEventPattern()
	 * Description: 
	 * Returns:     String
	 */
	public String getAllDayEventPattern()
	{
		return allDayEventPattern;
	}

	/**
	 * Method:      setAllDayEventPattern(String _allDayEventPattern, boolean _autoCommit)
	 * Description: 
	 * Returns:     void
	 */
	public void setAllDayEventPattern(String _allDayEventPattern, boolean _autoCommit)
	{
		allDayEventPattern=_allDayEventPattern;
		if(_autoCommit)
		{
			commit();
		}
	}

	/**
	 * Method:      getIsPrivate()
	 * Description: 
	 * Returns:     String
	 */
	public String getIsPrivate()
	{
		return isPrivate;
	}

	/**
	 * Method:      setIsPrivate(String _isPrivate, boolean _autoCommit)
	 * Description: 
	 * Returns:     void
	 */
	public void setIsPrivate(String _isPrivate, boolean _autoCommit)
	{
		isPrivate=_isPrivate;
		if(_autoCommit)
		{
			commit();
		}
	}

	/**
	 * Method:      getReminderSet()
	 * Description: 
	 * Returns:     int
	 */
	public int getReminderSet()
	{
		return reminderSet;
	}

	/**
	 * Method:      setReminderSet(int _reminderSet, boolean _autoCommit)
	 * Description: 
	 * Returns:     void
	 */
	public void setReminderSet(int _reminderSet, boolean _autoCommit)
	{
		reminderSet=_reminderSet;
		if(_autoCommit)
		{
			commit();
		}
	}

	/**
	 * Method:      getView()
	 * Description: 
	 * Returns:     int
	 */
	public int getView()
	{
		return view;
	}

	/**
	 * Method:      setView(int _view, boolean _autoCommit)
	 * Description: 
	 * Returns:     void
	 */
	public void setView(int _view, boolean _autoCommit)
	{
		view=_view;
		if(_autoCommit)
		{
			commit();
		}
	}

	/**
	 * Method:      getAllDayEvent()
	 * Description: 
	 * Returns:     int
	 */
	public int getAllDayEvent()
	{
		return allDayEvent;
	}

	/**
	 * Method:      setAllDayEvent(int _allDayEvent, boolean _autoCommit)
	 * Description: 
	 * Returns:     void
	 */
	public void setAllDayEvent(int _allDayEvent, boolean _autoCommit)
	{
		allDayEvent=_allDayEvent;
		if(_autoCommit)
		{
			commit();
		}
	}

	/**
	 * Method:      getCalendar()
	 * Description: 
	 * Returns:     Calendar
	 */
	public Calendar getCalendar()
	{
		return Calendar.findById(calendar_id);
	}

	/**
	 * Method:      setCalendar()
	 * Description: 
	 * Returns:     void
	 */
	public void setCalendar(Calendar _foreigner, boolean _autocommit)
	{
		calendar_id= _foreigner.getId();
		if (_autocommit == true)
			commit();
	}

	/**
	 * Method:      getReminderChannel()
	 * Description: 
	 * Returns:     CommunicationChannel
	 */
	public CommunicationChannel getReminderChannel()
	{
		return CommunicationChannel.findById(reminderChannel);
	}

	/**
	 * Method:      setReminderChannel()
	 * Description: 
	 * Returns:     void
	 */
	public void setReminderChannel(CommunicationChannel _foreigner, boolean _autocommit)
	{
		reminderChannel= _foreigner.getId();
		if (_autocommit == true)
			commit();
	}

	/**
	 *  Method:      findById(String _id)
	 *  Description: 
	 *  Returns:     Entry
	 */
	public static Entry findById(String _id)
	{
		Entry result = null;
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbEntry.findById");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT id, creationTime, allDayEventPattern, calendar_id, isPrivate, reminderChannel, reminderSet, view, allDayEvent FROM Entry WHERE id='"+toSQL(_id)+"'"+" order by generatedId desc");
				if(s.next())
				{
					result = new Entry();
					result.id= s.getString(1);
					result.creationTime= s.getLong(2);
					result.allDayEventPattern= s.getString(3);
					result.calendar_id= s.getString(4);
					result.isPrivate= s.getString(5);
					result.reminderChannel= s.getString(6);
					result.reminderSet= s.getInt(7);
					result.view= s.getInt(8);
					result.allDayEvent= s.getInt(9);
				}
			}
			catch(Exception exc)
			{
				System.err.println(exc);
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
		}
		return result;
	}

	/**
	 *  Method:      findByCreationTime(long _creationTime)
	 *  Description: 
	 *  Returns:     ArrayList<Entry>
	 */
	public static ArrayList findByCreationTime(long _creationTime)
	{
		ArrayList result = new ArrayList();
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbEntry.findByCreationTime");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT id, creationTime, allDayEventPattern, calendar_id, isPrivate, reminderChannel, reminderSet, view, allDayEvent FROM Entry WHERE creationTime="+_creationTime+" order by generatedId desc");
				while(s.next())
				{
					Entry newObject = new Entry();
					newObject.id=s.getString(1);
					newObject.creationTime=s.getLong(2);
					newObject.allDayEventPattern=s.getString(3);
					newObject.calendar_id=s.getString(4);
					newObject.isPrivate=s.getString(5);
					newObject.reminderChannel=s.getString(6);
					newObject.reminderSet=s.getInt(7);
					newObject.view=s.getInt(8);
					newObject.allDayEvent=s.getInt(9);
					result.add(newObject);
				}
			}
			catch(Exception exc)
			{
				System.err.println(exc);
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
		}
		return result;
	}

	/**
	 *  Method:      findByAllDayEventPattern(String _allDayEventPattern)
	 *  Description: 
	 *  Returns:     ArrayList<Entry>
	 */
	public static ArrayList findByAllDayEventPattern(String _allDayEventPattern)
	{
		ArrayList result = new ArrayList();
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbEntry.findByAllDayEventPattern");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT id, creationTime, allDayEventPattern, calendar_id, isPrivate, reminderChannel, reminderSet, view, allDayEvent FROM Entry WHERE allDayEventPattern='"+toSQL(_allDayEventPattern)+"'"+" order by generatedId desc");
				while(s.next())
				{
					Entry newObject = new Entry();
					newObject.id=s.getString(1);
					newObject.creationTime=s.getLong(2);
					newObject.allDayEventPattern=s.getString(3);
					newObject.calendar_id=s.getString(4);
					newObject.isPrivate=s.getString(5);
					newObject.reminderChannel=s.getString(6);
					newObject.reminderSet=s.getInt(7);
					newObject.view=s.getInt(8);
					newObject.allDayEvent=s.getInt(9);
					result.add(newObject);
				}
			}
			catch(Exception exc)
			{
				System.err.println(exc);
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
		}
		return result;
	}

	/**
	 *  Method:      findByCalendar(_dbCalendar _calendar)
	 *  Description: 
	 *  Returns:     ArrayList<Entry>
	 */
	public static ArrayList findByCalendar(_dbCalendar _calendar)
	{
		ArrayList result = new ArrayList();
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbEntry.findByCalendar");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT id, creationTime, allDayEventPattern, calendar_id, isPrivate, reminderChannel, reminderSet, view, allDayEvent FROM Entry WHERE calendar_id='"+toSQL(((_calendar==null)?"":_calendar.getId()))+"'"+" order by generatedId desc");
				while(s.next())
				{
					Entry newObject = new Entry();
					newObject.id=s.getString(1);
					newObject.creationTime=s.getLong(2);
					newObject.allDayEventPattern=s.getString(3);
					newObject.calendar_id=s.getString(4);
					newObject.isPrivate=s.getString(5);
					newObject.reminderChannel=s.getString(6);
					newObject.reminderSet=s.getInt(7);
					newObject.view=s.getInt(8);
					newObject.allDayEvent=s.getInt(9);
					result.add(newObject);
				}
			}
			catch(Exception exc)
			{
				System.err.println(exc);
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
		}
		return result;
	}

	/**
	 *  Method:      findByIsPrivate(String _isPrivate)
	 *  Description: 
	 *  Returns:     ArrayList<Entry>
	 */
	public static ArrayList findByIsPrivate(String _isPrivate)
	{
		ArrayList result = new ArrayList();
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbEntry.findByIsPrivate");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT id, creationTime, allDayEventPattern, calendar_id, isPrivate, reminderChannel, reminderSet, view, allDayEvent FROM Entry WHERE isPrivate='"+toSQL(_isPrivate)+"'"+" order by generatedId desc");
				while(s.next())
				{
					Entry newObject = new Entry();
					newObject.id=s.getString(1);
					newObject.creationTime=s.getLong(2);
					newObject.allDayEventPattern=s.getString(3);
					newObject.calendar_id=s.getString(4);
					newObject.isPrivate=s.getString(5);
					newObject.reminderChannel=s.getString(6);
					newObject.reminderSet=s.getInt(7);
					newObject.view=s.getInt(8);
					newObject.allDayEvent=s.getInt(9);
					result.add(newObject);
				}
			}
			catch(Exception exc)
			{
				System.err.println(exc);
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
		}
		return result;
	}

	/**
	 *  Method:      findByReminderChannel(_dbCommunicationChannel _reminderChannel)
	 *  Description: 
	 *  Returns:     ArrayList<Entry>
	 */
	public static ArrayList findByReminderChannel(_dbCommunicationChannel _reminderChannel)
	{
		ArrayList result = new ArrayList();
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbEntry.findByReminderChannel");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT id, creationTime, allDayEventPattern, calendar_id, isPrivate, reminderChannel, reminderSet, view, allDayEvent FROM Entry WHERE reminderChannel='"+toSQL(((_reminderChannel==null)?"":_reminderChannel.getId()))+"'"+" order by generatedId desc");
				while(s.next())
				{
					Entry newObject = new Entry();
					newObject.id=s.getString(1);
					newObject.creationTime=s.getLong(2);
					newObject.allDayEventPattern=s.getString(3);
					newObject.calendar_id=s.getString(4);
					newObject.isPrivate=s.getString(5);
					newObject.reminderChannel=s.getString(6);
					newObject.reminderSet=s.getInt(7);
					newObject.view=s.getInt(8);
					newObject.allDayEvent=s.getInt(9);
					result.add(newObject);
				}
			}
			catch(Exception exc)
			{
				System.err.println(exc);
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
		}
		return result;
	}

	/**
	 *  Method:      findByReminderSet(int _reminderSet)
	 *  Description: 
	 *  Returns:     ArrayList<Entry>
	 */
	public static ArrayList findByReminderSet(int _reminderSet)
	{
		ArrayList result = new ArrayList();
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbEntry.findByReminderSet");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT id, creationTime, allDayEventPattern, calendar_id, isPrivate, reminderChannel, reminderSet, view, allDayEvent FROM Entry WHERE reminderSet="+_reminderSet+" order by generatedId desc");
				while(s.next())
				{
					Entry newObject = new Entry();
					newObject.id=s.getString(1);
					newObject.creationTime=s.getLong(2);
					newObject.allDayEventPattern=s.getString(3);
					newObject.calendar_id=s.getString(4);
					newObject.isPrivate=s.getString(5);
					newObject.reminderChannel=s.getString(6);
					newObject.reminderSet=s.getInt(7);
					newObject.view=s.getInt(8);
					newObject.allDayEvent=s.getInt(9);
					result.add(newObject);
				}
			}
			catch(Exception exc)
			{
				System.err.println(exc);
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
		}
		return result;
	}

	/**
	 *  Method:      findByView(int _view)
	 *  Description: 
	 *  Returns:     ArrayList<Entry>
	 */
	public static ArrayList findByView(int _view)
	{
		ArrayList result = new ArrayList();
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbEntry.findByView");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT id, creationTime, allDayEventPattern, calendar_id, isPrivate, reminderChannel, reminderSet, view, allDayEvent FROM Entry WHERE view="+_view+" order by generatedId desc");
				while(s.next())
				{
					Entry newObject = new Entry();
					newObject.id=s.getString(1);
					newObject.creationTime=s.getLong(2);
					newObject.allDayEventPattern=s.getString(3);
					newObject.calendar_id=s.getString(4);
					newObject.isPrivate=s.getString(5);
					newObject.reminderChannel=s.getString(6);
					newObject.reminderSet=s.getInt(7);
					newObject.view=s.getInt(8);
					newObject.allDayEvent=s.getInt(9);
					result.add(newObject);
				}
			}
			catch(Exception exc)
			{
				System.err.println(exc);
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
		}
		return result;
	}

	/**
	 *  Method:      findByAllDayEvent(int _allDayEvent)
	 *  Description: 
	 *  Returns:     ArrayList<Entry>
	 */
	public static ArrayList findByAllDayEvent(int _allDayEvent)
	{
		ArrayList result = new ArrayList();
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbEntry.findByAllDayEvent");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT id, creationTime, allDayEventPattern, calendar_id, isPrivate, reminderChannel, reminderSet, view, allDayEvent FROM Entry WHERE allDayEvent="+_allDayEvent+" order by generatedId desc");
				while(s.next())
				{
					Entry newObject = new Entry();
					newObject.id=s.getString(1);
					newObject.creationTime=s.getLong(2);
					newObject.allDayEventPattern=s.getString(3);
					newObject.calendar_id=s.getString(4);
					newObject.isPrivate=s.getString(5);
					newObject.reminderChannel=s.getString(6);
					newObject.reminderSet=s.getInt(7);
					newObject.view=s.getInt(8);
					newObject.allDayEvent=s.getInt(9);
					result.add(newObject);
				}
			}
			catch(Exception exc)
			{
				System.err.println(exc);
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
		}
		return result;
	}

	/**
	 * returns boolean
	 */
	public boolean commit()
	{
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbEntry.commit");
			try
			{
				stmt.executeUpdate( "UPDATE Entry set creationTime= "+creationTime+", allDayEventPattern= '"+toSQL(allDayEventPattern)+"', calendar_id= '"+toSQL(calendar_id)+"', isPrivate= '"+toSQL(isPrivate)+"', reminderChannel= '"+toSQL(reminderChannel)+"', reminderSet= "+reminderSet+", view= "+view+", allDayEvent= "+allDayEvent+" WHERE id='"+id+"'");
			}
			catch(Exception exc)
			{
				System.err.println(exc);
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
		}
		return true;
	}


	/**
	 * returns ArrayList<Entry>
	 */
	public static ArrayList getAll()
	{
		ArrayList result = new ArrayList();
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbEntry.getAll");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT id, creationTime, allDayEventPattern, calendar_id, isPrivate, reminderChannel, reminderSet, view, allDayEvent FROM Entry order by generatedId desc");
				while(s.next())
				{
					Entry newObject = new Entry();
					newObject.id=s.getString(1);
					newObject.creationTime=s.getLong(2);
					newObject.allDayEventPattern=s.getString(3);
					newObject.calendar_id=s.getString(4);
					newObject.isPrivate=s.getString(5);
					newObject.reminderChannel=s.getString(6);
					newObject.reminderSet=s.getInt(7);
					newObject.view=s.getInt(8);
					newObject.allDayEvent=s.getInt(9);
					result.add(newObject);
				}
			}
			catch(Exception exc)
			{
				System.err.println(exc);
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
		}
		return result;
	}


	/**
	 * create a new object in the database
	 */
	static public Entry createInstance( long  _creationTime, String  _allDayEventPattern, _dbCalendar _calendar, String  _isPrivate, _dbCommunicationChannel _reminderChannel, int  _reminderSet, int  _view, int  _allDayEvent )
	{
		Entry result = null;
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbEntry.createInstance");
			try
			{
				String nextGUID = new java.rmi.server.UID().toString();
				stmt.executeUpdate( "INSERT INTO Entry ( id, creationTime, allDayEventPattern, calendar_id, isPrivate, reminderChannel, reminderSet, view, allDayEvent) VALUES ('"+nextGUID+"', "+_creationTime+",  '"+toSQL(_allDayEventPattern)+"',  '"+((_calendar==null)?"":_calendar.getId())+"',  '"+toSQL(_isPrivate)+"',  '"+((_reminderChannel==null)?"":_reminderChannel.getId())+"', "+_reminderSet+", "+_view+", "+_allDayEvent+")");
				result = new Entry();
				result.id= nextGUID;
				result.creationTime= _creationTime;
				result.allDayEventPattern= _allDayEventPattern;
				result.calendar_id= (_calendar==null)?"":_calendar.getId();
				result.isPrivate= _isPrivate;
				result.reminderChannel= (_reminderChannel==null)?"":_reminderChannel.getId();
				result.reminderSet= _reminderSet;
				result.view= _view;
				result.allDayEvent= _allDayEvent;
			}
			catch(Exception exc)
			{
				System.err.println(exc);
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
		}
		return result;
	}


	/**
	 * create a new object in the database
	 */
	static public void newInstance( long  _creationTime, String  _allDayEventPattern, _dbCalendar _calendar, String  _isPrivate, _dbCommunicationChannel _reminderChannel, int  _reminderSet, int  _view, int  _allDayEvent )
	{
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbEntry.newInstance");
			try
			{
				String nextGUID = new java.rmi.server.UID().toString();
				stmt.executeUpdate( "INSERT INTO Entry ( id, creationTime, allDayEventPattern, calendar_id, isPrivate, reminderChannel, reminderSet, view, allDayEvent) VALUES ('"+nextGUID+"', "+_creationTime+",  '"+toSQL(_allDayEventPattern)+"',  '"+((_calendar==null)?"":_calendar.getId())+"',  '"+toSQL(_isPrivate)+"',  '"+((_reminderChannel==null)?"":_reminderChannel.getId())+"', "+_reminderSet+", "+_view+", "+_allDayEvent+")");
			}
			catch(Exception exc)
			{
				System.err.println(exc);
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
		}
	}


	/**
	 * destroy a object in the database
	 */
	static public boolean destroyInstance( String  _key)
	{
		boolean result = false;
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbEntry.destroyInstance");
			try
			{
					stmt.executeUpdate( "DELETE FROM Entry WHERE id='"+_key+"'");
					result = true;
			}
			catch(Exception exc)
			{
				System.err.println(exc);
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
		}
		return result;
	}


	/**
	 * destroy ALL objects in the database
	 */
	static public boolean destroyAll()
	{
		boolean result = false;
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbEntry.destroyAll");
			try
			{
					stmt.executeUpdate("DELETE from Entry" );
					result = true;
			}
			catch(Exception exc)
			{
				System.err.println(exc);
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
		}
		return result;
	}


	/**
	 */
	public String toString()
	{
		StringBuffer result = new StringBuffer(1024);
		result.append(id);
		result.append("|");
		result.append(creationTime);
		result.append("|");
		result.append(allDayEventPattern);
		result.append("|");
		result.append(calendar_id);
		result.append("|");
		result.append(isPrivate);
		result.append("|");
		result.append(reminderChannel);
		result.append("|");
		result.append(reminderSet);
		result.append("|");
		result.append(view);
		result.append("|");
		result.append(allDayEvent);
		return result.toString();
	}


	/**
	 * init the class
	 */
	static
	{
		try
		{
			DatabaseMetaData dMeta = ConnectionManager.getValid().getMetaData ();
			ResultSet result;
			result=dMeta.getColumns(null,null,"Entry","id");
			if(!result.next())
			{
				System.out.println("ERROR: installed DB-schema not compatible to java classes");
				System.out.println("       Attribute 'id' in table 'Entry' missing");
			}
			result.close();
			result=dMeta.getColumns(null,null,"Entry","creationTime");
			if(!result.next())
			{
				System.out.println("ERROR: installed DB-schema not compatible to java classes");
				System.out.println("       Attribute 'creationTime' in table 'Entry' missing");
			}
			result.close();
			result=dMeta.getColumns(null,null,"Entry","allDayEventPattern");
			if(!result.next())
			{
				System.out.println("ERROR: installed DB-schema not compatible to java classes");
				System.out.println("       Attribute 'allDayEventPattern' in table 'Entry' missing");
			}
			result.close();
			result=dMeta.getColumns(null,null,"Entry","calendar_id");
			if(!result.next())
			{
				System.out.println("ERROR: installed DB-schema not compatible to java classes");
				System.out.println("       Attribute 'calendar_id' in table 'Entry' missing");
			}
			result.close();
			result=dMeta.getColumns(null,null,"Entry","isPrivate");
			if(!result.next())
			{
				System.out.println("ERROR: installed DB-schema not compatible to java classes");
				System.out.println("       Attribute 'isPrivate' in table 'Entry' missing");
			}
			result.close();
			result=dMeta.getColumns(null,null,"Entry","reminderChannel");
			if(!result.next())
			{
				System.out.println("ERROR: installed DB-schema not compatible to java classes");
				System.out.println("       Attribute 'reminderChannel' in table 'Entry' missing");
			}
			result.close();
			result=dMeta.getColumns(null,null,"Entry","reminderSet");
			if(!result.next())
			{
				System.out.println("ERROR: installed DB-schema not compatible to java classes");
				System.out.println("       Attribute 'reminderSet' in table 'Entry' missing");
			}
			result.close();
			result=dMeta.getColumns(null,null,"Entry","view");
			if(!result.next())
			{
				System.out.println("ERROR: installed DB-schema not compatible to java classes");
				System.out.println("       Attribute 'view' in table 'Entry' missing");
			}
			result.close();
			result=dMeta.getColumns(null,null,"Entry","allDayEvent");
			if(!result.next())
			{
				System.out.println("ERROR: installed DB-schema not compatible to java classes");
				System.out.println("       Attribute 'allDayEvent' in table 'Entry' missing");
			}
			result.close();
		}
		catch (Exception ex)
		{
		}
	}


}
