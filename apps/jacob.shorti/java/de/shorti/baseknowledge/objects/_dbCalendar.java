package de.shorti.baseknowledge.objects;

/**
 * Class generated by automatic ClassGenerator
 * Date: Sat May 11 21:15:22 GMT+02:00 2002
 */
import de.shorti.db.*;
import java.util.ArrayList;
import java.util.Iterator;
import java.sql.*;

class _dbCalendar extends dbObject 
{

	int       GMTOffset;
	long      creationTime;


	/**
	 * destroy a object in the database
	 */
	public boolean destroy()
	{
		boolean result = false;
		String    _key   = id;
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbCalendar.destroyInstance");
			try
			{
					stmt.executeUpdate( "DELETE FROM Calendar WHERE id='"+_key+"'");
					result = true;
					removeFromCache(this);
					id     = null;
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}



	/**
	 * Method:      getGMTOffset()
	 * Description: 
	 * Returns:     int
	 */
	public int getGMTOffset()
	{
		return GMTOffset;
	}

	/**
	 * Method:      setGMTOffset(int _GMTOffset, boolean _autoCommit)
	 * Description: 
	 * Returns:     void
	 */
	public void setGMTOffset(int _GMTOffset, boolean _autoCommit)
	{
		GMTOffset=_GMTOffset;
		if(_autoCommit)
		{
			commit();
		}
	}

	/**
	 * Method:      getCreationTime()
	 * Description: 
	 * Returns:     long
	 */
	public long getCreationTime()
	{
		return creationTime;
	}

	/**
	 * Method:      setCreationTime(long _creationTime, boolean _autoCommit)
	 * Description: 
	 * Returns:     void
	 */
	public void setCreationTime(long _creationTime, boolean _autoCommit)
	{
		creationTime=_creationTime;
		if(_autoCommit)
		{
			commit();
		}
	}

	/**
	 * Method:      getId()
	 * Description: 
	 * Returns:     String
	 */
	public String getId()
	{
		return id;
	}

	/**
	 *  Method:      getAppointments()
	 *  Description:                              
	 *  Returns:     ArrayList<Appointment>
	 */
	public ArrayList getAppointments()
	{
		return _dbAppointment.findByCalendar(this);
	}


	/**
	 *  Method:      getEvents()
	 *  Description:                              
	 *  Returns:     ArrayList<Event>
	 */
	public ArrayList getEvents()
	{
		return _dbEvent.findByCalendar(this);
	}


	/**
	 *  Method:      getShortiUsers()
	 *  Description:                              
	 *  Returns:     ArrayList<ShortiUser>
	 */
	public ArrayList getShortiUsers()
	{
		return _dbShortiUser.findByCalendar(this);
	}


	/**
	 *  Method:      getTasks()
	 *  Description:                              
	 *  Returns:     ArrayList<Task>
	 */
	public ArrayList getTasks()
	{
		return _dbTask.findByCalendar(this);
	}


	/**
	 *  Method:      findByGMTOffset(int _GMTOffset)
	 *  Description: 
	 *  Returns:     ArrayList<Calendar>
	 */
	public static ArrayList findByGMTOffset(int _GMTOffset)
	{
		ArrayList result = new ArrayList();
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbCalendar.findByGMTOffset");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT id, GMTOffset, creationTime FROM Calendar WHERE GMTOffset="+_GMTOffset+" order by generatedId desc");
				while(s.next())
				{
					String _tmpID = s.getString(1);
					Calendar newObject = (Calendar)getFromCache(_tmpID);
					if(newObject ==null)
					{
						newObject = new Calendar();
						newObject.GMTOffset=s.getInt(2);
						newObject.creationTime=s.getLong(3);
						newObject.id=_tmpID;
						putToCache(newObject);
					}
					result.add(newObject);
				}
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}

	/**
	 *  Method:      findByCreationTime(long _creationTime)
	 *  Description: 
	 *  Returns:     ArrayList<Calendar>
	 */
	public static ArrayList findByCreationTime(long _creationTime)
	{
		ArrayList result = new ArrayList();
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbCalendar.findByCreationTime");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT id, GMTOffset, creationTime FROM Calendar WHERE creationTime="+_creationTime+" order by generatedId desc");
				while(s.next())
				{
					String _tmpID = s.getString(1);
					Calendar newObject = (Calendar)getFromCache(_tmpID);
					if(newObject ==null)
					{
						newObject = new Calendar();
						newObject.GMTOffset=s.getInt(2);
						newObject.creationTime=s.getLong(3);
						newObject.id=_tmpID;
						putToCache(newObject);
					}
					result.add(newObject);
				}
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}

	/**
	 *  Method:      findById(String _id)
	 *  Description: 
	 *  Returns:     Calendar
	 */
	public static Calendar findById(String _id)
	{
		Calendar result = (Calendar)getFromCache(_id);
		if(result!=null) return result;
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbCalendar.findById");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT id, GMTOffset, creationTime FROM Calendar WHERE id='"+toSQL(_id)+"'"+" order by generatedId desc");
				if(s.next())
				{
					result = new Calendar();
					result.GMTOffset= s.getInt(2);
					result.creationTime= s.getLong(3);
					result.id= _id;
					putToCache(result);
				}
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}

	/**
	 * returns boolean
	 */
	public boolean commit()
	{
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbCalendar.commit");
			try
			{
				stmt.executeUpdate( "UPDATE Calendar set GMTOffset= "+GMTOffset+", creationTime= "+creationTime+" WHERE id='"+id+"'");
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return true;
	}


	/**
	 * returns ArrayList<Calendar>
	 */
	public static ArrayList getAll()
	{
		ArrayList result = new ArrayList();
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbCalendar.getAll");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT id, GMTOffset, creationTime FROM Calendar order by generatedId desc");
				while(s.next())
				{
					String _tmpID = s.getString(1);
					Calendar newObject = (Calendar)getFromCache(_tmpID);
					if(newObject ==null)
					{
						newObject = new Calendar();
						newObject.GMTOffset=s.getInt(2);
						newObject.creationTime=s.getLong(3);
						newObject.id=_tmpID;
						putToCache(newObject);
					}
					result.add(newObject);
				}
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}


	/**
	 * create a new object in the database
	 */
	static public Calendar createInstance( int  _GMTOffset, long  _creationTime )
	{
		Calendar result = null;
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbCalendar.createInstance");
			try
			{
				String nextGUID = new java.rmi.server.UID().toString();
				stmt.executeUpdate( "INSERT INTO Calendar ( GMTOffset, creationTime, id) VALUES ("+_GMTOffset+", "+_creationTime+", '"+nextGUID+"')");
				result = new Calendar();
				result.GMTOffset= _GMTOffset;
				result.creationTime= _creationTime;
				result.id= nextGUID;
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}


	/**
	 * create a new object in the database
	 */
	static public void newInstance( int  _GMTOffset, long  _creationTime )
	{
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbCalendar.newInstance");
			try
			{
				String nextGUID = new java.rmi.server.UID().toString();
				stmt.executeUpdate( "INSERT INTO Calendar ( GMTOffset, creationTime, id) VALUES ("+_GMTOffset+", "+_creationTime+", '"+nextGUID+"')");
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
	}


	/**
	 * destroy a object in the database
	 */
	static public boolean destroyInstance( String  _key)
	{
		boolean result = false;
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbCalendar.destroyInstance");
			try
			{
					stmt.executeUpdate( "DELETE FROM Calendar WHERE id='"+_key+"'");
					result = true;
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}


	/**
	 * destroy ALL objects in the database
	 */
	static public boolean destroyAll()
	{
		boolean result = false;
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbCalendar.destroyAll");
			try
			{
					stmt.executeUpdate("DELETE from Calendar" );
					result = true;
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}


	/**
	 */
	public String toString()
	{
		StringBuffer result = new StringBuffer(1024);
		result.append(GMTOffset);
		result.append("|");
		result.append(creationTime);
		result.append("|");
		result.append(id);
		return result.toString();
	}


	/**
	 * init the class
	 */
	static
	{
		try
		{
			DatabaseMetaData dMeta = ConnectionManager.getValid().getMetaData ();
			ResultSet result;
			result=dMeta.getColumns(null,null,"Calendar","GMTOffset");
			if(!result.next())
			{
				System.out.println("ERROR: installed DB-schema not compatible to java classes");
				System.out.println("       Attribute 'GMTOffset' in table 'Calendar' missing");
			}
			result.close();
			result=dMeta.getColumns(null,null,"Calendar","creationTime");
			if(!result.next())
			{
				System.out.println("ERROR: installed DB-schema not compatible to java classes");
				System.out.println("       Attribute 'creationTime' in table 'Calendar' missing");
			}
			result.close();
			result=dMeta.getColumns(null,null,"Calendar","id");
			if(!result.next())
			{
				System.out.println("ERROR: installed DB-schema not compatible to java classes");
				System.out.println("       Attribute 'id' in table 'Calendar' missing");
			}
			result.close();
		}
		catch (Exception ex)
		{
		}
	}


}
