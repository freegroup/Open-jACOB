package de.shorti.baseknowledge.objects;

/**
 * Class generated by automatic ClassGenerator
 * Date: Sat May 11 21:15:22 GMT+02:00 2002
 */
import de.shorti.db.*;
import java.util.ArrayList;
import java.util.Iterator;
import java.sql.*;

class _dbBillReminder extends dbObject 
{

	int       reminderAmount;
	String    bill_id;	// Foreign Key pointing to Table [Bill], Field [id]
	long      createTime;


	/**
	 * destroy a object in the database
	 */
	public boolean destroy()
	{
		boolean result = false;
		String    _key   = id;
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbBillReminder.destroyInstance");
			try
			{
					stmt.executeUpdate( "DELETE FROM BillReminder WHERE id='"+_key+"'");
					result = true;
					removeFromCache(this);
					id     = null;
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}



	/**
	 * Method:      getReminderAmount()
	 * Description: 
	 * Returns:     int
	 */
	public int getReminderAmount()
	{
		return reminderAmount;
	}

	/**
	 * Method:      setReminderAmount(int _reminderAmount, boolean _autoCommit)
	 * Description: 
	 * Returns:     void
	 */
	public void setReminderAmount(int _reminderAmount, boolean _autoCommit)
	{
		reminderAmount=_reminderAmount;
		if(_autoCommit)
		{
			commit();
		}
	}

	/**
	 * Method:      getCreateTime()
	 * Description: 
	 * Returns:     long
	 */
	public long getCreateTime()
	{
		return createTime;
	}

	/**
	 * Method:      setCreateTime(long _createTime, boolean _autoCommit)
	 * Description: 
	 * Returns:     void
	 */
	public void setCreateTime(long _createTime, boolean _autoCommit)
	{
		createTime=_createTime;
		if(_autoCommit)
		{
			commit();
		}
	}

	/**
	 * Method:      getId()
	 * Description: 
	 * Returns:     String
	 */
	public String getId()
	{
		return id;
	}

	/**
	 * Method:      getBill()
	 * Description: 
	 * Returns:     Bill
	 */
	public Bill getBill()
	{
		return Bill.findById(bill_id);
	}

	/**
	 * Method:      setBill()
	 * Description: 
	 * Returns:     void
	 */
	public void setBill(Bill _foreigner, boolean _autocommit)
	{
		bill_id= _foreigner.getId();
		if (_autocommit == true)
			commit();
	}

	/**
	 *  Method:      findByReminderAmount(int _reminderAmount)
	 *  Description: 
	 *  Returns:     ArrayList<BillReminder>
	 */
	public static ArrayList findByReminderAmount(int _reminderAmount)
	{
		ArrayList result = new ArrayList();
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbBillReminder.findByReminderAmount");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT id, reminderAmount, bill_id, createTime FROM BillReminder WHERE reminderAmount="+_reminderAmount+" order by generatedId desc");
				while(s.next())
				{
					String _tmpID = s.getString(1);
					BillReminder newObject = (BillReminder)getFromCache(_tmpID);
					if(newObject ==null)
					{
						newObject = new BillReminder();
						newObject.reminderAmount=s.getInt(2);
						newObject.bill_id=s.getString(3);
						newObject.createTime=s.getLong(4);
						newObject.id=_tmpID;
						putToCache(newObject);
					}
					result.add(newObject);
				}
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}

	/**
	 *  Method:      findByBill(_dbBill _bill)
	 *  Description: 
	 *  Returns:     ArrayList<BillReminder>
	 */
	public static ArrayList findByBill(_dbBill _bill)
	{
		ArrayList result = new ArrayList();
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbBillReminder.findByBill");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT id, reminderAmount, bill_id, createTime FROM BillReminder WHERE bill_id='"+toSQL(((_bill==null)?"":_bill.getId()))+"'"+" order by generatedId desc");
				while(s.next())
				{
					String _tmpID = s.getString(1);
					BillReminder newObject = (BillReminder)getFromCache(_tmpID);
					if(newObject ==null)
					{
						newObject = new BillReminder();
						newObject.reminderAmount=s.getInt(2);
						newObject.bill_id=s.getString(3);
						newObject.createTime=s.getLong(4);
						newObject.id=_tmpID;
						putToCache(newObject);
					}
					result.add(newObject);
				}
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}

	/**
	 *  Method:      findByCreateTime(long _createTime)
	 *  Description: 
	 *  Returns:     ArrayList<BillReminder>
	 */
	public static ArrayList findByCreateTime(long _createTime)
	{
		ArrayList result = new ArrayList();
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbBillReminder.findByCreateTime");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT id, reminderAmount, bill_id, createTime FROM BillReminder WHERE createTime="+_createTime+" order by generatedId desc");
				while(s.next())
				{
					String _tmpID = s.getString(1);
					BillReminder newObject = (BillReminder)getFromCache(_tmpID);
					if(newObject ==null)
					{
						newObject = new BillReminder();
						newObject.reminderAmount=s.getInt(2);
						newObject.bill_id=s.getString(3);
						newObject.createTime=s.getLong(4);
						newObject.id=_tmpID;
						putToCache(newObject);
					}
					result.add(newObject);
				}
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}

	/**
	 *  Method:      findById(String _id)
	 *  Description: 
	 *  Returns:     BillReminder
	 */
	public static BillReminder findById(String _id)
	{
		BillReminder result = (BillReminder)getFromCache(_id);
		if(result!=null) return result;
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbBillReminder.findById");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT id, reminderAmount, bill_id, createTime FROM BillReminder WHERE id='"+toSQL(_id)+"'"+" order by generatedId desc");
				if(s.next())
				{
					result = new BillReminder();
					result.reminderAmount= s.getInt(2);
					result.bill_id= s.getString(3);
					result.createTime= s.getLong(4);
					result.id= _id;
					putToCache(result);
				}
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}

	/**
	 * returns boolean
	 */
	public boolean commit()
	{
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbBillReminder.commit");
			try
			{
				stmt.executeUpdate( "UPDATE BillReminder set reminderAmount= "+reminderAmount+", bill_id= '"+toSQL(bill_id)+"', createTime= "+createTime+" WHERE id='"+id+"'");
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return true;
	}


	/**
	 * returns ArrayList<BillReminder>
	 */
	public static ArrayList getAll()
	{
		ArrayList result = new ArrayList();
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbBillReminder.getAll");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT id, reminderAmount, bill_id, createTime FROM BillReminder order by generatedId desc");
				while(s.next())
				{
					String _tmpID = s.getString(1);
					BillReminder newObject = (BillReminder)getFromCache(_tmpID);
					if(newObject ==null)
					{
						newObject = new BillReminder();
						newObject.reminderAmount=s.getInt(2);
						newObject.bill_id=s.getString(3);
						newObject.createTime=s.getLong(4);
						newObject.id=_tmpID;
						putToCache(newObject);
					}
					result.add(newObject);
				}
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}


	/**
	 * create a new object in the database
	 */
	static public BillReminder createInstance( int  _reminderAmount, _dbBill _bill, long  _createTime )
	{
		BillReminder result = null;
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbBillReminder.createInstance");
			try
			{
				String nextGUID = new java.rmi.server.UID().toString();
				stmt.executeUpdate( "INSERT INTO BillReminder ( reminderAmount, bill_id, createTime, id) VALUES ("+_reminderAmount+",  '"+((_bill==null)?"":_bill.getId())+"', "+_createTime+", '"+nextGUID+"')");
				result = new BillReminder();
				result.reminderAmount= _reminderAmount;
				result.bill_id= (_bill==null)?"":_bill.getId();
				result.createTime= _createTime;
				result.id= nextGUID;
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}


	/**
	 * create a new object in the database
	 */
	static public void newInstance( int  _reminderAmount, _dbBill _bill, long  _createTime )
	{
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbBillReminder.newInstance");
			try
			{
				String nextGUID = new java.rmi.server.UID().toString();
				stmt.executeUpdate( "INSERT INTO BillReminder ( reminderAmount, bill_id, createTime, id) VALUES ("+_reminderAmount+",  '"+((_bill==null)?"":_bill.getId())+"', "+_createTime+", '"+nextGUID+"')");
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
	}


	/**
	 * destroy a object in the database
	 */
	static public boolean destroyInstance( String  _key)
	{
		boolean result = false;
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbBillReminder.destroyInstance");
			try
			{
					stmt.executeUpdate( "DELETE FROM BillReminder WHERE id='"+_key+"'");
					result = true;
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}


	/**
	 * destroy ALL objects in the database
	 */
	static public boolean destroyAll()
	{
		boolean result = false;
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbBillReminder.destroyAll");
			try
			{
					stmt.executeUpdate("DELETE from BillReminder" );
					result = true;
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}


	/**
	 */
	public String toString()
	{
		StringBuffer result = new StringBuffer(1024);
		result.append(reminderAmount);
		result.append("|");
		result.append(bill_id);
		result.append("|");
		result.append(createTime);
		result.append("|");
		result.append(id);
		return result.toString();
	}


	/**
	 * init the class
	 */
	static
	{
		try
		{
			DatabaseMetaData dMeta = ConnectionManager.getValid().getMetaData ();
			ResultSet result;
			result=dMeta.getColumns(null,null,"BillReminder","reminderAmount");
			if(!result.next())
			{
				System.out.println("ERROR: installed DB-schema not compatible to java classes");
				System.out.println("       Attribute 'reminderAmount' in table 'BillReminder' missing");
			}
			result.close();
			result=dMeta.getColumns(null,null,"BillReminder","bill_id");
			if(!result.next())
			{
				System.out.println("ERROR: installed DB-schema not compatible to java classes");
				System.out.println("       Attribute 'bill_id' in table 'BillReminder' missing");
			}
			result.close();
			result=dMeta.getColumns(null,null,"BillReminder","createTime");
			if(!result.next())
			{
				System.out.println("ERROR: installed DB-schema not compatible to java classes");
				System.out.println("       Attribute 'createTime' in table 'BillReminder' missing");
			}
			result.close();
			result=dMeta.getColumns(null,null,"BillReminder","id");
			if(!result.next())
			{
				System.out.println("ERROR: installed DB-schema not compatible to java classes");
				System.out.println("       Attribute 'id' in table 'BillReminder' missing");
			}
			result.close();
		}
		catch (Exception ex)
		{
		}
	}


}
