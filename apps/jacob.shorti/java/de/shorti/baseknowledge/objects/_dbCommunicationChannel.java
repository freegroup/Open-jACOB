package de.shorti.baseknowledge.objects;

/**
 * Class generated by automatic ClassGenerator
 * Date: Sat May 11 21:15:21 GMT+02:00 2002
 */
import de.shorti.db.*;
import java.util.ArrayList;
import java.util.Iterator;
import java.sql.*;

class _dbCommunicationChannel extends dbObject 
{

	int       isAdmin;
	int       lockStatus;
	String    connectionString;
	String    className;
	String    shortiUser_id;	// Foreign Key pointing to Table [ShortiUser], Field [id]


	/**
	 * destroy a object in the database
	 */
	public boolean destroy()
	{
		boolean result = false;
		String    _key   = id;
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbCommunicationChannel.destroyInstance");
			try
			{
					stmt.executeUpdate( "DELETE FROM CommunicationChannel WHERE id='"+_key+"'");
					result = true;
					removeFromCache(this);
					id     = null;
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}



	/**
	 * Method:      getIsAdmin()
	 * Description: 
	 * Returns:     int
	 */
	public int getIsAdmin()
	{
		return isAdmin;
	}

	/**
	 * Method:      setIsAdmin(int _isAdmin, boolean _autoCommit)
	 * Description: 
	 * Returns:     void
	 */
	public void setIsAdmin(int _isAdmin, boolean _autoCommit)
	{
		isAdmin=_isAdmin;
		if(_autoCommit)
		{
			commit();
		}
	}

	/**
	 * Method:      getLockStatus()
	 * Description: 
	 * Returns:     int
	 */
	public int getLockStatus()
	{
		return lockStatus;
	}

	/**
	 * Method:      setLockStatus(int _lockStatus, boolean _autoCommit)
	 * Description: 
	 * Returns:     void
	 */
	public void setLockStatus(int _lockStatus, boolean _autoCommit)
	{
		lockStatus=_lockStatus;
		if(_autoCommit)
		{
			commit();
		}
	}

	/**
	 * Method:      getConnectionString()
	 * Description: 
	 * Returns:     String
	 */
	public String getConnectionString()
	{
		return connectionString;
	}

	/**
	 * Method:      setConnectionString(String _connectionString, boolean _autoCommit)
	 * Description: 
	 * Returns:     void
	 */
	public void setConnectionString(String _connectionString, boolean _autoCommit)
	{
		connectionString=_connectionString;
		if(_autoCommit)
		{
			commit();
		}
	}

	/**
	 * Method:      getClassName()
	 * Description: 
	 * Returns:     String
	 */
	public String getClassName()
	{
		return className;
	}

	/**
	 * Method:      setClassName(String _className, boolean _autoCommit)
	 * Description: 
	 * Returns:     void
	 */
	public void setClassName(String _className, boolean _autoCommit)
	{
		className=_className;
		if(_autoCommit)
		{
			commit();
		}
	}

	/**
	 * Method:      getId()
	 * Description: 
	 * Returns:     String
	 */
	public String getId()
	{
		return id;
	}

	/**
	 * Method:      getShortiUser()
	 * Description: 
	 * Returns:     ShortiUser
	 */
	public ShortiUser getShortiUser()
	{
		return ShortiUser.findById(shortiUser_id);
	}

	/**
	 * Method:      setShortiUser()
	 * Description: 
	 * Returns:     void
	 */
	public void setShortiUser(ShortiUser _foreigner, boolean _autocommit)
	{
		shortiUser_id= _foreigner.getId();
		if (_autocommit == true)
			commit();
	}

	/**
	 *  Method:      getChannelProperties()
	 *  Description:                              
	 *  Returns:     ArrayList<ChannelProperty>
	 */
	public ArrayList getChannelProperties()
	{
		return _dbChannelProperty.findByCommunicationChannel_di(this);
	}


	/**
	 *  Method:      getRequests()
	 *  Description:                              
	 *  Returns:     ArrayList<Request>
	 */
	public ArrayList getRequests()
	{
		return _dbRequest.findByChannel(this);
	}


	/**
	 *  Method:      getSubscribedActions()
	 *  Description:                              
	 *  Returns:     ArrayList<SubscribedAction>
	 */
	public ArrayList getSubscribedActions()
	{
		return _dbSubscribedAction.findByChannel(this);
	}


	/**
	 *  Method:      findByIsAdmin(int _isAdmin)
	 *  Description: 
	 *  Returns:     ArrayList<CommunicationChannel>
	 */
	public static ArrayList findByIsAdmin(int _isAdmin)
	{
		ArrayList result = new ArrayList();
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbCommunicationChannel.findByIsAdmin");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT id, isAdmin, lockStatus, connectionString, className, shortiUser_id FROM CommunicationChannel WHERE isAdmin="+_isAdmin+" order by generatedId desc");
				while(s.next())
				{
					String _tmpID = s.getString(1);
					CommunicationChannel newObject = (CommunicationChannel)getFromCache(_tmpID);
					if(newObject ==null)
					{
						newObject = new CommunicationChannel();
						newObject.isAdmin=s.getInt(2);
						newObject.lockStatus=s.getInt(3);
						newObject.connectionString=s.getString(4);
						newObject.className=s.getString(5);
						newObject.shortiUser_id=s.getString(6);
						newObject.id=_tmpID;
						putToCache(newObject);
					}
					result.add(newObject);
				}
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}

	/**
	 *  Method:      findByLockStatus(int _lockStatus)
	 *  Description: 
	 *  Returns:     ArrayList<CommunicationChannel>
	 */
	public static ArrayList findByLockStatus(int _lockStatus)
	{
		ArrayList result = new ArrayList();
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbCommunicationChannel.findByLockStatus");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT id, isAdmin, lockStatus, connectionString, className, shortiUser_id FROM CommunicationChannel WHERE lockStatus="+_lockStatus+" order by generatedId desc");
				while(s.next())
				{
					String _tmpID = s.getString(1);
					CommunicationChannel newObject = (CommunicationChannel)getFromCache(_tmpID);
					if(newObject ==null)
					{
						newObject = new CommunicationChannel();
						newObject.isAdmin=s.getInt(2);
						newObject.lockStatus=s.getInt(3);
						newObject.connectionString=s.getString(4);
						newObject.className=s.getString(5);
						newObject.shortiUser_id=s.getString(6);
						newObject.id=_tmpID;
						putToCache(newObject);
					}
					result.add(newObject);
				}
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}

	/**
	 *  Method:      findByConnectionString(String _connectionString)
	 *  Description: 
	 *  Returns:     CommunicationChannel
	 */
	public static CommunicationChannel findByConnectionString(String _connectionString)
	{
		CommunicationChannel result = null;
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbCommunicationChannel.findByConnectionString");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT id, isAdmin, lockStatus, connectionString, className, shortiUser_id FROM CommunicationChannel WHERE connectionString='"+toSQL(_connectionString)+"'"+" order by generatedId desc");
				if(s.next())
				{
					String _tmpID = s.getString(1);
					result = (CommunicationChannel)getFromCache(_tmpID);
					if(result ==null)
					{
						result = new CommunicationChannel();
						result.isAdmin= s.getInt(2);
						result.lockStatus= s.getInt(3);
						result.connectionString= s.getString(4);
						result.className= s.getString(5);
						result.shortiUser_id= s.getString(6);
						result.id= _tmpID;
						putToCache(result);
					}
				}
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}

	/**
	 *  Method:      findByClassName(String _className)
	 *  Description: 
	 *  Returns:     ArrayList<CommunicationChannel>
	 */
	public static ArrayList findByClassName(String _className)
	{
		ArrayList result = new ArrayList();
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbCommunicationChannel.findByClassName");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT id, isAdmin, lockStatus, connectionString, className, shortiUser_id FROM CommunicationChannel WHERE className='"+toSQL(_className)+"'"+" order by generatedId desc");
				while(s.next())
				{
					String _tmpID = s.getString(1);
					CommunicationChannel newObject = (CommunicationChannel)getFromCache(_tmpID);
					if(newObject ==null)
					{
						newObject = new CommunicationChannel();
						newObject.isAdmin=s.getInt(2);
						newObject.lockStatus=s.getInt(3);
						newObject.connectionString=s.getString(4);
						newObject.className=s.getString(5);
						newObject.shortiUser_id=s.getString(6);
						newObject.id=_tmpID;
						putToCache(newObject);
					}
					result.add(newObject);
				}
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}

	/**
	 *  Method:      findByShortiUser(_dbShortiUser _shortiUser)
	 *  Description: 
	 *  Returns:     ArrayList<CommunicationChannel>
	 */
	public static ArrayList findByShortiUser(_dbShortiUser _shortiUser)
	{
		ArrayList result = new ArrayList();
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbCommunicationChannel.findByShortiUser");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT id, isAdmin, lockStatus, connectionString, className, shortiUser_id FROM CommunicationChannel WHERE shortiUser_id='"+toSQL(((_shortiUser==null)?"":_shortiUser.getId()))+"'"+" order by generatedId desc");
				while(s.next())
				{
					String _tmpID = s.getString(1);
					CommunicationChannel newObject = (CommunicationChannel)getFromCache(_tmpID);
					if(newObject ==null)
					{
						newObject = new CommunicationChannel();
						newObject.isAdmin=s.getInt(2);
						newObject.lockStatus=s.getInt(3);
						newObject.connectionString=s.getString(4);
						newObject.className=s.getString(5);
						newObject.shortiUser_id=s.getString(6);
						newObject.id=_tmpID;
						putToCache(newObject);
					}
					result.add(newObject);
				}
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}

	/**
	 *  Method:      findById(String _id)
	 *  Description: 
	 *  Returns:     CommunicationChannel
	 */
	public static CommunicationChannel findById(String _id)
	{
		CommunicationChannel result = (CommunicationChannel)getFromCache(_id);
		if(result!=null) return result;
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbCommunicationChannel.findById");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT id, isAdmin, lockStatus, connectionString, className, shortiUser_id FROM CommunicationChannel WHERE id='"+toSQL(_id)+"'"+" order by generatedId desc");
				if(s.next())
				{
					result = new CommunicationChannel();
					result.isAdmin= s.getInt(2);
					result.lockStatus= s.getInt(3);
					result.connectionString= s.getString(4);
					result.className= s.getString(5);
					result.shortiUser_id= s.getString(6);
					result.id= _id;
					putToCache(result);
				}
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}

	/**
	 * returns boolean
	 */
	public boolean commit()
	{
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbCommunicationChannel.commit");
			try
			{
				stmt.executeUpdate( "UPDATE CommunicationChannel set isAdmin= "+isAdmin+", lockStatus= "+lockStatus+", connectionString= '"+toSQL(connectionString)+"', className= '"+toSQL(className)+"', shortiUser_id= '"+toSQL(shortiUser_id)+"' WHERE id='"+id+"'");
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return true;
	}


	/**
	 * returns ArrayList<CommunicationChannel>
	 */
	public static ArrayList getAll()
	{
		ArrayList result = new ArrayList();
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbCommunicationChannel.getAll");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT id, isAdmin, lockStatus, connectionString, className, shortiUser_id FROM CommunicationChannel order by generatedId desc");
				while(s.next())
				{
					String _tmpID = s.getString(1);
					CommunicationChannel newObject = (CommunicationChannel)getFromCache(_tmpID);
					if(newObject ==null)
					{
						newObject = new CommunicationChannel();
						newObject.isAdmin=s.getInt(2);
						newObject.lockStatus=s.getInt(3);
						newObject.connectionString=s.getString(4);
						newObject.className=s.getString(5);
						newObject.shortiUser_id=s.getString(6);
						newObject.id=_tmpID;
						putToCache(newObject);
					}
					result.add(newObject);
				}
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}


	/**
	 * create a new object in the database
	 */
	static public CommunicationChannel createInstance( int  _isAdmin, int  _lockStatus, String  _connectionString, String  _className, _dbShortiUser _shortiUser )
	{
		CommunicationChannel result = null;
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbCommunicationChannel.createInstance");
			try
			{
				String nextGUID = new java.rmi.server.UID().toString();
				stmt.executeUpdate( "INSERT INTO CommunicationChannel ( isAdmin, lockStatus, connectionString, className, shortiUser_id, id) VALUES ("+_isAdmin+", "+_lockStatus+",  '"+toSQL(_connectionString)+"',  '"+toSQL(_className)+"',  '"+((_shortiUser==null)?"":_shortiUser.getId())+"', '"+nextGUID+"')");
				result = new CommunicationChannel();
				result.isAdmin= _isAdmin;
				result.lockStatus= _lockStatus;
				result.connectionString= _connectionString;
				result.className= _className;
				result.shortiUser_id= (_shortiUser==null)?"":_shortiUser.getId();
				result.id= nextGUID;
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}


	/**
	 * create a new object in the database
	 */
	static public void newInstance( int  _isAdmin, int  _lockStatus, String  _connectionString, String  _className, _dbShortiUser _shortiUser )
	{
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbCommunicationChannel.newInstance");
			try
			{
				String nextGUID = new java.rmi.server.UID().toString();
				stmt.executeUpdate( "INSERT INTO CommunicationChannel ( isAdmin, lockStatus, connectionString, className, shortiUser_id, id) VALUES ("+_isAdmin+", "+_lockStatus+",  '"+toSQL(_connectionString)+"',  '"+toSQL(_className)+"',  '"+((_shortiUser==null)?"":_shortiUser.getId())+"', '"+nextGUID+"')");
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
	}


	/**
	 * destroy a object in the database
	 */
	static public boolean destroyInstance( String  _key)
	{
		boolean result = false;
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbCommunicationChannel.destroyInstance");
			try
			{
					stmt.executeUpdate( "DELETE FROM CommunicationChannel WHERE id='"+_key+"'");
					result = true;
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}


	/**
	 * destroy ALL objects in the database
	 */
	static public boolean destroyAll()
	{
		boolean result = false;
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbCommunicationChannel.destroyAll");
			try
			{
					stmt.executeUpdate("DELETE from CommunicationChannel" );
					result = true;
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}


	/**
	 */
	public String toString()
	{
		StringBuffer result = new StringBuffer(1024);
		result.append(isAdmin);
		result.append("|");
		result.append(lockStatus);
		result.append("|");
		result.append(connectionString);
		result.append("|");
		result.append(className);
		result.append("|");
		result.append(shortiUser_id);
		result.append("|");
		result.append(id);
		return result.toString();
	}


	/**
	 * init the class
	 */
	static
	{
		try
		{
			DatabaseMetaData dMeta = ConnectionManager.getValid().getMetaData ();
			ResultSet result;
			result=dMeta.getColumns(null,null,"CommunicationChannel","isAdmin");
			if(!result.next())
			{
				System.out.println("ERROR: installed DB-schema not compatible to java classes");
				System.out.println("       Attribute 'isAdmin' in table 'CommunicationChannel' missing");
			}
			result.close();
			result=dMeta.getColumns(null,null,"CommunicationChannel","lockStatus");
			if(!result.next())
			{
				System.out.println("ERROR: installed DB-schema not compatible to java classes");
				System.out.println("       Attribute 'lockStatus' in table 'CommunicationChannel' missing");
			}
			result.close();
			result=dMeta.getColumns(null,null,"CommunicationChannel","connectionString");
			if(!result.next())
			{
				System.out.println("ERROR: installed DB-schema not compatible to java classes");
				System.out.println("       Attribute 'connectionString' in table 'CommunicationChannel' missing");
			}
			result.close();
			result=dMeta.getColumns(null,null,"CommunicationChannel","className");
			if(!result.next())
			{
				System.out.println("ERROR: installed DB-schema not compatible to java classes");
				System.out.println("       Attribute 'className' in table 'CommunicationChannel' missing");
			}
			result.close();
			result=dMeta.getColumns(null,null,"CommunicationChannel","shortiUser_id");
			if(!result.next())
			{
				System.out.println("ERROR: installed DB-schema not compatible to java classes");
				System.out.println("       Attribute 'shortiUser_id' in table 'CommunicationChannel' missing");
			}
			result.close();
			result=dMeta.getColumns(null,null,"CommunicationChannel","id");
			if(!result.next())
			{
				System.out.println("ERROR: installed DB-schema not compatible to java classes");
				System.out.println("       Attribute 'id' in table 'CommunicationChannel' missing");
			}
			result.close();
		}
		catch (Exception ex)
		{
		}
	}


}
