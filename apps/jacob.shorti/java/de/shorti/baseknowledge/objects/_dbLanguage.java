package de.shorti.baseknowledge.objects;

/**
 * Class generated by automatic ClassGenerator
 * Date: Sat May 11 21:15:24 GMT+02:00 2002
 */
import de.shorti.db.*;
import java.util.ArrayList;
import java.util.Iterator;
import java.sql.*;

class _dbLanguage extends dbObject 
{

	String    shortName;
	String    name;


	/**
	 * destroy a object in the database
	 */
	public boolean destroy()
	{
		boolean result = false;
		String    _key   = id;
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbLanguage.destroyInstance");
			try
			{
					stmt.executeUpdate( "DELETE FROM Language WHERE id='"+_key+"'");
					result = true;
					removeFromCache(this);
					id     = null;
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}



	/**
	 * Method:      getShortName()
	 * Description: 
	 * Returns:     String
	 */
	public String getShortName()
	{
		return shortName;
	}

	/**
	 * Method:      setShortName(String _shortName, boolean _autoCommit)
	 * Description: 
	 * Returns:     void
	 */
	public void setShortName(String _shortName, boolean _autoCommit)
	{
		shortName=_shortName;
		if(_autoCommit)
		{
			commit();
		}
	}

	/**
	 * Method:      getName()
	 * Description: 
	 * Returns:     String
	 */
	public String getName()
	{
		return name;
	}

	/**
	 * Method:      setName(String _name, boolean _autoCommit)
	 * Description: 
	 * Returns:     void
	 */
	public void setName(String _name, boolean _autoCommit)
	{
		name=_name;
		if(_autoCommit)
		{
			commit();
		}
	}

	/**
	 * Method:      getId()
	 * Description: 
	 * Returns:     String
	 */
	public String getId()
	{
		return id;
	}

	/**
	 *  Method:      getAcronyms()
	 *  Description:                              
	 *  Returns:     ArrayList<Acronym>
	 */
	public ArrayList getAcronyms()
	{
		return _dbAcronym.findByDescriptionLanguage(this);
	}


	/**
	 *  Method:      getCountries()
	 *  Description:                              
	 *  Returns:     ArrayList<Country>
	 */
	public ArrayList getCountries()
	{
		return _dbCountry.findByLanguage(this);
	}


	/**
	 *  Method:      getHangManWords()
	 *  Description:                              
	 *  Returns:     ArrayList<HangManWord>
	 */
	public ArrayList getHangManWords()
	{
		return _dbHangManWord.findByLanguage(this);
	}


	/**
	 *  Method:      getShortiUsers()
	 *  Description:                              
	 *  Returns:     ArrayList<ShortiUser>
	 */
	public ArrayList getShortiUsers()
	{
		return _dbShortiUser.findByPreferedLanguage(this);
	}


	/**
	 *  Method:      getSystemMessages()
	 *  Description:                              
	 *  Returns:     ArrayList<SystemMessage>
	 */
	public ArrayList getSystemMessages()
	{
		return _dbSystemMessage.findByLanguage(this);
	}


	/**
	 *  Method:      getTipOfTheDaies()
	 *  Description:                              
	 *  Returns:     ArrayList<TipOfTheDay>
	 */
	public ArrayList getTipOfTheDaies()
	{
		return _dbTipOfTheDay.findByLanguage(this);
	}


	/**
	 *  Method:      findByShortName(String _shortName)
	 *  Description: 
	 *  Returns:     Language
	 */
	public static Language findByShortName(String _shortName)
	{
		Language result = null;
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbLanguage.findByShortName");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT id, shortName, name FROM Language WHERE shortName='"+toSQL(_shortName)+"'"+" order by generatedId desc");
				if(s.next())
				{
					String _tmpID = s.getString(1);
					result = (Language)getFromCache(_tmpID);
					if(result ==null)
					{
						result = new Language();
						result.shortName= s.getString(2);
						result.name= s.getString(3);
						result.id= _tmpID;
						putToCache(result);
					}
				}
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}

	/**
	 *  Method:      findByName(String _name)
	 *  Description: 
	 *  Returns:     Language
	 */
	public static Language findByName(String _name)
	{
		Language result = null;
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbLanguage.findByName");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT id, shortName, name FROM Language WHERE name='"+toSQL(_name)+"'"+" order by generatedId desc");
				if(s.next())
				{
					String _tmpID = s.getString(1);
					result = (Language)getFromCache(_tmpID);
					if(result ==null)
					{
						result = new Language();
						result.shortName= s.getString(2);
						result.name= s.getString(3);
						result.id= _tmpID;
						putToCache(result);
					}
				}
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}

	/**
	 *  Method:      findById(String _id)
	 *  Description: 
	 *  Returns:     Language
	 */
	public static Language findById(String _id)
	{
		Language result = (Language)getFromCache(_id);
		if(result!=null) return result;
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbLanguage.findById");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT id, shortName, name FROM Language WHERE id='"+toSQL(_id)+"'"+" order by generatedId desc");
				if(s.next())
				{
					result = new Language();
					result.shortName= s.getString(2);
					result.name= s.getString(3);
					result.id= _id;
					putToCache(result);
				}
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}

	/**
	 * returns boolean
	 */
	public boolean commit()
	{
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbLanguage.commit");
			try
			{
				stmt.executeUpdate( "UPDATE Language set shortName= '"+toSQL(shortName)+"', name= '"+toSQL(name)+"' WHERE id='"+id+"'");
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return true;
	}


	/**
	 * returns ArrayList<Language>
	 */
	public static ArrayList getAll()
	{
		ArrayList result = new ArrayList();
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbLanguage.getAll");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT id, shortName, name FROM Language order by generatedId desc");
				while(s.next())
				{
					String _tmpID = s.getString(1);
					Language newObject = (Language)getFromCache(_tmpID);
					if(newObject ==null)
					{
						newObject = new Language();
						newObject.shortName=s.getString(2);
						newObject.name=s.getString(3);
						newObject.id=_tmpID;
						putToCache(newObject);
					}
					result.add(newObject);
				}
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}


	/**
	 * create a new object in the database
	 */
	static public Language createInstance( String  _shortName, String  _name )
	{
		Language result = null;
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbLanguage.createInstance");
			try
			{
				String nextGUID = new java.rmi.server.UID().toString();
				stmt.executeUpdate( "INSERT INTO Language ( shortName, name, id) VALUES ( '"+toSQL(_shortName)+"',  '"+toSQL(_name)+"', '"+nextGUID+"')");
				result = new Language();
				result.shortName= _shortName;
				result.name= _name;
				result.id= nextGUID;
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}


	/**
	 * create a new object in the database
	 */
	static public void newInstance( String  _shortName, String  _name )
	{
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbLanguage.newInstance");
			try
			{
				String nextGUID = new java.rmi.server.UID().toString();
				stmt.executeUpdate( "INSERT INTO Language ( shortName, name, id) VALUES ( '"+toSQL(_shortName)+"',  '"+toSQL(_name)+"', '"+nextGUID+"')");
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
	}


	/**
	 * destroy a object in the database
	 */
	static public boolean destroyInstance( String  _key)
	{
		boolean result = false;
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbLanguage.destroyInstance");
			try
			{
					stmt.executeUpdate( "DELETE FROM Language WHERE id='"+_key+"'");
					result = true;
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}


	/**
	 * destroy ALL objects in the database
	 */
	static public boolean destroyAll()
	{
		boolean result = false;
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbLanguage.destroyAll");
			try
			{
					stmt.executeUpdate("DELETE from Language" );
					result = true;
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}


	/**
	 */
	public String toString()
	{
		StringBuffer result = new StringBuffer(1024);
		result.append(shortName);
		result.append("|");
		result.append(name);
		result.append("|");
		result.append(id);
		return result.toString();
	}


	/**
	 * init the class
	 */
	static
	{
		try
		{
			DatabaseMetaData dMeta = ConnectionManager.getValid().getMetaData ();
			ResultSet result;
			result=dMeta.getColumns(null,null,"Language","shortName");
			if(!result.next())
			{
				System.out.println("ERROR: installed DB-schema not compatible to java classes");
				System.out.println("       Attribute 'shortName' in table 'Language' missing");
			}
			result.close();
			result=dMeta.getColumns(null,null,"Language","name");
			if(!result.next())
			{
				System.out.println("ERROR: installed DB-schema not compatible to java classes");
				System.out.println("       Attribute 'name' in table 'Language' missing");
			}
			result.close();
			result=dMeta.getColumns(null,null,"Language","id");
			if(!result.next())
			{
				System.out.println("ERROR: installed DB-schema not compatible to java classes");
				System.out.println("       Attribute 'id' in table 'Language' missing");
			}
			result.close();
		}
		catch (Exception ex)
		{
		}
	}


}
