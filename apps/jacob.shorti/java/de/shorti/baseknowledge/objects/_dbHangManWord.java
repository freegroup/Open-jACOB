package de.shorti.baseknowledge.objects;

/**
 * Class generated by automatic ClassGenerator
 * Date: Sat May 11 21:15:21 GMT+02:00 2002
 */
import de.shorti.db.*;
import java.util.ArrayList;
import java.util.Iterator;
import java.sql.*;

class _dbHangManWord extends dbObject 
{

	String    word;
	String    language_id;	// Foreign Key pointing to Table [Language], Field [id]


	/**
	 * destroy a object in the database
	 */
	public boolean destroy()
	{
		boolean result = false;
		String    _key   = id;
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbHangManWord.destroyInstance");
			try
			{
					stmt.executeUpdate( "DELETE FROM HangManWord WHERE id='"+_key+"'");
					result = true;
					removeFromCache(this);
					id     = null;
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}



	/**
	 * Method:      getWord()
	 * Description: 
	 * Returns:     String
	 */
	public String getWord()
	{
		return word;
	}

	/**
	 * Method:      setWord(String _word, boolean _autoCommit)
	 * Description: 
	 * Returns:     void
	 */
	public void setWord(String _word, boolean _autoCommit)
	{
		word=_word;
		if(_autoCommit)
		{
			commit();
		}
	}

	/**
	 * Method:      getId()
	 * Description: 
	 * Returns:     String
	 */
	public String getId()
	{
		return id;
	}

	/**
	 * Method:      getLanguage()
	 * Description: 
	 * Returns:     Language
	 */
	public Language getLanguage()
	{
		return Language.findById(language_id);
	}

	/**
	 * Method:      setLanguage()
	 * Description: 
	 * Returns:     void
	 */
	public void setLanguage(Language _foreigner, boolean _autocommit)
	{
		language_id= _foreigner.getId();
		if (_autocommit == true)
			commit();
	}

	/**
	 *  Method:      findByWord(String _word)
	 *  Description: 
	 *  Returns:     ArrayList<HangManWord>
	 */
	public static ArrayList findByWord(String _word)
	{
		ArrayList result = new ArrayList();
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbHangManWord.findByWord");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT id, word, language_id FROM HangManWord WHERE word='"+toSQL(_word)+"'"+" order by generatedId desc");
				while(s.next())
				{
					String _tmpID = s.getString(1);
					HangManWord newObject = (HangManWord)getFromCache(_tmpID);
					if(newObject ==null)
					{
						newObject = new HangManWord();
						newObject.word=s.getString(2);
						newObject.language_id=s.getString(3);
						newObject.id=_tmpID;
						putToCache(newObject);
					}
					result.add(newObject);
				}
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}

	/**
	 *  Method:      findByLanguage(_dbLanguage _language)
	 *  Description: 
	 *  Returns:     ArrayList<HangManWord>
	 */
	public static ArrayList findByLanguage(_dbLanguage _language)
	{
		ArrayList result = new ArrayList();
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbHangManWord.findByLanguage");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT id, word, language_id FROM HangManWord WHERE language_id='"+toSQL(((_language==null)?"":_language.getId()))+"'"+" order by generatedId desc");
				while(s.next())
				{
					String _tmpID = s.getString(1);
					HangManWord newObject = (HangManWord)getFromCache(_tmpID);
					if(newObject ==null)
					{
						newObject = new HangManWord();
						newObject.word=s.getString(2);
						newObject.language_id=s.getString(3);
						newObject.id=_tmpID;
						putToCache(newObject);
					}
					result.add(newObject);
				}
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}

	/**
	 *  Method:      findById(String _id)
	 *  Description: 
	 *  Returns:     HangManWord
	 */
	public static HangManWord findById(String _id)
	{
		HangManWord result = (HangManWord)getFromCache(_id);
		if(result!=null) return result;
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbHangManWord.findById");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT id, word, language_id FROM HangManWord WHERE id='"+toSQL(_id)+"'"+" order by generatedId desc");
				if(s.next())
				{
					result = new HangManWord();
					result.word= s.getString(2);
					result.language_id= s.getString(3);
					result.id= _id;
					putToCache(result);
				}
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}

	/**
	 * returns boolean
	 */
	public boolean commit()
	{
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbHangManWord.commit");
			try
			{
				stmt.executeUpdate( "UPDATE HangManWord set word= '"+toSQL(word)+"', language_id= '"+toSQL(language_id)+"' WHERE id='"+id+"'");
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return true;
	}


	/**
	 * returns ArrayList<HangManWord>
	 */
	public static ArrayList getAll()
	{
		ArrayList result = new ArrayList();
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbHangManWord.getAll");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT id, word, language_id FROM HangManWord order by generatedId desc");
				while(s.next())
				{
					String _tmpID = s.getString(1);
					HangManWord newObject = (HangManWord)getFromCache(_tmpID);
					if(newObject ==null)
					{
						newObject = new HangManWord();
						newObject.word=s.getString(2);
						newObject.language_id=s.getString(3);
						newObject.id=_tmpID;
						putToCache(newObject);
					}
					result.add(newObject);
				}
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}


	/**
	 * create a new object in the database
	 */
	static public HangManWord createInstance( String  _word, _dbLanguage _language )
	{
		HangManWord result = null;
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbHangManWord.createInstance");
			try
			{
				String nextGUID = new java.rmi.server.UID().toString();
				stmt.executeUpdate( "INSERT INTO HangManWord ( word, language_id, id) VALUES ( '"+toSQL(_word)+"',  '"+((_language==null)?"":_language.getId())+"', '"+nextGUID+"')");
				result = new HangManWord();
				result.word= _word;
				result.language_id= (_language==null)?"":_language.getId();
				result.id= nextGUID;
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}


	/**
	 * create a new object in the database
	 */
	static public void newInstance( String  _word, _dbLanguage _language )
	{
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbHangManWord.newInstance");
			try
			{
				String nextGUID = new java.rmi.server.UID().toString();
				stmt.executeUpdate( "INSERT INTO HangManWord ( word, language_id, id) VALUES ( '"+toSQL(_word)+"',  '"+((_language==null)?"":_language.getId())+"', '"+nextGUID+"')");
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
	}


	/**
	 * destroy a object in the database
	 */
	static public boolean destroyInstance( String  _key)
	{
		boolean result = false;
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbHangManWord.destroyInstance");
			try
			{
					stmt.executeUpdate( "DELETE FROM HangManWord WHERE id='"+_key+"'");
					result = true;
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}


	/**
	 * destroy ALL objects in the database
	 */
	static public boolean destroyAll()
	{
		boolean result = false;
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbHangManWord.destroyAll");
			try
			{
					stmt.executeUpdate("DELETE from HangManWord" );
					result = true;
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}


	/**
	 */
	public String toString()
	{
		StringBuffer result = new StringBuffer(1024);
		result.append(word);
		result.append("|");
		result.append(language_id);
		result.append("|");
		result.append(id);
		return result.toString();
	}


	/**
	 * init the class
	 */
	static
	{
		try
		{
			DatabaseMetaData dMeta = ConnectionManager.getValid().getMetaData ();
			ResultSet result;
			result=dMeta.getColumns(null,null,"HangManWord","word");
			if(!result.next())
			{
				System.out.println("ERROR: installed DB-schema not compatible to java classes");
				System.out.println("       Attribute 'word' in table 'HangManWord' missing");
			}
			result.close();
			result=dMeta.getColumns(null,null,"HangManWord","language_id");
			if(!result.next())
			{
				System.out.println("ERROR: installed DB-schema not compatible to java classes");
				System.out.println("       Attribute 'language_id' in table 'HangManWord' missing");
			}
			result.close();
			result=dMeta.getColumns(null,null,"HangManWord","id");
			if(!result.next())
			{
				System.out.println("ERROR: installed DB-schema not compatible to java classes");
				System.out.println("       Attribute 'id' in table 'HangManWord' missing");
			}
			result.close();
		}
		catch (Exception ex)
		{
		}
	}


}
