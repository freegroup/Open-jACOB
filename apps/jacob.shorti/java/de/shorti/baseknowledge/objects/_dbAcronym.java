package de.shorti.baseknowledge.objects;

/**
 * Class generated by automatic ClassGenerator
 * Date: Sat May 11 21:15:21 GMT+02:00 2002
 */
import de.shorti.db.*;
import java.util.ArrayList;
import java.util.Iterator;
import java.sql.*;

class _dbAcronym extends dbObject 
{

	String    acronym;
	String    context;
	String    description;
	String    descriptionLanguage_id;	// Foreign Key pointing to Table [Language], Field [id]


	/**
	 * destroy a object in the database
	 */
	public boolean destroy()
	{
		boolean result = false;
		String    _key   = id;
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbAcronym.destroyInstance");
			try
			{
					stmt.executeUpdate( "DELETE FROM Acronym WHERE id='"+_key+"'");
					result = true;
					removeFromCache(this);
					id     = null;
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}



	/**
	 * Method:      getAcronym()
	 * Description: 
	 * Returns:     String
	 */
	public String getAcronym()
	{
		return acronym;
	}

	/**
	 * Method:      setAcronym(String _acronym, boolean _autoCommit)
	 * Description: 
	 * Returns:     void
	 */
	public void setAcronym(String _acronym, boolean _autoCommit)
	{
		acronym=_acronym;
		if(_autoCommit)
		{
			commit();
		}
	}

	/**
	 * Method:      getContext()
	 * Description: 
	 * Returns:     String
	 */
	public String getContext()
	{
		return context;
	}

	/**
	 * Method:      setContext(String _context, boolean _autoCommit)
	 * Description: 
	 * Returns:     void
	 */
	public void setContext(String _context, boolean _autoCommit)
	{
		context=_context;
		if(_autoCommit)
		{
			commit();
		}
	}

	/**
	 * Method:      getDescription()
	 * Description: 
	 * Returns:     String
	 */
	public String getDescription()
	{
		return description;
	}

	/**
	 * Method:      setDescription(String _description, boolean _autoCommit)
	 * Description: 
	 * Returns:     void
	 */
	public void setDescription(String _description, boolean _autoCommit)
	{
		description=_description;
		if(_autoCommit)
		{
			commit();
		}
	}

	/**
	 * Method:      getId()
	 * Description: 
	 * Returns:     String
	 */
	public String getId()
	{
		return id;
	}

	/**
	 * Method:      getDescriptionLanguage()
	 * Description: 
	 * Returns:     Language
	 */
	public Language getDescriptionLanguage()
	{
		return Language.findById(descriptionLanguage_id);
	}

	/**
	 * Method:      setDescriptionLanguage()
	 * Description: 
	 * Returns:     void
	 */
	public void setDescriptionLanguage(Language _foreigner, boolean _autocommit)
	{
		descriptionLanguage_id= _foreigner.getId();
		if (_autocommit == true)
			commit();
	}

	/**
	 *  Method:      findByAcronym(String _acronym)
	 *  Description: 
	 *  Returns:     ArrayList<Acronym>
	 */
	public static ArrayList findByAcronym(String _acronym)
	{
		ArrayList result = new ArrayList();
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbAcronym.findByAcronym");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT id, acronym, context, description, descriptionLanguage_id FROM Acronym WHERE acronym='"+toSQL(_acronym)+"'"+" order by generatedId desc");
				while(s.next())
				{
					String _tmpID = s.getString(1);
					Acronym newObject = (Acronym)getFromCache(_tmpID);
					if(newObject ==null)
					{
						newObject = new Acronym();
						newObject.acronym=s.getString(2);
						newObject.context=s.getString(3);
						newObject.description=s.getString(4);
						newObject.descriptionLanguage_id=s.getString(5);
						newObject.id=_tmpID;
						putToCache(newObject);
					}
					result.add(newObject);
				}
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}

	/**
	 *  Method:      findByContext(String _context)
	 *  Description: 
	 *  Returns:     ArrayList<Acronym>
	 */
	public static ArrayList findByContext(String _context)
	{
		ArrayList result = new ArrayList();
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbAcronym.findByContext");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT id, acronym, context, description, descriptionLanguage_id FROM Acronym WHERE context='"+toSQL(_context)+"'"+" order by generatedId desc");
				while(s.next())
				{
					String _tmpID = s.getString(1);
					Acronym newObject = (Acronym)getFromCache(_tmpID);
					if(newObject ==null)
					{
						newObject = new Acronym();
						newObject.acronym=s.getString(2);
						newObject.context=s.getString(3);
						newObject.description=s.getString(4);
						newObject.descriptionLanguage_id=s.getString(5);
						newObject.id=_tmpID;
						putToCache(newObject);
					}
					result.add(newObject);
				}
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}

	/**
	 *  Method:      findByDescription(String _description)
	 *  Description: 
	 *  Returns:     ArrayList<Acronym>
	 */
	public static ArrayList findByDescription(String _description)
	{
		ArrayList result = new ArrayList();
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbAcronym.findByDescription");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT id, acronym, context, description, descriptionLanguage_id FROM Acronym WHERE description='"+toSQL(_description)+"'"+" order by generatedId desc");
				while(s.next())
				{
					String _tmpID = s.getString(1);
					Acronym newObject = (Acronym)getFromCache(_tmpID);
					if(newObject ==null)
					{
						newObject = new Acronym();
						newObject.acronym=s.getString(2);
						newObject.context=s.getString(3);
						newObject.description=s.getString(4);
						newObject.descriptionLanguage_id=s.getString(5);
						newObject.id=_tmpID;
						putToCache(newObject);
					}
					result.add(newObject);
				}
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}

	/**
	 *  Method:      findByDescriptionLanguage(_dbLanguage _descriptionLanguage)
	 *  Description: 
	 *  Returns:     ArrayList<Acronym>
	 */
	public static ArrayList findByDescriptionLanguage(_dbLanguage _descriptionLanguage)
	{
		ArrayList result = new ArrayList();
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbAcronym.findByDescriptionLanguage");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT id, acronym, context, description, descriptionLanguage_id FROM Acronym WHERE descriptionLanguage_id='"+toSQL(((_descriptionLanguage==null)?"":_descriptionLanguage.getId()))+"'"+" order by generatedId desc");
				while(s.next())
				{
					String _tmpID = s.getString(1);
					Acronym newObject = (Acronym)getFromCache(_tmpID);
					if(newObject ==null)
					{
						newObject = new Acronym();
						newObject.acronym=s.getString(2);
						newObject.context=s.getString(3);
						newObject.description=s.getString(4);
						newObject.descriptionLanguage_id=s.getString(5);
						newObject.id=_tmpID;
						putToCache(newObject);
					}
					result.add(newObject);
				}
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}

	/**
	 *  Method:      findById(String _id)
	 *  Description: 
	 *  Returns:     Acronym
	 */
	public static Acronym findById(String _id)
	{
		Acronym result = (Acronym)getFromCache(_id);
		if(result!=null) return result;
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbAcronym.findById");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT id, acronym, context, description, descriptionLanguage_id FROM Acronym WHERE id='"+toSQL(_id)+"'"+" order by generatedId desc");
				if(s.next())
				{
					result = new Acronym();
					result.acronym= s.getString(2);
					result.context= s.getString(3);
					result.description= s.getString(4);
					result.descriptionLanguage_id= s.getString(5);
					result.id= _id;
					putToCache(result);
				}
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}

	/**
	 * returns boolean
	 */
	public boolean commit()
	{
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbAcronym.commit");
			try
			{
				stmt.executeUpdate( "UPDATE Acronym set acronym= '"+toSQL(acronym)+"', context= '"+toSQL(context)+"', description= '"+toSQL(description)+"', descriptionLanguage_id= '"+toSQL(descriptionLanguage_id)+"' WHERE id='"+id+"'");
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return true;
	}


	/**
	 * returns ArrayList<Acronym>
	 */
	public static ArrayList getAll()
	{
		ArrayList result = new ArrayList();
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbAcronym.getAll");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT id, acronym, context, description, descriptionLanguage_id FROM Acronym order by generatedId desc");
				while(s.next())
				{
					String _tmpID = s.getString(1);
					Acronym newObject = (Acronym)getFromCache(_tmpID);
					if(newObject ==null)
					{
						newObject = new Acronym();
						newObject.acronym=s.getString(2);
						newObject.context=s.getString(3);
						newObject.description=s.getString(4);
						newObject.descriptionLanguage_id=s.getString(5);
						newObject.id=_tmpID;
						putToCache(newObject);
					}
					result.add(newObject);
				}
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}


	/**
	 * create a new object in the database
	 */
	static public Acronym createInstance( String  _acronym, String  _context, String  _description, _dbLanguage _descriptionLanguage )
	{
		Acronym result = null;
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbAcronym.createInstance");
			try
			{
				String nextGUID = new java.rmi.server.UID().toString();
				stmt.executeUpdate( "INSERT INTO Acronym ( acronym, context, description, descriptionLanguage_id, id) VALUES ( '"+toSQL(_acronym)+"',  '"+toSQL(_context)+"',  '"+toSQL(_description)+"',  '"+((_descriptionLanguage==null)?"":_descriptionLanguage.getId())+"', '"+nextGUID+"')");
				result = new Acronym();
				result.acronym= _acronym;
				result.context= _context;
				result.description= _description;
				result.descriptionLanguage_id= (_descriptionLanguage==null)?"":_descriptionLanguage.getId();
				result.id= nextGUID;
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}


	/**
	 * create a new object in the database
	 */
	static public void newInstance( String  _acronym, String  _context, String  _description, _dbLanguage _descriptionLanguage )
	{
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbAcronym.newInstance");
			try
			{
				String nextGUID = new java.rmi.server.UID().toString();
				stmt.executeUpdate( "INSERT INTO Acronym ( acronym, context, description, descriptionLanguage_id, id) VALUES ( '"+toSQL(_acronym)+"',  '"+toSQL(_context)+"',  '"+toSQL(_description)+"',  '"+((_descriptionLanguage==null)?"":_descriptionLanguage.getId())+"', '"+nextGUID+"')");
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
	}


	/**
	 * destroy a object in the database
	 */
	static public boolean destroyInstance( String  _key)
	{
		boolean result = false;
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbAcronym.destroyInstance");
			try
			{
					stmt.executeUpdate( "DELETE FROM Acronym WHERE id='"+_key+"'");
					result = true;
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}


	/**
	 * destroy ALL objects in the database
	 */
	static public boolean destroyAll()
	{
		boolean result = false;
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbAcronym.destroyAll");
			try
			{
					stmt.executeUpdate("DELETE from Acronym" );
					result = true;
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}


	/**
	 */
	public String toString()
	{
		StringBuffer result = new StringBuffer(1024);
		result.append(acronym);
		result.append("|");
		result.append(context);
		result.append("|");
		result.append(description);
		result.append("|");
		result.append(descriptionLanguage_id);
		result.append("|");
		result.append(id);
		return result.toString();
	}


	/**
	 * init the class
	 */
	static
	{
		try
		{
			DatabaseMetaData dMeta = ConnectionManager.getValid().getMetaData ();
			ResultSet result;
			result=dMeta.getColumns(null,null,"Acronym","acronym");
			if(!result.next())
			{
				System.out.println("ERROR: installed DB-schema not compatible to java classes");
				System.out.println("       Attribute 'acronym' in table 'Acronym' missing");
			}
			result.close();
			result=dMeta.getColumns(null,null,"Acronym","context");
			if(!result.next())
			{
				System.out.println("ERROR: installed DB-schema not compatible to java classes");
				System.out.println("       Attribute 'context' in table 'Acronym' missing");
			}
			result.close();
			result=dMeta.getColumns(null,null,"Acronym","description");
			if(!result.next())
			{
				System.out.println("ERROR: installed DB-schema not compatible to java classes");
				System.out.println("       Attribute 'description' in table 'Acronym' missing");
			}
			result.close();
			result=dMeta.getColumns(null,null,"Acronym","descriptionLanguage_id");
			if(!result.next())
			{
				System.out.println("ERROR: installed DB-schema not compatible to java classes");
				System.out.println("       Attribute 'descriptionLanguage_id' in table 'Acronym' missing");
			}
			result.close();
			result=dMeta.getColumns(null,null,"Acronym","id");
			if(!result.next())
			{
				System.out.println("ERROR: installed DB-schema not compatible to java classes");
				System.out.println("       Attribute 'id' in table 'Acronym' missing");
			}
			result.close();
		}
		catch (Exception ex)
		{
		}
	}


}
