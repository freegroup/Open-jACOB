package de.shorti.baseknowledge.objects;

/**
 * Class generated by automatic ClassGenerator
 * Date: Sat May 11 21:15:23 GMT+02:00 2002
 */
import de.shorti.db.*;
import java.util.ArrayList;
import java.util.Iterator;
import java.sql.*;

class _dbPreferredRegion extends dbObject 
{

	String    zipCode_id;	// Foreign Key pointing to Table [ZipCode], Field [id]
	String    shortiUser_id;	// Foreign Key pointing to Table [ShortiUser], Field [id]


	/**
	 * destroy a object in the database
	 */
	public boolean destroy()
	{
		boolean result = false;
		String    _key   = id;
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbPreferredRegion.destroyInstance");
			try
			{
					stmt.executeUpdate( "DELETE FROM PreferredRegion WHERE id='"+_key+"'");
					result = true;
					removeFromCache(this);
					id     = null;
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}



	/**
	 * Method:      getId()
	 * Description: 
	 * Returns:     String
	 */
	public String getId()
	{
		return id;
	}

	/**
	 * Method:      getZipCode()
	 * Description: 
	 * Returns:     ZipCode
	 */
	public ZipCode getZipCode()
	{
		return ZipCode.findById(zipCode_id);
	}

	/**
	 * Method:      setZipCode()
	 * Description: 
	 * Returns:     void
	 */
	public void setZipCode(ZipCode _foreigner, boolean _autocommit)
	{
		zipCode_id= _foreigner.getId();
		if (_autocommit == true)
			commit();
	}

	/**
	 * Method:      getShortiUser()
	 * Description: 
	 * Returns:     ShortiUser
	 */
	public ShortiUser getShortiUser()
	{
		return ShortiUser.findById(shortiUser_id);
	}

	/**
	 * Method:      setShortiUser()
	 * Description: 
	 * Returns:     void
	 */
	public void setShortiUser(ShortiUser _foreigner, boolean _autocommit)
	{
		shortiUser_id= _foreigner.getId();
		if (_autocommit == true)
			commit();
	}

	/**
	 *  Method:      findByZipCode(_dbZipCode _zipCode)
	 *  Description: 
	 *  Returns:     ArrayList<PreferredRegion>
	 */
	public static ArrayList findByZipCode(_dbZipCode _zipCode)
	{
		ArrayList result = new ArrayList();
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbPreferredRegion.findByZipCode");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT id, zipCode_id, shortiUser_id FROM PreferredRegion WHERE zipCode_id='"+toSQL(((_zipCode==null)?"":_zipCode.getId()))+"'"+" order by generatedId desc");
				while(s.next())
				{
					String _tmpID = s.getString(1);
					PreferredRegion newObject = (PreferredRegion)getFromCache(_tmpID);
					if(newObject ==null)
					{
						newObject = new PreferredRegion();
						newObject.zipCode_id=s.getString(2);
						newObject.shortiUser_id=s.getString(3);
						newObject.id=_tmpID;
						putToCache(newObject);
					}
					result.add(newObject);
				}
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}

	/**
	 *  Method:      findByShortiUser(_dbShortiUser _shortiUser)
	 *  Description: 
	 *  Returns:     ArrayList<PreferredRegion>
	 */
	public static ArrayList findByShortiUser(_dbShortiUser _shortiUser)
	{
		ArrayList result = new ArrayList();
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbPreferredRegion.findByShortiUser");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT id, zipCode_id, shortiUser_id FROM PreferredRegion WHERE shortiUser_id='"+toSQL(((_shortiUser==null)?"":_shortiUser.getId()))+"'"+" order by generatedId desc");
				while(s.next())
				{
					String _tmpID = s.getString(1);
					PreferredRegion newObject = (PreferredRegion)getFromCache(_tmpID);
					if(newObject ==null)
					{
						newObject = new PreferredRegion();
						newObject.zipCode_id=s.getString(2);
						newObject.shortiUser_id=s.getString(3);
						newObject.id=_tmpID;
						putToCache(newObject);
					}
					result.add(newObject);
				}
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}

	/**
	 *  Method:      findById(String _id)
	 *  Description: 
	 *  Returns:     PreferredRegion
	 */
	public static PreferredRegion findById(String _id)
	{
		PreferredRegion result = (PreferredRegion)getFromCache(_id);
		if(result!=null) return result;
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbPreferredRegion.findById");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT id, zipCode_id, shortiUser_id FROM PreferredRegion WHERE id='"+toSQL(_id)+"'"+" order by generatedId desc");
				if(s.next())
				{
					result = new PreferredRegion();
					result.zipCode_id= s.getString(2);
					result.shortiUser_id= s.getString(3);
					result.id= _id;
					putToCache(result);
				}
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}

	/**
	 * returns boolean
	 */
	public boolean commit()
	{
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbPreferredRegion.commit");
			try
			{
				stmt.executeUpdate( "UPDATE PreferredRegion set zipCode_id= '"+toSQL(zipCode_id)+"', shortiUser_id= '"+toSQL(shortiUser_id)+"' WHERE id='"+id+"'");
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return true;
	}


	/**
	 * returns ArrayList<PreferredRegion>
	 */
	public static ArrayList getAll()
	{
		ArrayList result = new ArrayList();
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbPreferredRegion.getAll");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT id, zipCode_id, shortiUser_id FROM PreferredRegion order by generatedId desc");
				while(s.next())
				{
					String _tmpID = s.getString(1);
					PreferredRegion newObject = (PreferredRegion)getFromCache(_tmpID);
					if(newObject ==null)
					{
						newObject = new PreferredRegion();
						newObject.zipCode_id=s.getString(2);
						newObject.shortiUser_id=s.getString(3);
						newObject.id=_tmpID;
						putToCache(newObject);
					}
					result.add(newObject);
				}
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}


	/**
	 * create a new object in the database
	 */
	static public PreferredRegion createInstance( _dbZipCode _zipCode, _dbShortiUser _shortiUser )
	{
		PreferredRegion result = null;
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbPreferredRegion.createInstance");
			try
			{
				String nextGUID = new java.rmi.server.UID().toString();
				stmt.executeUpdate( "INSERT INTO PreferredRegion ( zipCode_id, shortiUser_id, id) VALUES ( '"+((_zipCode==null)?"":_zipCode.getId())+"',  '"+((_shortiUser==null)?"":_shortiUser.getId())+"', '"+nextGUID+"')");
				result = new PreferredRegion();
				result.zipCode_id= (_zipCode==null)?"":_zipCode.getId();
				result.shortiUser_id= (_shortiUser==null)?"":_shortiUser.getId();
				result.id= nextGUID;
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}


	/**
	 * create a new object in the database
	 */
	static public void newInstance( _dbZipCode _zipCode, _dbShortiUser _shortiUser )
	{
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbPreferredRegion.newInstance");
			try
			{
				String nextGUID = new java.rmi.server.UID().toString();
				stmt.executeUpdate( "INSERT INTO PreferredRegion ( zipCode_id, shortiUser_id, id) VALUES ( '"+((_zipCode==null)?"":_zipCode.getId())+"',  '"+((_shortiUser==null)?"":_shortiUser.getId())+"', '"+nextGUID+"')");
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
	}


	/**
	 * destroy a object in the database
	 */
	static public boolean destroyInstance( String  _key)
	{
		boolean result = false;
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbPreferredRegion.destroyInstance");
			try
			{
					stmt.executeUpdate( "DELETE FROM PreferredRegion WHERE id='"+_key+"'");
					result = true;
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}


	/**
	 * destroy ALL objects in the database
	 */
	static public boolean destroyAll()
	{
		boolean result = false;
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbPreferredRegion.destroyAll");
			try
			{
					stmt.executeUpdate("DELETE from PreferredRegion" );
					result = true;
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}


	/**
	 */
	public String toString()
	{
		StringBuffer result = new StringBuffer(1024);
		result.append(zipCode_id);
		result.append("|");
		result.append(shortiUser_id);
		result.append("|");
		result.append(id);
		return result.toString();
	}


	/**
	 * init the class
	 */
	static
	{
		try
		{
			DatabaseMetaData dMeta = ConnectionManager.getValid().getMetaData ();
			ResultSet result;
			result=dMeta.getColumns(null,null,"PreferredRegion","zipCode_id");
			if(!result.next())
			{
				System.out.println("ERROR: installed DB-schema not compatible to java classes");
				System.out.println("       Attribute 'zipCode_id' in table 'PreferredRegion' missing");
			}
			result.close();
			result=dMeta.getColumns(null,null,"PreferredRegion","shortiUser_id");
			if(!result.next())
			{
				System.out.println("ERROR: installed DB-schema not compatible to java classes");
				System.out.println("       Attribute 'shortiUser_id' in table 'PreferredRegion' missing");
			}
			result.close();
			result=dMeta.getColumns(null,null,"PreferredRegion","id");
			if(!result.next())
			{
				System.out.println("ERROR: installed DB-schema not compatible to java classes");
				System.out.println("       Attribute 'id' in table 'PreferredRegion' missing");
			}
			result.close();
		}
		catch (Exception ex)
		{
		}
	}


}
