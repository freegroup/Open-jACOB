package de.shorti.baseknowledge.objects;

/**
 * Class generated by automatic ClassGenerator
 * Date: Sat May 11 21:15:23 GMT+02:00 2002
 */
import de.shorti.db.*;
import java.util.ArrayList;
import java.util.Iterator;
import java.sql.*;

class _dbTranslation extends dbObject 
{

	int       exampleSentence_id;
	String    trans;
	String    original;
	String    transLanguage_id;	// Foreign Key pointing to Table [Language], Field [id]
	String    originalLanguage_id;	// Foreign Key pointing to Table [Language], Field [id]


	/**
	 * destroy a object in the database
	 */
	public boolean destroy()
	{
		boolean result = false;
		String    _key   = id;
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbTranslation.destroyInstance");
			try
			{
					stmt.executeUpdate( "DELETE FROM Translation WHERE id='"+_key+"'");
					result = true;
					removeFromCache(this);
					id     = null;
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}



	/**
	 * Method:      getExampleSentence_id()
	 * Description: 
	 * Returns:     int
	 */
	public int getExampleSentence_id()
	{
		return exampleSentence_id;
	}

	/**
	 * Method:      setExampleSentence_id(int _exampleSentence_id, boolean _autoCommit)
	 * Description: 
	 * Returns:     void
	 */
	public void setExampleSentence_id(int _exampleSentence_id, boolean _autoCommit)
	{
		exampleSentence_id=_exampleSentence_id;
		if(_autoCommit)
		{
			commit();
		}
	}

	/**
	 * Method:      getTrans()
	 * Description: 
	 * Returns:     String
	 */
	public String getTrans()
	{
		return trans;
	}

	/**
	 * Method:      setTrans(String _trans, boolean _autoCommit)
	 * Description: 
	 * Returns:     void
	 */
	public void setTrans(String _trans, boolean _autoCommit)
	{
		trans=_trans;
		if(_autoCommit)
		{
			commit();
		}
	}

	/**
	 * Method:      getOriginal()
	 * Description: 
	 * Returns:     String
	 */
	public String getOriginal()
	{
		return original;
	}

	/**
	 * Method:      setOriginal(String _original, boolean _autoCommit)
	 * Description: 
	 * Returns:     void
	 */
	public void setOriginal(String _original, boolean _autoCommit)
	{
		original=_original;
		if(_autoCommit)
		{
			commit();
		}
	}

	/**
	 * Method:      getId()
	 * Description: 
	 * Returns:     String
	 */
	public String getId()
	{
		return id;
	}

	/**
	 * Method:      getTransLanguage()
	 * Description: 
	 * Returns:     Language
	 */
	public Language getTransLanguage()
	{
		return Language.findById(transLanguage_id);
	}

	/**
	 * Method:      setTransLanguage()
	 * Description: 
	 * Returns:     void
	 */
	public void setTransLanguage(Language _foreigner, boolean _autocommit)
	{
		transLanguage_id= _foreigner.getId();
		if (_autocommit == true)
			commit();
	}

	/**
	 * Method:      getOriginalLanguage()
	 * Description: 
	 * Returns:     Language
	 */
	public Language getOriginalLanguage()
	{
		return Language.findById(originalLanguage_id);
	}

	/**
	 * Method:      setOriginalLanguage()
	 * Description: 
	 * Returns:     void
	 */
	public void setOriginalLanguage(Language _foreigner, boolean _autocommit)
	{
		originalLanguage_id= _foreigner.getId();
		if (_autocommit == true)
			commit();
	}

	/**
	 *  Method:      findByExampleSentence(int _exampleSentence)
	 *  Description: 
	 *  Returns:     ArrayList<Translation>
	 */
	public static ArrayList findByExampleSentence(int _exampleSentence)
	{
		ArrayList result = new ArrayList();
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbTranslation.findByExampleSentence");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT id, exampleSentence_id, trans, original, transLanguage_id, originalLanguage_id FROM Translation WHERE exampleSentence_id="+_exampleSentence+" order by generatedId desc");
				while(s.next())
				{
					String _tmpID = s.getString(1);
					Translation newObject = (Translation)getFromCache(_tmpID);
					if(newObject ==null)
					{
						newObject = new Translation();
						newObject.exampleSentence_id=s.getInt(2);
						newObject.trans=s.getString(3);
						newObject.original=s.getString(4);
						newObject.transLanguage_id=s.getString(5);
						newObject.originalLanguage_id=s.getString(6);
						newObject.id=_tmpID;
						putToCache(newObject);
					}
					result.add(newObject);
				}
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}

	/**
	 *  Method:      findByTrans(String _trans)
	 *  Description: 
	 *  Returns:     ArrayList<Translation>
	 */
	public static ArrayList findByTrans(String _trans)
	{
		ArrayList result = new ArrayList();
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbTranslation.findByTrans");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT id, exampleSentence_id, trans, original, transLanguage_id, originalLanguage_id FROM Translation WHERE trans='"+toSQL(_trans)+"'"+" order by generatedId desc");
				while(s.next())
				{
					String _tmpID = s.getString(1);
					Translation newObject = (Translation)getFromCache(_tmpID);
					if(newObject ==null)
					{
						newObject = new Translation();
						newObject.exampleSentence_id=s.getInt(2);
						newObject.trans=s.getString(3);
						newObject.original=s.getString(4);
						newObject.transLanguage_id=s.getString(5);
						newObject.originalLanguage_id=s.getString(6);
						newObject.id=_tmpID;
						putToCache(newObject);
					}
					result.add(newObject);
				}
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}

	/**
	 *  Method:      findByOriginal(String _original)
	 *  Description: 
	 *  Returns:     ArrayList<Translation>
	 */
	public static ArrayList findByOriginal(String _original)
	{
		ArrayList result = new ArrayList();
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbTranslation.findByOriginal");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT id, exampleSentence_id, trans, original, transLanguage_id, originalLanguage_id FROM Translation WHERE original='"+toSQL(_original)+"'"+" order by generatedId desc");
				while(s.next())
				{
					String _tmpID = s.getString(1);
					Translation newObject = (Translation)getFromCache(_tmpID);
					if(newObject ==null)
					{
						newObject = new Translation();
						newObject.exampleSentence_id=s.getInt(2);
						newObject.trans=s.getString(3);
						newObject.original=s.getString(4);
						newObject.transLanguage_id=s.getString(5);
						newObject.originalLanguage_id=s.getString(6);
						newObject.id=_tmpID;
						putToCache(newObject);
					}
					result.add(newObject);
				}
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}

	/**
	 *  Method:      findByTransLanguage(_dbLanguage _transLanguage)
	 *  Description: 
	 *  Returns:     ArrayList<Translation>
	 */
	public static ArrayList findByTransLanguage(_dbLanguage _transLanguage)
	{
		ArrayList result = new ArrayList();
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbTranslation.findByTransLanguage");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT id, exampleSentence_id, trans, original, transLanguage_id, originalLanguage_id FROM Translation WHERE transLanguage_id='"+toSQL(((_transLanguage==null)?"":_transLanguage.getId()))+"'"+" order by generatedId desc");
				while(s.next())
				{
					String _tmpID = s.getString(1);
					Translation newObject = (Translation)getFromCache(_tmpID);
					if(newObject ==null)
					{
						newObject = new Translation();
						newObject.exampleSentence_id=s.getInt(2);
						newObject.trans=s.getString(3);
						newObject.original=s.getString(4);
						newObject.transLanguage_id=s.getString(5);
						newObject.originalLanguage_id=s.getString(6);
						newObject.id=_tmpID;
						putToCache(newObject);
					}
					result.add(newObject);
				}
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}

	/**
	 *  Method:      findByOriginalLanguage(_dbLanguage _originalLanguage)
	 *  Description: 
	 *  Returns:     ArrayList<Translation>
	 */
	public static ArrayList findByOriginalLanguage(_dbLanguage _originalLanguage)
	{
		ArrayList result = new ArrayList();
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbTranslation.findByOriginalLanguage");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT id, exampleSentence_id, trans, original, transLanguage_id, originalLanguage_id FROM Translation WHERE originalLanguage_id='"+toSQL(((_originalLanguage==null)?"":_originalLanguage.getId()))+"'"+" order by generatedId desc");
				while(s.next())
				{
					String _tmpID = s.getString(1);
					Translation newObject = (Translation)getFromCache(_tmpID);
					if(newObject ==null)
					{
						newObject = new Translation();
						newObject.exampleSentence_id=s.getInt(2);
						newObject.trans=s.getString(3);
						newObject.original=s.getString(4);
						newObject.transLanguage_id=s.getString(5);
						newObject.originalLanguage_id=s.getString(6);
						newObject.id=_tmpID;
						putToCache(newObject);
					}
					result.add(newObject);
				}
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}

	/**
	 *  Method:      findById(String _id)
	 *  Description: 
	 *  Returns:     Translation
	 */
	public static Translation findById(String _id)
	{
		Translation result = (Translation)getFromCache(_id);
		if(result!=null) return result;
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbTranslation.findById");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT id, exampleSentence_id, trans, original, transLanguage_id, originalLanguage_id FROM Translation WHERE id='"+toSQL(_id)+"'"+" order by generatedId desc");
				if(s.next())
				{
					result = new Translation();
					result.exampleSentence_id= s.getInt(2);
					result.trans= s.getString(3);
					result.original= s.getString(4);
					result.transLanguage_id= s.getString(5);
					result.originalLanguage_id= s.getString(6);
					result.id= _id;
					putToCache(result);
				}
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}

	/**
	 * returns boolean
	 */
	public boolean commit()
	{
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbTranslation.commit");
			try
			{
				stmt.executeUpdate( "UPDATE Translation set exampleSentence_id= "+exampleSentence_id+", trans= '"+toSQL(trans)+"', original= '"+toSQL(original)+"', transLanguage_id= '"+toSQL(transLanguage_id)+"', originalLanguage_id= '"+toSQL(originalLanguage_id)+"' WHERE id='"+id+"'");
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return true;
	}


	/**
	 * returns ArrayList<Translation>
	 */
	public static ArrayList getAll()
	{
		ArrayList result = new ArrayList();
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbTranslation.getAll");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT id, exampleSentence_id, trans, original, transLanguage_id, originalLanguage_id FROM Translation order by generatedId desc");
				while(s.next())
				{
					String _tmpID = s.getString(1);
					Translation newObject = (Translation)getFromCache(_tmpID);
					if(newObject ==null)
					{
						newObject = new Translation();
						newObject.exampleSentence_id=s.getInt(2);
						newObject.trans=s.getString(3);
						newObject.original=s.getString(4);
						newObject.transLanguage_id=s.getString(5);
						newObject.originalLanguage_id=s.getString(6);
						newObject.id=_tmpID;
						putToCache(newObject);
					}
					result.add(newObject);
				}
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}


	/**
	 * create a new object in the database
	 */
	static public Translation createInstance( int  _exampleSentence_id, String  _trans, String  _original, _dbLanguage _transLanguage, _dbLanguage _originalLanguage )
	{
		Translation result = null;
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbTranslation.createInstance");
			try
			{
				String nextGUID = new java.rmi.server.UID().toString();
				stmt.executeUpdate( "INSERT INTO Translation ( exampleSentence_id, trans, original, transLanguage_id, originalLanguage_id, id) VALUES ("+_exampleSentence_id+",  '"+toSQL(_trans)+"',  '"+toSQL(_original)+"',  '"+((_transLanguage==null)?"":_transLanguage.getId())+"',  '"+((_originalLanguage==null)?"":_originalLanguage.getId())+"', '"+nextGUID+"')");
				result = new Translation();
				result.exampleSentence_id= _exampleSentence_id;
				result.trans= _trans;
				result.original= _original;
				result.transLanguage_id= (_transLanguage==null)?"":_transLanguage.getId();
				result.originalLanguage_id= (_originalLanguage==null)?"":_originalLanguage.getId();
				result.id= nextGUID;
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}


	/**
	 * create a new object in the database
	 */
	static public void newInstance( int  _exampleSentence_id, String  _trans, String  _original, _dbLanguage _transLanguage, _dbLanguage _originalLanguage )
	{
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbTranslation.newInstance");
			try
			{
				String nextGUID = new java.rmi.server.UID().toString();
				stmt.executeUpdate( "INSERT INTO Translation ( exampleSentence_id, trans, original, transLanguage_id, originalLanguage_id, id) VALUES ("+_exampleSentence_id+",  '"+toSQL(_trans)+"',  '"+toSQL(_original)+"',  '"+((_transLanguage==null)?"":_transLanguage.getId())+"',  '"+((_originalLanguage==null)?"":_originalLanguage.getId())+"', '"+nextGUID+"')");
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
	}


	/**
	 * destroy a object in the database
	 */
	static public boolean destroyInstance( String  _key)
	{
		boolean result = false;
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbTranslation.destroyInstance");
			try
			{
					stmt.executeUpdate( "DELETE FROM Translation WHERE id='"+_key+"'");
					result = true;
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}


	/**
	 * destroy ALL objects in the database
	 */
	static public boolean destroyAll()
	{
		boolean result = false;
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbTranslation.destroyAll");
			try
			{
					stmt.executeUpdate("DELETE from Translation" );
					result = true;
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}


	/**
	 */
	public String toString()
	{
		StringBuffer result = new StringBuffer(1024);
		result.append(exampleSentence_id);
		result.append("|");
		result.append(trans);
		result.append("|");
		result.append(original);
		result.append("|");
		result.append(transLanguage_id);
		result.append("|");
		result.append(originalLanguage_id);
		result.append("|");
		result.append(id);
		return result.toString();
	}


	/**
	 * init the class
	 */
	static
	{
		try
		{
			DatabaseMetaData dMeta = ConnectionManager.getValid().getMetaData ();
			ResultSet result;
			result=dMeta.getColumns(null,null,"Translation","exampleSentence_id");
			if(!result.next())
			{
				System.out.println("ERROR: installed DB-schema not compatible to java classes");
				System.out.println("       Attribute 'exampleSentence_id' in table 'Translation' missing");
			}
			result.close();
			result=dMeta.getColumns(null,null,"Translation","trans");
			if(!result.next())
			{
				System.out.println("ERROR: installed DB-schema not compatible to java classes");
				System.out.println("       Attribute 'trans' in table 'Translation' missing");
			}
			result.close();
			result=dMeta.getColumns(null,null,"Translation","original");
			if(!result.next())
			{
				System.out.println("ERROR: installed DB-schema not compatible to java classes");
				System.out.println("       Attribute 'original' in table 'Translation' missing");
			}
			result.close();
			result=dMeta.getColumns(null,null,"Translation","transLanguage_id");
			if(!result.next())
			{
				System.out.println("ERROR: installed DB-schema not compatible to java classes");
				System.out.println("       Attribute 'transLanguage_id' in table 'Translation' missing");
			}
			result.close();
			result=dMeta.getColumns(null,null,"Translation","originalLanguage_id");
			if(!result.next())
			{
				System.out.println("ERROR: installed DB-schema not compatible to java classes");
				System.out.println("       Attribute 'originalLanguage_id' in table 'Translation' missing");
			}
			result.close();
			result=dMeta.getColumns(null,null,"Translation","id");
			if(!result.next())
			{
				System.out.println("ERROR: installed DB-schema not compatible to java classes");
				System.out.println("       Attribute 'id' in table 'Translation' missing");
			}
			result.close();
		}
		catch (Exception ex)
		{
		}
	}


}
