package de.shorti.baseknowledge.objects;

/**
 * Class generated by automatic ClassGenerator
 * Date: Sat May 11 21:15:22 GMT+02:00 2002
 */
import de.shorti.db.*;
import java.util.ArrayList;
import java.util.Iterator;
import java.sql.*;

class _dbSystemAlias extends dbObject 
{

	String    question;
	String    alias;


	/**
	 * destroy a object in the database
	 */
	public boolean destroy()
	{
		boolean result = false;
		String    _key   = id;
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbSystemAlias.destroyInstance");
			try
			{
					stmt.executeUpdate( "DELETE FROM SystemAlias WHERE id='"+_key+"'");
					result = true;
					removeFromCache(this);
					id     = null;
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}



	/**
	 * Method:      getQuestion()
	 * Description: 
	 * Returns:     String
	 */
	public String getQuestion()
	{
		return question;
	}

	/**
	 * Method:      setQuestion(String _question, boolean _autoCommit)
	 * Description: 
	 * Returns:     void
	 */
	public void setQuestion(String _question, boolean _autoCommit)
	{
		question=_question;
		if(_autoCommit)
		{
			commit();
		}
	}

	/**
	 * Method:      getAlias()
	 * Description: 
	 * Returns:     String
	 */
	public String getAlias()
	{
		return alias;
	}

	/**
	 * Method:      setAlias(String _alias, boolean _autoCommit)
	 * Description: 
	 * Returns:     void
	 */
	public void setAlias(String _alias, boolean _autoCommit)
	{
		alias=_alias;
		if(_autoCommit)
		{
			commit();
		}
	}

	/**
	 * Method:      getId()
	 * Description: 
	 * Returns:     String
	 */
	public String getId()
	{
		return id;
	}

	/**
	 *  Method:      findByQuestion(String _question)
	 *  Description: 
	 *  Returns:     ArrayList<SystemAlias>
	 */
	public static ArrayList findByQuestion(String _question)
	{
		ArrayList result = new ArrayList();
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbSystemAlias.findByQuestion");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT id, question, alias FROM SystemAlias WHERE question='"+toSQL(_question)+"'"+" order by generatedId desc");
				while(s.next())
				{
					String _tmpID = s.getString(1);
					SystemAlias newObject = (SystemAlias)getFromCache(_tmpID);
					if(newObject ==null)
					{
						newObject = new SystemAlias();
						newObject.question=s.getString(2);
						newObject.alias=s.getString(3);
						newObject.id=_tmpID;
						putToCache(newObject);
					}
					result.add(newObject);
				}
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}

	/**
	 *  Method:      findByAlias(String _alias)
	 *  Description: 
	 *  Returns:     SystemAlias
	 */
	public static SystemAlias findByAlias(String _alias)
	{
		SystemAlias result = null;
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbSystemAlias.findByAlias");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT id, question, alias FROM SystemAlias WHERE alias='"+toSQL(_alias)+"'"+" order by generatedId desc");
				if(s.next())
				{
					String _tmpID = s.getString(1);
					result = (SystemAlias)getFromCache(_tmpID);
					if(result ==null)
					{
						result = new SystemAlias();
						result.question= s.getString(2);
						result.alias= s.getString(3);
						result.id= _tmpID;
						putToCache(result);
					}
				}
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}

	/**
	 *  Method:      findById(String _id)
	 *  Description: 
	 *  Returns:     SystemAlias
	 */
	public static SystemAlias findById(String _id)
	{
		SystemAlias result = (SystemAlias)getFromCache(_id);
		if(result!=null) return result;
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbSystemAlias.findById");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT id, question, alias FROM SystemAlias WHERE id='"+toSQL(_id)+"'"+" order by generatedId desc");
				if(s.next())
				{
					result = new SystemAlias();
					result.question= s.getString(2);
					result.alias= s.getString(3);
					result.id= _id;
					putToCache(result);
				}
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}

	/**
	 * returns boolean
	 */
	public boolean commit()
	{
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbSystemAlias.commit");
			try
			{
				stmt.executeUpdate( "UPDATE SystemAlias set question= '"+toSQL(question)+"', alias= '"+toSQL(alias)+"' WHERE id='"+id+"'");
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return true;
	}


	/**
	 * returns ArrayList<SystemAlias>
	 */
	public static ArrayList getAll()
	{
		ArrayList result = new ArrayList();
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbSystemAlias.getAll");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT id, question, alias FROM SystemAlias order by generatedId desc");
				while(s.next())
				{
					String _tmpID = s.getString(1);
					SystemAlias newObject = (SystemAlias)getFromCache(_tmpID);
					if(newObject ==null)
					{
						newObject = new SystemAlias();
						newObject.question=s.getString(2);
						newObject.alias=s.getString(3);
						newObject.id=_tmpID;
						putToCache(newObject);
					}
					result.add(newObject);
				}
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}


	/**
	 * create a new object in the database
	 */
	static public SystemAlias createInstance( String  _question, String  _alias )
	{
		SystemAlias result = null;
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbSystemAlias.createInstance");
			try
			{
				String nextGUID = new java.rmi.server.UID().toString();
				stmt.executeUpdate( "INSERT INTO SystemAlias ( question, alias, id) VALUES ( '"+toSQL(_question)+"',  '"+toSQL(_alias)+"', '"+nextGUID+"')");
				result = new SystemAlias();
				result.question= _question;
				result.alias= _alias;
				result.id= nextGUID;
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}


	/**
	 * create a new object in the database
	 */
	static public void newInstance( String  _question, String  _alias )
	{
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbSystemAlias.newInstance");
			try
			{
				String nextGUID = new java.rmi.server.UID().toString();
				stmt.executeUpdate( "INSERT INTO SystemAlias ( question, alias, id) VALUES ( '"+toSQL(_question)+"',  '"+toSQL(_alias)+"', '"+nextGUID+"')");
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
	}


	/**
	 * destroy a object in the database
	 */
	static public boolean destroyInstance( String  _key)
	{
		boolean result = false;
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbSystemAlias.destroyInstance");
			try
			{
					stmt.executeUpdate( "DELETE FROM SystemAlias WHERE id='"+_key+"'");
					result = true;
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}


	/**
	 * destroy ALL objects in the database
	 */
	static public boolean destroyAll()
	{
		boolean result = false;
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbSystemAlias.destroyAll");
			try
			{
					stmt.executeUpdate("DELETE from SystemAlias" );
					result = true;
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}


	/**
	 */
	public String toString()
	{
		StringBuffer result = new StringBuffer(1024);
		result.append(question);
		result.append("|");
		result.append(alias);
		result.append("|");
		result.append(id);
		return result.toString();
	}


	/**
	 * init the class
	 */
	static
	{
		try
		{
			DatabaseMetaData dMeta = ConnectionManager.getValid().getMetaData ();
			ResultSet result;
			result=dMeta.getColumns(null,null,"SystemAlias","question");
			if(!result.next())
			{
				System.out.println("ERROR: installed DB-schema not compatible to java classes");
				System.out.println("       Attribute 'question' in table 'SystemAlias' missing");
			}
			result.close();
			result=dMeta.getColumns(null,null,"SystemAlias","alias");
			if(!result.next())
			{
				System.out.println("ERROR: installed DB-schema not compatible to java classes");
				System.out.println("       Attribute 'alias' in table 'SystemAlias' missing");
			}
			result.close();
			result=dMeta.getColumns(null,null,"SystemAlias","id");
			if(!result.next())
			{
				System.out.println("ERROR: installed DB-schema not compatible to java classes");
				System.out.println("       Attribute 'id' in table 'SystemAlias' missing");
			}
			result.close();
		}
		catch (Exception ex)
		{
		}
	}


}
