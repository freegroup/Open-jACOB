package de.shorti.baseknowledge.objects;

/**
 * Class generated by automatic ClassGenerator
 * Date: Sat May 11 21:15:23 GMT+02:00 2002
 */
import de.shorti.db.*;
import java.util.ArrayList;
import java.util.Iterator;
import java.sql.*;

class _dbBillingInformation extends dbObject 
{

	String    partnerCompany_id;	// Foreign Key pointing to Table [PartnerCompany], Field [id]
	String    bill_id;	// Foreign Key pointing to Table [Bill], Field [id]
	String    creatorClass;
	String    reason;
	int       cost;
	String    request_id;	// Foreign Key pointing to Table [Request], Field [id]


	/**
	 * destroy a object in the database
	 */
	public boolean destroy()
	{
		boolean result = false;
		String    _key   = id;
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbBillingInformation.destroyInstance");
			try
			{
					stmt.executeUpdate( "DELETE FROM BillingInformation WHERE id='"+_key+"'");
					result = true;
					removeFromCache(this);
					id     = null;
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}



	/**
	 * Method:      getCreatorClass()
	 * Description: 
	 * Returns:     String
	 */
	public String getCreatorClass()
	{
		return creatorClass;
	}

	/**
	 * Method:      setCreatorClass(String _creatorClass, boolean _autoCommit)
	 * Description: 
	 * Returns:     void
	 */
	public void setCreatorClass(String _creatorClass, boolean _autoCommit)
	{
		creatorClass=_creatorClass;
		if(_autoCommit)
		{
			commit();
		}
	}

	/**
	 * Method:      getReason()
	 * Description: 
	 * Returns:     String
	 */
	public String getReason()
	{
		return reason;
	}

	/**
	 * Method:      setReason(String _reason, boolean _autoCommit)
	 * Description: 
	 * Returns:     void
	 */
	public void setReason(String _reason, boolean _autoCommit)
	{
		reason=_reason;
		if(_autoCommit)
		{
			commit();
		}
	}

	/**
	 * Method:      getCost()
	 * Description: 
	 * Returns:     int
	 */
	public int getCost()
	{
		return cost;
	}

	/**
	 * Method:      setCost(int _cost, boolean _autoCommit)
	 * Description: 
	 * Returns:     void
	 */
	public void setCost(int _cost, boolean _autoCommit)
	{
		cost=_cost;
		if(_autoCommit)
		{
			commit();
		}
	}

	/**
	 * Method:      getId()
	 * Description: 
	 * Returns:     String
	 */
	public String getId()
	{
		return id;
	}

	/**
	 * Method:      getPartnerCompany()
	 * Description: 
	 * Returns:     PartnerCompany
	 */
	public PartnerCompany getPartnerCompany()
	{
		return PartnerCompany.findById(partnerCompany_id);
	}

	/**
	 * Method:      setPartnerCompany()
	 * Description: 
	 * Returns:     void
	 */
	public void setPartnerCompany(PartnerCompany _foreigner, boolean _autocommit)
	{
		partnerCompany_id= _foreigner.getId();
		if (_autocommit == true)
			commit();
	}

	/**
	 * Method:      getBill()
	 * Description: 
	 * Returns:     Bill
	 */
	public Bill getBill()
	{
		return Bill.findById(bill_id);
	}

	/**
	 * Method:      setBill()
	 * Description: 
	 * Returns:     void
	 */
	public void setBill(Bill _foreigner, boolean _autocommit)
	{
		bill_id= _foreigner.getId();
		if (_autocommit == true)
			commit();
	}

	/**
	 * Method:      getRequest()
	 * Description: 
	 * Returns:     Request
	 */
	public Request getRequest()
	{
		return Request.findById(request_id);
	}

	/**
	 * Method:      setRequest()
	 * Description: 
	 * Returns:     void
	 */
	public void setRequest(Request _foreigner, boolean _autocommit)
	{
		request_id= _foreigner.getId();
		if (_autocommit == true)
			commit();
	}

	/**
	 *  Method:      findByPartnerCompany(_dbPartnerCompany _partnerCompany)
	 *  Description: 
	 *  Returns:     ArrayList<BillingInformation>
	 */
	public static ArrayList findByPartnerCompany(_dbPartnerCompany _partnerCompany)
	{
		ArrayList result = new ArrayList();
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbBillingInformation.findByPartnerCompany");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT id, partnerCompany_id, bill_id, creatorClass, reason, cost, request_id FROM BillingInformation WHERE partnerCompany_id='"+toSQL(((_partnerCompany==null)?"":_partnerCompany.getId()))+"'"+" order by generatedId desc");
				while(s.next())
				{
					String _tmpID = s.getString(1);
					BillingInformation newObject = (BillingInformation)getFromCache(_tmpID);
					if(newObject ==null)
					{
						newObject = new BillingInformation();
						newObject.partnerCompany_id=s.getString(2);
						newObject.bill_id=s.getString(3);
						newObject.creatorClass=s.getString(4);
						newObject.reason=s.getString(5);
						newObject.cost=s.getInt(6);
						newObject.request_id=s.getString(7);
						newObject.id=_tmpID;
						putToCache(newObject);
					}
					result.add(newObject);
				}
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}

	/**
	 *  Method:      findByBill(_dbBill _bill)
	 *  Description: 
	 *  Returns:     ArrayList<BillingInformation>
	 */
	public static ArrayList findByBill(_dbBill _bill)
	{
		ArrayList result = new ArrayList();
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbBillingInformation.findByBill");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT id, partnerCompany_id, bill_id, creatorClass, reason, cost, request_id FROM BillingInformation WHERE bill_id='"+toSQL(((_bill==null)?"":_bill.getId()))+"'"+" order by generatedId desc");
				while(s.next())
				{
					String _tmpID = s.getString(1);
					BillingInformation newObject = (BillingInformation)getFromCache(_tmpID);
					if(newObject ==null)
					{
						newObject = new BillingInformation();
						newObject.partnerCompany_id=s.getString(2);
						newObject.bill_id=s.getString(3);
						newObject.creatorClass=s.getString(4);
						newObject.reason=s.getString(5);
						newObject.cost=s.getInt(6);
						newObject.request_id=s.getString(7);
						newObject.id=_tmpID;
						putToCache(newObject);
					}
					result.add(newObject);
				}
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}

	/**
	 *  Method:      findByCreatorClass(String _creatorClass)
	 *  Description: 
	 *  Returns:     ArrayList<BillingInformation>
	 */
	public static ArrayList findByCreatorClass(String _creatorClass)
	{
		ArrayList result = new ArrayList();
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbBillingInformation.findByCreatorClass");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT id, partnerCompany_id, bill_id, creatorClass, reason, cost, request_id FROM BillingInformation WHERE creatorClass='"+toSQL(_creatorClass)+"'"+" order by generatedId desc");
				while(s.next())
				{
					String _tmpID = s.getString(1);
					BillingInformation newObject = (BillingInformation)getFromCache(_tmpID);
					if(newObject ==null)
					{
						newObject = new BillingInformation();
						newObject.partnerCompany_id=s.getString(2);
						newObject.bill_id=s.getString(3);
						newObject.creatorClass=s.getString(4);
						newObject.reason=s.getString(5);
						newObject.cost=s.getInt(6);
						newObject.request_id=s.getString(7);
						newObject.id=_tmpID;
						putToCache(newObject);
					}
					result.add(newObject);
				}
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}

	/**
	 *  Method:      findByReason(String _reason)
	 *  Description: 
	 *  Returns:     ArrayList<BillingInformation>
	 */
	public static ArrayList findByReason(String _reason)
	{
		ArrayList result = new ArrayList();
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbBillingInformation.findByReason");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT id, partnerCompany_id, bill_id, creatorClass, reason, cost, request_id FROM BillingInformation WHERE reason='"+toSQL(_reason)+"'"+" order by generatedId desc");
				while(s.next())
				{
					String _tmpID = s.getString(1);
					BillingInformation newObject = (BillingInformation)getFromCache(_tmpID);
					if(newObject ==null)
					{
						newObject = new BillingInformation();
						newObject.partnerCompany_id=s.getString(2);
						newObject.bill_id=s.getString(3);
						newObject.creatorClass=s.getString(4);
						newObject.reason=s.getString(5);
						newObject.cost=s.getInt(6);
						newObject.request_id=s.getString(7);
						newObject.id=_tmpID;
						putToCache(newObject);
					}
					result.add(newObject);
				}
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}

	/**
	 *  Method:      findByCost(int _cost)
	 *  Description: 
	 *  Returns:     ArrayList<BillingInformation>
	 */
	public static ArrayList findByCost(int _cost)
	{
		ArrayList result = new ArrayList();
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbBillingInformation.findByCost");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT id, partnerCompany_id, bill_id, creatorClass, reason, cost, request_id FROM BillingInformation WHERE cost="+_cost+" order by generatedId desc");
				while(s.next())
				{
					String _tmpID = s.getString(1);
					BillingInformation newObject = (BillingInformation)getFromCache(_tmpID);
					if(newObject ==null)
					{
						newObject = new BillingInformation();
						newObject.partnerCompany_id=s.getString(2);
						newObject.bill_id=s.getString(3);
						newObject.creatorClass=s.getString(4);
						newObject.reason=s.getString(5);
						newObject.cost=s.getInt(6);
						newObject.request_id=s.getString(7);
						newObject.id=_tmpID;
						putToCache(newObject);
					}
					result.add(newObject);
				}
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}

	/**
	 *  Method:      findByRequest(_dbRequest _request)
	 *  Description: 
	 *  Returns:     ArrayList<BillingInformation>
	 */
	public static ArrayList findByRequest(_dbRequest _request)
	{
		ArrayList result = new ArrayList();
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbBillingInformation.findByRequest");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT id, partnerCompany_id, bill_id, creatorClass, reason, cost, request_id FROM BillingInformation WHERE request_id='"+toSQL(((_request==null)?"":_request.getId()))+"'"+" order by generatedId desc");
				while(s.next())
				{
					String _tmpID = s.getString(1);
					BillingInformation newObject = (BillingInformation)getFromCache(_tmpID);
					if(newObject ==null)
					{
						newObject = new BillingInformation();
						newObject.partnerCompany_id=s.getString(2);
						newObject.bill_id=s.getString(3);
						newObject.creatorClass=s.getString(4);
						newObject.reason=s.getString(5);
						newObject.cost=s.getInt(6);
						newObject.request_id=s.getString(7);
						newObject.id=_tmpID;
						putToCache(newObject);
					}
					result.add(newObject);
				}
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}

	/**
	 *  Method:      findById(String _id)
	 *  Description: 
	 *  Returns:     BillingInformation
	 */
	public static BillingInformation findById(String _id)
	{
		BillingInformation result = (BillingInformation)getFromCache(_id);
		if(result!=null) return result;
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbBillingInformation.findById");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT id, partnerCompany_id, bill_id, creatorClass, reason, cost, request_id FROM BillingInformation WHERE id='"+toSQL(_id)+"'"+" order by generatedId desc");
				if(s.next())
				{
					result = new BillingInformation();
					result.partnerCompany_id= s.getString(2);
					result.bill_id= s.getString(3);
					result.creatorClass= s.getString(4);
					result.reason= s.getString(5);
					result.cost= s.getInt(6);
					result.request_id= s.getString(7);
					result.id= _id;
					putToCache(result);
				}
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}

	/**
	 * returns boolean
	 */
	public boolean commit()
	{
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbBillingInformation.commit");
			try
			{
				stmt.executeUpdate( "UPDATE BillingInformation set partnerCompany_id= '"+toSQL(partnerCompany_id)+"', bill_id= '"+toSQL(bill_id)+"', creatorClass= '"+toSQL(creatorClass)+"', reason= '"+toSQL(reason)+"', cost= "+cost+", request_id= '"+toSQL(request_id)+"' WHERE id='"+id+"'");
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return true;
	}


	/**
	 * returns ArrayList<BillingInformation>
	 */
	public static ArrayList getAll()
	{
		ArrayList result = new ArrayList();
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbBillingInformation.getAll");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT id, partnerCompany_id, bill_id, creatorClass, reason, cost, request_id FROM BillingInformation order by generatedId desc");
				while(s.next())
				{
					String _tmpID = s.getString(1);
					BillingInformation newObject = (BillingInformation)getFromCache(_tmpID);
					if(newObject ==null)
					{
						newObject = new BillingInformation();
						newObject.partnerCompany_id=s.getString(2);
						newObject.bill_id=s.getString(3);
						newObject.creatorClass=s.getString(4);
						newObject.reason=s.getString(5);
						newObject.cost=s.getInt(6);
						newObject.request_id=s.getString(7);
						newObject.id=_tmpID;
						putToCache(newObject);
					}
					result.add(newObject);
				}
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}


	/**
	 * create a new object in the database
	 */
	static public BillingInformation createInstance( _dbPartnerCompany _partnerCompany, _dbBill _bill, String  _creatorClass, String  _reason, int  _cost, _dbRequest _request )
	{
		BillingInformation result = null;
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbBillingInformation.createInstance");
			try
			{
				String nextGUID = new java.rmi.server.UID().toString();
				stmt.executeUpdate( "INSERT INTO BillingInformation ( partnerCompany_id, bill_id, creatorClass, reason, cost, request_id, id) VALUES ( '"+((_partnerCompany==null)?"":_partnerCompany.getId())+"',  '"+((_bill==null)?"":_bill.getId())+"',  '"+toSQL(_creatorClass)+"',  '"+toSQL(_reason)+"', "+_cost+",  '"+((_request==null)?"":_request.getId())+"', '"+nextGUID+"')");
				result = new BillingInformation();
				result.partnerCompany_id= (_partnerCompany==null)?"":_partnerCompany.getId();
				result.bill_id= (_bill==null)?"":_bill.getId();
				result.creatorClass= _creatorClass;
				result.reason= _reason;
				result.cost= _cost;
				result.request_id= (_request==null)?"":_request.getId();
				result.id= nextGUID;
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}


	/**
	 * create a new object in the database
	 */
	static public void newInstance( _dbPartnerCompany _partnerCompany, _dbBill _bill, String  _creatorClass, String  _reason, int  _cost, _dbRequest _request )
	{
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbBillingInformation.newInstance");
			try
			{
				String nextGUID = new java.rmi.server.UID().toString();
				stmt.executeUpdate( "INSERT INTO BillingInformation ( partnerCompany_id, bill_id, creatorClass, reason, cost, request_id, id) VALUES ( '"+((_partnerCompany==null)?"":_partnerCompany.getId())+"',  '"+((_bill==null)?"":_bill.getId())+"',  '"+toSQL(_creatorClass)+"',  '"+toSQL(_reason)+"', "+_cost+",  '"+((_request==null)?"":_request.getId())+"', '"+nextGUID+"')");
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
	}


	/**
	 * destroy a object in the database
	 */
	static public boolean destroyInstance( String  _key)
	{
		boolean result = false;
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbBillingInformation.destroyInstance");
			try
			{
					stmt.executeUpdate( "DELETE FROM BillingInformation WHERE id='"+_key+"'");
					result = true;
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}


	/**
	 * destroy ALL objects in the database
	 */
	static public boolean destroyAll()
	{
		boolean result = false;
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbBillingInformation.destroyAll");
			try
			{
					stmt.executeUpdate("DELETE from BillingInformation" );
					result = true;
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}


	/**
	 */
	public String toString()
	{
		StringBuffer result = new StringBuffer(1024);
		result.append(partnerCompany_id);
		result.append("|");
		result.append(bill_id);
		result.append("|");
		result.append(creatorClass);
		result.append("|");
		result.append(reason);
		result.append("|");
		result.append(cost);
		result.append("|");
		result.append(request_id);
		result.append("|");
		result.append(id);
		return result.toString();
	}


	/**
	 * init the class
	 */
	static
	{
		try
		{
			DatabaseMetaData dMeta = ConnectionManager.getValid().getMetaData ();
			ResultSet result;
			result=dMeta.getColumns(null,null,"BillingInformation","partnerCompany_id");
			if(!result.next())
			{
				System.out.println("ERROR: installed DB-schema not compatible to java classes");
				System.out.println("       Attribute 'partnerCompany_id' in table 'BillingInformation' missing");
			}
			result.close();
			result=dMeta.getColumns(null,null,"BillingInformation","bill_id");
			if(!result.next())
			{
				System.out.println("ERROR: installed DB-schema not compatible to java classes");
				System.out.println("       Attribute 'bill_id' in table 'BillingInformation' missing");
			}
			result.close();
			result=dMeta.getColumns(null,null,"BillingInformation","creatorClass");
			if(!result.next())
			{
				System.out.println("ERROR: installed DB-schema not compatible to java classes");
				System.out.println("       Attribute 'creatorClass' in table 'BillingInformation' missing");
			}
			result.close();
			result=dMeta.getColumns(null,null,"BillingInformation","reason");
			if(!result.next())
			{
				System.out.println("ERROR: installed DB-schema not compatible to java classes");
				System.out.println("       Attribute 'reason' in table 'BillingInformation' missing");
			}
			result.close();
			result=dMeta.getColumns(null,null,"BillingInformation","cost");
			if(!result.next())
			{
				System.out.println("ERROR: installed DB-schema not compatible to java classes");
				System.out.println("       Attribute 'cost' in table 'BillingInformation' missing");
			}
			result.close();
			result=dMeta.getColumns(null,null,"BillingInformation","request_id");
			if(!result.next())
			{
				System.out.println("ERROR: installed DB-schema not compatible to java classes");
				System.out.println("       Attribute 'request_id' in table 'BillingInformation' missing");
			}
			result.close();
			result=dMeta.getColumns(null,null,"BillingInformation","id");
			if(!result.next())
			{
				System.out.println("ERROR: installed DB-schema not compatible to java classes");
				System.out.println("       Attribute 'id' in table 'BillingInformation' missing");
			}
			result.close();
		}
		catch (Exception ex)
		{
		}
	}


}
