package de.shorti.baseknowledge.objects;

/**
 * Class generated by automatic ClassGenerator
 * Date: Sat May 11 21:15:21 GMT+02:00 2002
 */
import de.shorti.db.*;
import java.util.ArrayList;
import java.util.Iterator;
import java.sql.*;

class _dbTipOfTheDay extends dbObject 
{

	long      autoID;
	Date      createDate;
	String    text;
	String    language_id;	// Foreign Key pointing to Table [Language], Field [id]
	int       sendCount;


	/**
	 * destroy a object in the database
	 */
	public boolean destroy()
	{
		boolean result = false;
		String    _key   = id;
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbTipOfTheDay.destroyInstance");
			try
			{
					stmt.executeUpdate( "DELETE FROM TipOfTheDay WHERE id='"+_key+"'");
					result = true;
					removeFromCache(this);
					id     = null;
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}



	/**
	 * Method:      getAutoID()
	 * Description: 
	 * Returns:     long
	 */
	public long getAutoID()
	{
		return autoID;
	}

	/**
	 * Method:      getCreateDate()
	 * Description: 
	 * Returns:     Date
	 */
	public Date getCreateDate()
	{
		return createDate;
	}

	/**
	 * Method:      setCreateDate(Date _createDate, boolean _autoCommit)
	 * Description: 
	 * Returns:     void
	 */
	public void setCreateDate(Date _createDate, boolean _autoCommit)
	{
		createDate=_createDate;
		if(_autoCommit)
		{
			commit();
		}
	}

	/**
	 * Method:      getText()
	 * Description: 
	 * Returns:     String
	 */
	public String getText()
	{
		return text;
	}

	/**
	 * Method:      setText(String _text, boolean _autoCommit)
	 * Description: 
	 * Returns:     void
	 */
	public void setText(String _text, boolean _autoCommit)
	{
		text=_text;
		if(_autoCommit)
		{
			commit();
		}
	}

	/**
	 * Method:      getSendCount()
	 * Description: 
	 * Returns:     int
	 */
	public int getSendCount()
	{
		return sendCount;
	}

	/**
	 * Method:      setSendCount(int _sendCount, boolean _autoCommit)
	 * Description: 
	 * Returns:     void
	 */
	public void setSendCount(int _sendCount, boolean _autoCommit)
	{
		sendCount=_sendCount;
		if(_autoCommit)
		{
			commit();
		}
	}

	/**
	 * Method:      getId()
	 * Description: 
	 * Returns:     String
	 */
	public String getId()
	{
		return id;
	}

	/**
	 * Method:      getLanguage()
	 * Description: 
	 * Returns:     Language
	 */
	public Language getLanguage()
	{
		return Language.findById(language_id);
	}

	/**
	 * Method:      setLanguage()
	 * Description: 
	 * Returns:     void
	 */
	public void setLanguage(Language _foreigner, boolean _autocommit)
	{
		language_id= _foreigner.getId();
		if (_autocommit == true)
			commit();
	}

	/**
	 *  Method:      findByAutoID(long _autoID)
	 *  Description: 
	 *  Returns:     ArrayList<TipOfTheDay>
	 */
	public static ArrayList findByAutoID(long _autoID)
	{
		ArrayList result = new ArrayList();
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbTipOfTheDay.findByAutoID");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT id, autoID, createDate, text, language_id, sendCount FROM TipOfTheDay WHERE autoID="+_autoID+" order by generatedId desc");
				while(s.next())
				{
					String _tmpID = s.getString(1);
					TipOfTheDay newObject = (TipOfTheDay)getFromCache(_tmpID);
					if(newObject ==null)
					{
						newObject = new TipOfTheDay();
						newObject.autoID=s.getLong(2);
						newObject.createDate=s.getDate(3);
						newObject.text=s.getString(4);
						newObject.language_id=s.getString(5);
						newObject.sendCount=s.getInt(6);
						newObject.id=_tmpID;
						putToCache(newObject);
					}
					result.add(newObject);
				}
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}

	/**
	 *  Method:      findByCreateDate(Date _createDate)
	 *  Description: 
	 *  Returns:     ArrayList<TipOfTheDay>
	 */
	public static ArrayList findByCreateDate(Date _createDate)
	{
		ArrayList result = new ArrayList();
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbTipOfTheDay.findByCreateDate");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT id, autoID, createDate, text, language_id, sendCount FROM TipOfTheDay WHERE createDate='"+toSQL(_createDate)+"'"+" order by generatedId desc");
				while(s.next())
				{
					String _tmpID = s.getString(1);
					TipOfTheDay newObject = (TipOfTheDay)getFromCache(_tmpID);
					if(newObject ==null)
					{
						newObject = new TipOfTheDay();
						newObject.autoID=s.getLong(2);
						newObject.createDate=s.getDate(3);
						newObject.text=s.getString(4);
						newObject.language_id=s.getString(5);
						newObject.sendCount=s.getInt(6);
						newObject.id=_tmpID;
						putToCache(newObject);
					}
					result.add(newObject);
				}
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}

	/**
	 *  Method:      findByText(String _text)
	 *  Description: 
	 *  Returns:     ArrayList<TipOfTheDay>
	 */
	public static ArrayList findByText(String _text)
	{
		ArrayList result = new ArrayList();
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbTipOfTheDay.findByText");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT id, autoID, createDate, text, language_id, sendCount FROM TipOfTheDay WHERE text='"+toSQL(_text)+"'"+" order by generatedId desc");
				while(s.next())
				{
					String _tmpID = s.getString(1);
					TipOfTheDay newObject = (TipOfTheDay)getFromCache(_tmpID);
					if(newObject ==null)
					{
						newObject = new TipOfTheDay();
						newObject.autoID=s.getLong(2);
						newObject.createDate=s.getDate(3);
						newObject.text=s.getString(4);
						newObject.language_id=s.getString(5);
						newObject.sendCount=s.getInt(6);
						newObject.id=_tmpID;
						putToCache(newObject);
					}
					result.add(newObject);
				}
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}

	/**
	 *  Method:      findByLanguage(_dbLanguage _language)
	 *  Description: 
	 *  Returns:     ArrayList<TipOfTheDay>
	 */
	public static ArrayList findByLanguage(_dbLanguage _language)
	{
		ArrayList result = new ArrayList();
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbTipOfTheDay.findByLanguage");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT id, autoID, createDate, text, language_id, sendCount FROM TipOfTheDay WHERE language_id='"+toSQL(((_language==null)?"":_language.getId()))+"'"+" order by generatedId desc");
				while(s.next())
				{
					String _tmpID = s.getString(1);
					TipOfTheDay newObject = (TipOfTheDay)getFromCache(_tmpID);
					if(newObject ==null)
					{
						newObject = new TipOfTheDay();
						newObject.autoID=s.getLong(2);
						newObject.createDate=s.getDate(3);
						newObject.text=s.getString(4);
						newObject.language_id=s.getString(5);
						newObject.sendCount=s.getInt(6);
						newObject.id=_tmpID;
						putToCache(newObject);
					}
					result.add(newObject);
				}
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}

	/**
	 *  Method:      findBySendCount(int _sendCount)
	 *  Description: 
	 *  Returns:     ArrayList<TipOfTheDay>
	 */
	public static ArrayList findBySendCount(int _sendCount)
	{
		ArrayList result = new ArrayList();
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbTipOfTheDay.findBySendCount");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT id, autoID, createDate, text, language_id, sendCount FROM TipOfTheDay WHERE sendCount="+_sendCount+" order by generatedId desc");
				while(s.next())
				{
					String _tmpID = s.getString(1);
					TipOfTheDay newObject = (TipOfTheDay)getFromCache(_tmpID);
					if(newObject ==null)
					{
						newObject = new TipOfTheDay();
						newObject.autoID=s.getLong(2);
						newObject.createDate=s.getDate(3);
						newObject.text=s.getString(4);
						newObject.language_id=s.getString(5);
						newObject.sendCount=s.getInt(6);
						newObject.id=_tmpID;
						putToCache(newObject);
					}
					result.add(newObject);
				}
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}

	/**
	 *  Method:      findById(String _id)
	 *  Description: 
	 *  Returns:     TipOfTheDay
	 */
	public static TipOfTheDay findById(String _id)
	{
		TipOfTheDay result = (TipOfTheDay)getFromCache(_id);
		if(result!=null) return result;
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbTipOfTheDay.findById");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT id, autoID, createDate, text, language_id, sendCount FROM TipOfTheDay WHERE id='"+toSQL(_id)+"'"+" order by generatedId desc");
				if(s.next())
				{
					result = new TipOfTheDay();
					result.autoID= s.getLong(2);
					result.createDate= s.getDate(3);
					result.text= s.getString(4);
					result.language_id= s.getString(5);
					result.sendCount= s.getInt(6);
					result.id= _id;
					putToCache(result);
				}
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}

	/**
	 * returns boolean
	 */
	public boolean commit()
	{
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbTipOfTheDay.commit");
			try
			{
				stmt.executeUpdate( "UPDATE TipOfTheDay set createDate= '"+toSQL(createDate)+"', text= '"+toSQL(text)+"', language_id= '"+toSQL(language_id)+"', sendCount= "+sendCount+" WHERE id='"+id+"'");
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return true;
	}


	/**
	 * returns ArrayList<TipOfTheDay>
	 */
	public static ArrayList getAll()
	{
		ArrayList result = new ArrayList();
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbTipOfTheDay.getAll");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT id, autoID, createDate, text, language_id, sendCount FROM TipOfTheDay order by generatedId desc");
				while(s.next())
				{
					String _tmpID = s.getString(1);
					TipOfTheDay newObject = (TipOfTheDay)getFromCache(_tmpID);
					if(newObject ==null)
					{
						newObject = new TipOfTheDay();
						newObject.autoID=s.getLong(2);
						newObject.createDate=s.getDate(3);
						newObject.text=s.getString(4);
						newObject.language_id=s.getString(5);
						newObject.sendCount=s.getInt(6);
						newObject.id=_tmpID;
						putToCache(newObject);
					}
					result.add(newObject);
				}
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}


	/**
	 * create a new object in the database
	 */
	static public TipOfTheDay createInstance( Date  _createDate, String  _text, _dbLanguage _language, int  _sendCount )
	{
		TipOfTheDay result = null;
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbTipOfTheDay.createInstance");
			try
			{
				String nextGUID = new java.rmi.server.UID().toString();
				stmt.executeUpdate( "INSERT INTO TipOfTheDay ( createDate, text, language_id, sendCount, id) VALUES ( '"+toSQL(_createDate)+"',  '"+toSQL(_text)+"',  '"+((_language==null)?"":_language.getId())+"', "+_sendCount+", '"+nextGUID+"')");
				// the object has an autoincrement property. This property is
				// generated by the database. An select to the database is required
				// to retrieve this id
				result = findById(nextGUID);
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}


	/**
	 * create a new object in the database
	 */
	static public void newInstance( Date  _createDate, String  _text, _dbLanguage _language, int  _sendCount )
	{
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbTipOfTheDay.newInstance");
			try
			{
				String nextGUID = new java.rmi.server.UID().toString();
				stmt.executeUpdate( "INSERT INTO TipOfTheDay ( createDate, text, language_id, sendCount, id) VALUES ( '"+toSQL(_createDate)+"',  '"+toSQL(_text)+"',  '"+((_language==null)?"":_language.getId())+"', "+_sendCount+", '"+nextGUID+"')");
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
	}


	/**
	 * destroy a object in the database
	 */
	static public boolean destroyInstance( String  _key)
	{
		boolean result = false;
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbTipOfTheDay.destroyInstance");
			try
			{
					stmt.executeUpdate( "DELETE FROM TipOfTheDay WHERE id='"+_key+"'");
					result = true;
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}


	/**
	 * destroy ALL objects in the database
	 */
	static public boolean destroyAll()
	{
		boolean result = false;
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbTipOfTheDay.destroyAll");
			try
			{
					stmt.executeUpdate("DELETE from TipOfTheDay" );
					result = true;
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}


	/**
	 */
	public String toString()
	{
		StringBuffer result = new StringBuffer(1024);
		result.append(autoID);
		result.append("|");
		result.append(createDate);
		result.append("|");
		result.append(text);
		result.append("|");
		result.append(language_id);
		result.append("|");
		result.append(sendCount);
		result.append("|");
		result.append(id);
		return result.toString();
	}


	/**
	 * init the class
	 */
	static
	{
		try
		{
			DatabaseMetaData dMeta = ConnectionManager.getValid().getMetaData ();
			ResultSet result;
			result=dMeta.getColumns(null,null,"TipOfTheDay","autoID");
			if(!result.next())
			{
				System.out.println("ERROR: installed DB-schema not compatible to java classes");
				System.out.println("       Attribute 'autoID' in table 'TipOfTheDay' missing");
			}
			result.close();
			result=dMeta.getColumns(null,null,"TipOfTheDay","createDate");
			if(!result.next())
			{
				System.out.println("ERROR: installed DB-schema not compatible to java classes");
				System.out.println("       Attribute 'createDate' in table 'TipOfTheDay' missing");
			}
			result.close();
			result=dMeta.getColumns(null,null,"TipOfTheDay","text");
			if(!result.next())
			{
				System.out.println("ERROR: installed DB-schema not compatible to java classes");
				System.out.println("       Attribute 'text' in table 'TipOfTheDay' missing");
			}
			result.close();
			result=dMeta.getColumns(null,null,"TipOfTheDay","language_id");
			if(!result.next())
			{
				System.out.println("ERROR: installed DB-schema not compatible to java classes");
				System.out.println("       Attribute 'language_id' in table 'TipOfTheDay' missing");
			}
			result.close();
			result=dMeta.getColumns(null,null,"TipOfTheDay","sendCount");
			if(!result.next())
			{
				System.out.println("ERROR: installed DB-schema not compatible to java classes");
				System.out.println("       Attribute 'sendCount' in table 'TipOfTheDay' missing");
			}
			result.close();
			result=dMeta.getColumns(null,null,"TipOfTheDay","id");
			if(!result.next())
			{
				System.out.println("ERROR: installed DB-schema not compatible to java classes");
				System.out.println("       Attribute 'id' in table 'TipOfTheDay' missing");
			}
			result.close();
		}
		catch (Exception ex)
		{
		}
	}


}
