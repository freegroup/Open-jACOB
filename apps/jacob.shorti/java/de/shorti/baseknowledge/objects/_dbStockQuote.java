package de.shorti.baseknowledge.objects;

/**
 * Class generated by automatic ClassGenerator
 * Date: Sat May 11 21:15:24 GMT+02:00 2002
 */
import java.sql.DatabaseMetaData;
import java.sql.ResultSet;
import java.util.ArrayList;

class _dbStockQuote extends dbObject 
{

	double    yearDiffPercentage;
	double    currentQuote;
	double    yearDiffAbsolute;
	String    longName;
	int       warningCount;
	double    weekDiffPercentage;
	String    WKN;
	String    quoteTime;
	double    dayDiffAbsolute;
	String    quoteDate;
	double    dayDiffPercentage;
	double    weekDiffAbsolute;
	String    stockExchange;


	/**
	 * destroy a object in the database
	 */
	public boolean destroy()
	{
		boolean result = false;
		String    _key   = id;
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbStockQuote.destroyInstance");
			try
			{
					stmt.executeUpdate( "DELETE FROM StockQuote WHERE id='"+_key+"'");
					result = true;
					removeFromCache(this);
					id     = null;
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}



	/**
	 * Method:      getYearDiffPercentage()
	 * Description: 
	 * Returns:     double
	 */
	public double getYearDiffPercentage()
	{
		return yearDiffPercentage;
	}

	/**
	 * Method:      setYearDiffPercentage(double _yearDiffPercentage, boolean _autoCommit)
	 * Description: 
	 * Returns:     void
	 */
	public void setYearDiffPercentage(double _yearDiffPercentage, boolean _autoCommit)
	{
		yearDiffPercentage=_yearDiffPercentage;
		if(_autoCommit)
		{
			commit();
		}
	}

	/**
	 * Method:      getCurrentQuote()
	 * Description: 
	 * Returns:     double
	 */
	public double getCurrentQuote()
	{
		return currentQuote;
	}

	/**
	 * Method:      setCurrentQuote(double _currentQuote, boolean _autoCommit)
	 * Description: 
	 * Returns:     void
	 */
	public void setCurrentQuote(double _currentQuote, boolean _autoCommit)
	{
		currentQuote=_currentQuote;
		if(_autoCommit)
		{
			commit();
		}
	}

	/**
	 * Method:      getYearDiffAbsolute()
	 * Description: 
	 * Returns:     double
	 */
	public double getYearDiffAbsolute()
	{
		return yearDiffAbsolute;
	}

	/**
	 * Method:      setYearDiffAbsolute(double _yearDiffAbsolute, boolean _autoCommit)
	 * Description: 
	 * Returns:     void
	 */
	public void setYearDiffAbsolute(double _yearDiffAbsolute, boolean _autoCommit)
	{
		yearDiffAbsolute=_yearDiffAbsolute;
		if(_autoCommit)
		{
			commit();
		}
	}

	/**
	 * Method:      getId()
	 * Description: 
	 * Returns:     String
	 */
	public String getId()
	{
		return id;
	}

	/**
	 * Method:      getLongName()
	 * Description: 
	 * Returns:     String
	 */
	public String getLongName()
	{
		return longName;
	}

	/**
	 * Method:      setLongName(String _longName, boolean _autoCommit)
	 * Description: 
	 * Returns:     void
	 */
	public void setLongName(String _longName, boolean _autoCommit)
	{
		longName=_longName;
		if(_autoCommit)
		{
			commit();
		}
	}

	/**
	 * Method:      getWarningCount()
	 * Description: 
	 * Returns:     int
	 */
	public int getWarningCount()
	{
		return warningCount;
	}

	/**
	 * Method:      setWarningCount(int _warningCount, boolean _autoCommit)
	 * Description: 
	 * Returns:     void
	 */
	public void setWarningCount(int _warningCount, boolean _autoCommit)
	{
		warningCount=_warningCount;
		if(_autoCommit)
		{
			commit();
		}
	}

	/**
	 * Method:      getWeekDiffPercentage()
	 * Description: 
	 * Returns:     double
	 */
	public double getWeekDiffPercentage()
	{
		return weekDiffPercentage;
	}

	/**
	 * Method:      setWeekDiffPercentage(double _weekDiffPercentage, boolean _autoCommit)
	 * Description: 
	 * Returns:     void
	 */
	public void setWeekDiffPercentage(double _weekDiffPercentage, boolean _autoCommit)
	{
		weekDiffPercentage=_weekDiffPercentage;
		if(_autoCommit)
		{
			commit();
		}
	}

	/**
	 * Method:      getWKN()
	 * Description: 
	 * Returns:     String
	 */
	public String getWKN()
	{
		return WKN;
	}

	/**
	 * Method:      setWKN(String _WKN, boolean _autoCommit)
	 * Description: 
	 * Returns:     void
	 */
	public void setWKN(String _WKN, boolean _autoCommit)
	{
		WKN=_WKN;
		if(_autoCommit)
		{
			commit();
		}
	}

	/**
	 * Method:      getQuoteTime()
	 * Description: 
	 * Returns:     String
	 */
	public String getQuoteTime()
	{
		return quoteTime;
	}

	/**
	 * Method:      setQuoteTime(String _quoteTime, boolean _autoCommit)
	 * Description: 
	 * Returns:     void
	 */
	public void setQuoteTime(String _quoteTime, boolean _autoCommit)
	{
		quoteTime=_quoteTime;
		if(_autoCommit)
		{
			commit();
		}
	}

	/**
	 * Method:      getDayDiffAbsolute()
	 * Description: 
	 * Returns:     double
	 */
	public double getDayDiffAbsolute()
	{
		return dayDiffAbsolute;
	}

	/**
	 * Method:      setDayDiffAbsolute(double _dayDiffAbsolute, boolean _autoCommit)
	 * Description: 
	 * Returns:     void
	 */
	public void setDayDiffAbsolute(double _dayDiffAbsolute, boolean _autoCommit)
	{
		dayDiffAbsolute=_dayDiffAbsolute;
		if(_autoCommit)
		{
			commit();
		}
	}

	/**
	 * Method:      getQuoteDate()
	 * Description: 
	 * Returns:     String
	 */
	public String getQuoteDate()
	{
		return quoteDate;
	}

	/**
	 * Method:      setQuoteDate(String _quoteDate, boolean _autoCommit)
	 * Description: 
	 * Returns:     void
	 */
	public void setQuoteDate(String _quoteDate, boolean _autoCommit)
	{
		quoteDate=_quoteDate;
		if(_autoCommit)
		{
			commit();
		}
	}

	/**
	 * Method:      getDayDiffPercentage()
	 * Description: 
	 * Returns:     double
	 */
	public double getDayDiffPercentage()
	{
		return dayDiffPercentage;
	}

	/**
	 * Method:      setDayDiffPercentage(double _dayDiffPercentage, boolean _autoCommit)
	 * Description: 
	 * Returns:     void
	 */
	public void setDayDiffPercentage(double _dayDiffPercentage, boolean _autoCommit)
	{
		dayDiffPercentage=_dayDiffPercentage;
		if(_autoCommit)
		{
			commit();
		}
	}

	/**
	 * Method:      getWeekDiffAbsolute()
	 * Description: 
	 * Returns:     double
	 */
	public double getWeekDiffAbsolute()
	{
		return weekDiffAbsolute;
	}

	/**
	 * Method:      setWeekDiffAbsolute(double _weekDiffAbsolute, boolean _autoCommit)
	 * Description: 
	 * Returns:     void
	 */
	public void setWeekDiffAbsolute(double _weekDiffAbsolute, boolean _autoCommit)
	{
		weekDiffAbsolute=_weekDiffAbsolute;
		if(_autoCommit)
		{
			commit();
		}
	}

	/**
	 * Method:      getStockExchange()
	 * Description: 
	 * Returns:     String
	 */
	public String getStockExchange()
	{
		return stockExchange;
	}

	/**
	 * Method:      setStockExchange(String _stockExchange, boolean _autoCommit)
	 * Description: 
	 * Returns:     void
	 */
	public void setStockExchange(String _stockExchange, boolean _autoCommit)
	{
		stockExchange=_stockExchange;
		if(_autoCommit)
		{
			commit();
		}
	}

	/**
	 *  Method:      findByYearDiffPercentage(double _yearDiffPercentage)
	 *  Description: 
	 *  Returns:     ArrayList<StockQuote>
	 */
	public static ArrayList findByYearDiffPercentage(double _yearDiffPercentage)
	{
		ArrayList result = new ArrayList();
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbStockQuote.findByYearDiffPercentage");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT id, yearDiffPercentage, currentQuote, yearDiffAbsolute, longName, warningCount, weekDiffPercentage, WKN, quoteTime, dayDiffAbsolute, quoteDate, dayDiffPercentage, weekDiffAbsolute, stockExchange FROM StockQuote WHERE yearDiffPercentage="+_yearDiffPercentage+" order by generatedId desc");
				while(s.next())
				{
					String _tmpID = s.getString(1);
					StockQuote newObject = (StockQuote)getFromCache(_tmpID);
					if(newObject ==null)
					{
						newObject = new StockQuote();
						newObject.yearDiffPercentage=s.getDouble(2);
						newObject.currentQuote=s.getDouble(3);
						newObject.yearDiffAbsolute=s.getDouble(4);
						newObject.id=_tmpID;
						newObject.longName=s.getString(5);
						newObject.warningCount=s.getInt(6);
						newObject.weekDiffPercentage=s.getDouble(7);
						newObject.WKN=s.getString(8);
						newObject.quoteTime=s.getString(9);
						newObject.dayDiffAbsolute=s.getDouble(10);
						newObject.quoteDate=s.getString(11);
						newObject.dayDiffPercentage=s.getDouble(12);
						newObject.weekDiffAbsolute=s.getDouble(13);
						newObject.stockExchange=s.getString(14);
						putToCache(newObject);
					}
					result.add(newObject);
				}
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}

	/**
	 *  Method:      findByCurrentQuote(double _currentQuote)
	 *  Description: 
	 *  Returns:     ArrayList<StockQuote>
	 */
	public static ArrayList findByCurrentQuote(double _currentQuote)
	{
		ArrayList result = new ArrayList();
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbStockQuote.findByCurrentQuote");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT id, yearDiffPercentage, currentQuote, yearDiffAbsolute, longName, warningCount, weekDiffPercentage, WKN, quoteTime, dayDiffAbsolute, quoteDate, dayDiffPercentage, weekDiffAbsolute, stockExchange FROM StockQuote WHERE currentQuote="+_currentQuote+" order by generatedId desc");
				while(s.next())
				{
					String _tmpID = s.getString(1);
					StockQuote newObject = (StockQuote)getFromCache(_tmpID);
					if(newObject ==null)
					{
						newObject = new StockQuote();
						newObject.yearDiffPercentage=s.getDouble(2);
						newObject.currentQuote=s.getDouble(3);
						newObject.yearDiffAbsolute=s.getDouble(4);
						newObject.id=_tmpID;
						newObject.longName=s.getString(5);
						newObject.warningCount=s.getInt(6);
						newObject.weekDiffPercentage=s.getDouble(7);
						newObject.WKN=s.getString(8);
						newObject.quoteTime=s.getString(9);
						newObject.dayDiffAbsolute=s.getDouble(10);
						newObject.quoteDate=s.getString(11);
						newObject.dayDiffPercentage=s.getDouble(12);
						newObject.weekDiffAbsolute=s.getDouble(13);
						newObject.stockExchange=s.getString(14);
						putToCache(newObject);
					}
					result.add(newObject);
				}
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}

	/**
	 *  Method:      findByYearDiffAbsolute(double _yearDiffAbsolute)
	 *  Description: 
	 *  Returns:     ArrayList<StockQuote>
	 */
	public static ArrayList findByYearDiffAbsolute(double _yearDiffAbsolute)
	{
		ArrayList result = new ArrayList();
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbStockQuote.findByYearDiffAbsolute");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT id, yearDiffPercentage, currentQuote, yearDiffAbsolute, longName, warningCount, weekDiffPercentage, WKN, quoteTime, dayDiffAbsolute, quoteDate, dayDiffPercentage, weekDiffAbsolute, stockExchange FROM StockQuote WHERE yearDiffAbsolute="+_yearDiffAbsolute+" order by generatedId desc");
				while(s.next())
				{
					String _tmpID = s.getString(1);
					StockQuote newObject = (StockQuote)getFromCache(_tmpID);
					if(newObject ==null)
					{
						newObject = new StockQuote();
						newObject.yearDiffPercentage=s.getDouble(2);
						newObject.currentQuote=s.getDouble(3);
						newObject.yearDiffAbsolute=s.getDouble(4);
						newObject.id=_tmpID;
						newObject.longName=s.getString(5);
						newObject.warningCount=s.getInt(6);
						newObject.weekDiffPercentage=s.getDouble(7);
						newObject.WKN=s.getString(8);
						newObject.quoteTime=s.getString(9);
						newObject.dayDiffAbsolute=s.getDouble(10);
						newObject.quoteDate=s.getString(11);
						newObject.dayDiffPercentage=s.getDouble(12);
						newObject.weekDiffAbsolute=s.getDouble(13);
						newObject.stockExchange=s.getString(14);
						putToCache(newObject);
					}
					result.add(newObject);
				}
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}

	/**
	 *  Method:      findById(String _id)
	 *  Description: 
	 *  Returns:     StockQuote
	 */
	public static StockQuote findById(String _id)
	{
		StockQuote result = (StockQuote)getFromCache(_id);
		if(result!=null) return result;
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbStockQuote.findById");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT id, yearDiffPercentage, currentQuote, yearDiffAbsolute, longName, warningCount, weekDiffPercentage, WKN, quoteTime, dayDiffAbsolute, quoteDate, dayDiffPercentage, weekDiffAbsolute, stockExchange FROM StockQuote WHERE id='"+toSQL(_id)+"'"+" order by generatedId desc");
				if(s.next())
				{
					result = new StockQuote();
					result.yearDiffPercentage= s.getDouble(2);
					result.currentQuote= s.getDouble(3);
					result.yearDiffAbsolute= s.getDouble(4);
					result.id= _id;
					result.longName= s.getString(5);
					result.warningCount= s.getInt(6);
					result.weekDiffPercentage= s.getDouble(7);
					result.WKN= s.getString(8);
					result.quoteTime= s.getString(9);
					result.dayDiffAbsolute= s.getDouble(10);
					result.quoteDate= s.getString(11);
					result.dayDiffPercentage= s.getDouble(12);
					result.weekDiffAbsolute= s.getDouble(13);
					result.stockExchange= s.getString(14);
					putToCache(result);
				}
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}

	/**
	 *  Method:      findByLongName(String _longName)
	 *  Description: 
	 *  Returns:     ArrayList<StockQuote>
	 */
	public static ArrayList findByLongName(String _longName)
	{
		ArrayList result = new ArrayList();
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbStockQuote.findByLongName");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT id, yearDiffPercentage, currentQuote, yearDiffAbsolute, longName, warningCount, weekDiffPercentage, WKN, quoteTime, dayDiffAbsolute, quoteDate, dayDiffPercentage, weekDiffAbsolute, stockExchange FROM StockQuote WHERE longName='"+toSQL(_longName)+"'"+" order by generatedId desc");
				while(s.next())
				{
					String _tmpID = s.getString(1);
					StockQuote newObject = (StockQuote)getFromCache(_tmpID);
					if(newObject ==null)
					{
						newObject = new StockQuote();
						newObject.yearDiffPercentage=s.getDouble(2);
						newObject.currentQuote=s.getDouble(3);
						newObject.yearDiffAbsolute=s.getDouble(4);
						newObject.id=_tmpID;
						newObject.longName=s.getString(5);
						newObject.warningCount=s.getInt(6);
						newObject.weekDiffPercentage=s.getDouble(7);
						newObject.WKN=s.getString(8);
						newObject.quoteTime=s.getString(9);
						newObject.dayDiffAbsolute=s.getDouble(10);
						newObject.quoteDate=s.getString(11);
						newObject.dayDiffPercentage=s.getDouble(12);
						newObject.weekDiffAbsolute=s.getDouble(13);
						newObject.stockExchange=s.getString(14);
						putToCache(newObject);
					}
					result.add(newObject);
				}
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}

	/**
	 *  Method:      findByWarningCount(int _warningCount)
	 *  Description: 
	 *  Returns:     ArrayList<StockQuote>
	 */
	public static ArrayList findByWarningCount(int _warningCount)
	{
		ArrayList result = new ArrayList();
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbStockQuote.findByWarningCount");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT id, yearDiffPercentage, currentQuote, yearDiffAbsolute, longName, warningCount, weekDiffPercentage, WKN, quoteTime, dayDiffAbsolute, quoteDate, dayDiffPercentage, weekDiffAbsolute, stockExchange FROM StockQuote WHERE warningCount="+_warningCount+" order by generatedId desc");
				while(s.next())
				{
					String _tmpID = s.getString(1);
					StockQuote newObject = (StockQuote)getFromCache(_tmpID);
					if(newObject ==null)
					{
						newObject = new StockQuote();
						newObject.yearDiffPercentage=s.getDouble(2);
						newObject.currentQuote=s.getDouble(3);
						newObject.yearDiffAbsolute=s.getDouble(4);
						newObject.id=_tmpID;
						newObject.longName=s.getString(5);
						newObject.warningCount=s.getInt(6);
						newObject.weekDiffPercentage=s.getDouble(7);
						newObject.WKN=s.getString(8);
						newObject.quoteTime=s.getString(9);
						newObject.dayDiffAbsolute=s.getDouble(10);
						newObject.quoteDate=s.getString(11);
						newObject.dayDiffPercentage=s.getDouble(12);
						newObject.weekDiffAbsolute=s.getDouble(13);
						newObject.stockExchange=s.getString(14);
						putToCache(newObject);
					}
					result.add(newObject);
				}
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}

	/**
	 *  Method:      findByWeekDiffPercentage(double _weekDiffPercentage)
	 *  Description: 
	 *  Returns:     ArrayList<StockQuote>
	 */
	public static ArrayList findByWeekDiffPercentage(double _weekDiffPercentage)
	{
		ArrayList result = new ArrayList();
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbStockQuote.findByWeekDiffPercentage");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT id, yearDiffPercentage, currentQuote, yearDiffAbsolute, longName, warningCount, weekDiffPercentage, WKN, quoteTime, dayDiffAbsolute, quoteDate, dayDiffPercentage, weekDiffAbsolute, stockExchange FROM StockQuote WHERE weekDiffPercentage="+_weekDiffPercentage+" order by generatedId desc");
				while(s.next())
				{
					String _tmpID = s.getString(1);
					StockQuote newObject = (StockQuote)getFromCache(_tmpID);
					if(newObject ==null)
					{
						newObject = new StockQuote();
						newObject.yearDiffPercentage=s.getDouble(2);
						newObject.currentQuote=s.getDouble(3);
						newObject.yearDiffAbsolute=s.getDouble(4);
						newObject.id=_tmpID;
						newObject.longName=s.getString(5);
						newObject.warningCount=s.getInt(6);
						newObject.weekDiffPercentage=s.getDouble(7);
						newObject.WKN=s.getString(8);
						newObject.quoteTime=s.getString(9);
						newObject.dayDiffAbsolute=s.getDouble(10);
						newObject.quoteDate=s.getString(11);
						newObject.dayDiffPercentage=s.getDouble(12);
						newObject.weekDiffAbsolute=s.getDouble(13);
						newObject.stockExchange=s.getString(14);
						putToCache(newObject);
					}
					result.add(newObject);
				}
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}

	/**
	 *  Method:      findByWKN(String _WKN)
	 *  Description: 
	 *  Returns:     StockQuote
	 */
	public static StockQuote findByWKN(String _WKN)
	{
		StockQuote result = null;
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbStockQuote.findByWKN");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT id, yearDiffPercentage, currentQuote, yearDiffAbsolute, longName, warningCount, weekDiffPercentage, WKN, quoteTime, dayDiffAbsolute, quoteDate, dayDiffPercentage, weekDiffAbsolute, stockExchange FROM StockQuote WHERE WKN='"+toSQL(_WKN)+"'"+" order by generatedId desc");
				if(s.next())
				{
					String _tmpID = s.getString(1);
					result = (StockQuote)getFromCache(_tmpID);
					if(result ==null)
					{
						result = new StockQuote();
						result.yearDiffPercentage= s.getDouble(2);
						result.currentQuote= s.getDouble(3);
						result.yearDiffAbsolute= s.getDouble(4);
						result.id= _tmpID;
						result.longName= s.getString(5);
						result.warningCount= s.getInt(6);
						result.weekDiffPercentage= s.getDouble(7);
						result.WKN= s.getString(8);
						result.quoteTime= s.getString(9);
						result.dayDiffAbsolute= s.getDouble(10);
						result.quoteDate= s.getString(11);
						result.dayDiffPercentage= s.getDouble(12);
						result.weekDiffAbsolute= s.getDouble(13);
						result.stockExchange= s.getString(14);
						putToCache(result);
					}
				}
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}

	/**
	 *  Method:      findByQuoteTime(String _quoteTime)
	 *  Description: 
	 *  Returns:     ArrayList<StockQuote>
	 */
	public static ArrayList findByQuoteTime(String _quoteTime)
	{
		ArrayList result = new ArrayList();
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbStockQuote.findByQuoteTime");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT id, yearDiffPercentage, currentQuote, yearDiffAbsolute, longName, warningCount, weekDiffPercentage, WKN, quoteTime, dayDiffAbsolute, quoteDate, dayDiffPercentage, weekDiffAbsolute, stockExchange FROM StockQuote WHERE quoteTime='"+toSQL(_quoteTime)+"'"+" order by generatedId desc");
				while(s.next())
				{
					String _tmpID = s.getString(1);
					StockQuote newObject = (StockQuote)getFromCache(_tmpID);
					if(newObject ==null)
					{
						newObject = new StockQuote();
						newObject.yearDiffPercentage=s.getDouble(2);
						newObject.currentQuote=s.getDouble(3);
						newObject.yearDiffAbsolute=s.getDouble(4);
						newObject.id=_tmpID;
						newObject.longName=s.getString(5);
						newObject.warningCount=s.getInt(6);
						newObject.weekDiffPercentage=s.getDouble(7);
						newObject.WKN=s.getString(8);
						newObject.quoteTime=s.getString(9);
						newObject.dayDiffAbsolute=s.getDouble(10);
						newObject.quoteDate=s.getString(11);
						newObject.dayDiffPercentage=s.getDouble(12);
						newObject.weekDiffAbsolute=s.getDouble(13);
						newObject.stockExchange=s.getString(14);
						putToCache(newObject);
					}
					result.add(newObject);
				}
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}

	/**
	 *  Method:      findByDayDiffAbsolute(double _dayDiffAbsolute)
	 *  Description: 
	 *  Returns:     ArrayList<StockQuote>
	 */
	public static ArrayList findByDayDiffAbsolute(double _dayDiffAbsolute)
	{
		ArrayList result = new ArrayList();
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbStockQuote.findByDayDiffAbsolute");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT id, yearDiffPercentage, currentQuote, yearDiffAbsolute, longName, warningCount, weekDiffPercentage, WKN, quoteTime, dayDiffAbsolute, quoteDate, dayDiffPercentage, weekDiffAbsolute, stockExchange FROM StockQuote WHERE dayDiffAbsolute="+_dayDiffAbsolute+" order by generatedId desc");
				while(s.next())
				{
					String _tmpID = s.getString(1);
					StockQuote newObject = (StockQuote)getFromCache(_tmpID);
					if(newObject ==null)
					{
						newObject = new StockQuote();
						newObject.yearDiffPercentage=s.getDouble(2);
						newObject.currentQuote=s.getDouble(3);
						newObject.yearDiffAbsolute=s.getDouble(4);
						newObject.id=_tmpID;
						newObject.longName=s.getString(5);
						newObject.warningCount=s.getInt(6);
						newObject.weekDiffPercentage=s.getDouble(7);
						newObject.WKN=s.getString(8);
						newObject.quoteTime=s.getString(9);
						newObject.dayDiffAbsolute=s.getDouble(10);
						newObject.quoteDate=s.getString(11);
						newObject.dayDiffPercentage=s.getDouble(12);
						newObject.weekDiffAbsolute=s.getDouble(13);
						newObject.stockExchange=s.getString(14);
						putToCache(newObject);
					}
					result.add(newObject);
				}
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}

	/**
	 *  Method:      findByQuoteDate(String _quoteDate)
	 *  Description: 
	 *  Returns:     ArrayList<StockQuote>
	 */
	public static ArrayList findByQuoteDate(String _quoteDate)
	{
		ArrayList result = new ArrayList();
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbStockQuote.findByQuoteDate");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT id, yearDiffPercentage, currentQuote, yearDiffAbsolute, longName, warningCount, weekDiffPercentage, WKN, quoteTime, dayDiffAbsolute, quoteDate, dayDiffPercentage, weekDiffAbsolute, stockExchange FROM StockQuote WHERE quoteDate='"+toSQL(_quoteDate)+"'"+" order by generatedId desc");
				while(s.next())
				{
					String _tmpID = s.getString(1);
					StockQuote newObject = (StockQuote)getFromCache(_tmpID);
					if(newObject ==null)
					{
						newObject = new StockQuote();
						newObject.yearDiffPercentage=s.getDouble(2);
						newObject.currentQuote=s.getDouble(3);
						newObject.yearDiffAbsolute=s.getDouble(4);
						newObject.id=_tmpID;
						newObject.longName=s.getString(5);
						newObject.warningCount=s.getInt(6);
						newObject.weekDiffPercentage=s.getDouble(7);
						newObject.WKN=s.getString(8);
						newObject.quoteTime=s.getString(9);
						newObject.dayDiffAbsolute=s.getDouble(10);
						newObject.quoteDate=s.getString(11);
						newObject.dayDiffPercentage=s.getDouble(12);
						newObject.weekDiffAbsolute=s.getDouble(13);
						newObject.stockExchange=s.getString(14);
						putToCache(newObject);
					}
					result.add(newObject);
				}
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}

	/**
	 *  Method:      findByDayDiffPercentage(double _dayDiffPercentage)
	 *  Description: 
	 *  Returns:     ArrayList<StockQuote>
	 */
	public static ArrayList findByDayDiffPercentage(double _dayDiffPercentage)
	{
		ArrayList result = new ArrayList();
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbStockQuote.findByDayDiffPercentage");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT id, yearDiffPercentage, currentQuote, yearDiffAbsolute, longName, warningCount, weekDiffPercentage, WKN, quoteTime, dayDiffAbsolute, quoteDate, dayDiffPercentage, weekDiffAbsolute, stockExchange FROM StockQuote WHERE dayDiffPercentage="+_dayDiffPercentage+" order by generatedId desc");
				while(s.next())
				{
					String _tmpID = s.getString(1);
					StockQuote newObject = (StockQuote)getFromCache(_tmpID);
					if(newObject ==null)
					{
						newObject = new StockQuote();
						newObject.yearDiffPercentage=s.getDouble(2);
						newObject.currentQuote=s.getDouble(3);
						newObject.yearDiffAbsolute=s.getDouble(4);
						newObject.id=_tmpID;
						newObject.longName=s.getString(5);
						newObject.warningCount=s.getInt(6);
						newObject.weekDiffPercentage=s.getDouble(7);
						newObject.WKN=s.getString(8);
						newObject.quoteTime=s.getString(9);
						newObject.dayDiffAbsolute=s.getDouble(10);
						newObject.quoteDate=s.getString(11);
						newObject.dayDiffPercentage=s.getDouble(12);
						newObject.weekDiffAbsolute=s.getDouble(13);
						newObject.stockExchange=s.getString(14);
						putToCache(newObject);
					}
					result.add(newObject);
				}
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}

	/**
	 *  Method:      findByWeekDiffAbsolute(double _weekDiffAbsolute)
	 *  Description: 
	 *  Returns:     ArrayList<StockQuote>
	 */
	public static ArrayList findByWeekDiffAbsolute(double _weekDiffAbsolute)
	{
		ArrayList result = new ArrayList();
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbStockQuote.findByWeekDiffAbsolute");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT id, yearDiffPercentage, currentQuote, yearDiffAbsolute, longName, warningCount, weekDiffPercentage, WKN, quoteTime, dayDiffAbsolute, quoteDate, dayDiffPercentage, weekDiffAbsolute, stockExchange FROM StockQuote WHERE weekDiffAbsolute="+_weekDiffAbsolute+" order by generatedId desc");
				while(s.next())
				{
					String _tmpID = s.getString(1);
					StockQuote newObject = (StockQuote)getFromCache(_tmpID);
					if(newObject ==null)
					{
						newObject = new StockQuote();
						newObject.yearDiffPercentage=s.getDouble(2);
						newObject.currentQuote=s.getDouble(3);
						newObject.yearDiffAbsolute=s.getDouble(4);
						newObject.id=_tmpID;
						newObject.longName=s.getString(5);
						newObject.warningCount=s.getInt(6);
						newObject.weekDiffPercentage=s.getDouble(7);
						newObject.WKN=s.getString(8);
						newObject.quoteTime=s.getString(9);
						newObject.dayDiffAbsolute=s.getDouble(10);
						newObject.quoteDate=s.getString(11);
						newObject.dayDiffPercentage=s.getDouble(12);
						newObject.weekDiffAbsolute=s.getDouble(13);
						newObject.stockExchange=s.getString(14);
						putToCache(newObject);
					}
					result.add(newObject);
				}
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}

	/**
	 *  Method:      findByStockExchange(String _stockExchange)
	 *  Description: 
	 *  Returns:     ArrayList<StockQuote>
	 */
	public static ArrayList findByStockExchange(String _stockExchange)
	{
		ArrayList result = new ArrayList();
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbStockQuote.findByStockExchange");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT id, yearDiffPercentage, currentQuote, yearDiffAbsolute, longName, warningCount, weekDiffPercentage, WKN, quoteTime, dayDiffAbsolute, quoteDate, dayDiffPercentage, weekDiffAbsolute, stockExchange FROM StockQuote WHERE stockExchange='"+toSQL(_stockExchange)+"'"+" order by generatedId desc");
				while(s.next())
				{
					String _tmpID = s.getString(1);
					StockQuote newObject = (StockQuote)getFromCache(_tmpID);
					if(newObject ==null)
					{
						newObject = new StockQuote();
						newObject.yearDiffPercentage=s.getDouble(2);
						newObject.currentQuote=s.getDouble(3);
						newObject.yearDiffAbsolute=s.getDouble(4);
						newObject.id=_tmpID;
						newObject.longName=s.getString(5);
						newObject.warningCount=s.getInt(6);
						newObject.weekDiffPercentage=s.getDouble(7);
						newObject.WKN=s.getString(8);
						newObject.quoteTime=s.getString(9);
						newObject.dayDiffAbsolute=s.getDouble(10);
						newObject.quoteDate=s.getString(11);
						newObject.dayDiffPercentage=s.getDouble(12);
						newObject.weekDiffAbsolute=s.getDouble(13);
						newObject.stockExchange=s.getString(14);
						putToCache(newObject);
					}
					result.add(newObject);
				}
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}

	/**
	 * returns boolean
	 */
	public boolean commit()
	{
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbStockQuote.commit");
			try
			{
				stmt.executeUpdate( "UPDATE StockQuote set yearDiffPercentage= "+yearDiffPercentage+", currentQuote= "+currentQuote+", yearDiffAbsolute= "+yearDiffAbsolute+", longName= '"+toSQL(longName)+"', warningCount= "+warningCount+", weekDiffPercentage= "+weekDiffPercentage+", WKN= '"+toSQL(WKN)+"', quoteTime= '"+toSQL(quoteTime)+"', dayDiffAbsolute= "+dayDiffAbsolute+", quoteDate= '"+toSQL(quoteDate)+"', dayDiffPercentage= "+dayDiffPercentage+", weekDiffAbsolute= "+weekDiffAbsolute+", stockExchange= '"+toSQL(stockExchange)+"' WHERE id='"+id+"'");
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return true;
	}


	/**
	 * returns ArrayList<StockQuote>
	 */
	public static ArrayList getAll()
	{
		ArrayList result = new ArrayList();
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbStockQuote.getAll");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT id, yearDiffPercentage, currentQuote, yearDiffAbsolute, longName, warningCount, weekDiffPercentage, WKN, quoteTime, dayDiffAbsolute, quoteDate, dayDiffPercentage, weekDiffAbsolute, stockExchange FROM StockQuote order by generatedId desc");
				while(s.next())
				{
					String _tmpID = s.getString(1);
					StockQuote newObject = (StockQuote)getFromCache(_tmpID);
					if(newObject ==null)
					{
						newObject = new StockQuote();
						newObject.yearDiffPercentage=s.getDouble(2);
						newObject.currentQuote=s.getDouble(3);
						newObject.yearDiffAbsolute=s.getDouble(4);
						newObject.id=_tmpID;
						newObject.longName=s.getString(5);
						newObject.warningCount=s.getInt(6);
						newObject.weekDiffPercentage=s.getDouble(7);
						newObject.WKN=s.getString(8);
						newObject.quoteTime=s.getString(9);
						newObject.dayDiffAbsolute=s.getDouble(10);
						newObject.quoteDate=s.getString(11);
						newObject.dayDiffPercentage=s.getDouble(12);
						newObject.weekDiffAbsolute=s.getDouble(13);
						newObject.stockExchange=s.getString(14);
						putToCache(newObject);
					}
					result.add(newObject);
				}
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}


	/**
	 * create a new object in the database
	 */
	static public StockQuote createInstance( double  _yearDiffPercentage, double  _currentQuote, double  _yearDiffAbsolute, String  _longName, int  _warningCount, double  _weekDiffPercentage, String  _WKN, String  _quoteTime, double  _dayDiffAbsolute, String  _quoteDate, double  _dayDiffPercentage, double  _weekDiffAbsolute, String  _stockExchange )
	{
		StockQuote result = null;
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbStockQuote.createInstance");
			try
			{
				String nextGUID = new java.rmi.server.UID().toString();
				stmt.executeUpdate( "INSERT INTO StockQuote ( yearDiffPercentage, currentQuote, yearDiffAbsolute, id, longName, warningCount, weekDiffPercentage, WKN, quoteTime, dayDiffAbsolute, quoteDate, dayDiffPercentage, weekDiffAbsolute, stockExchange) VALUES ("+_yearDiffPercentage+", "+_currentQuote+", "+_yearDiffAbsolute+", '"+nextGUID+"',  '"+toSQL(_longName)+"', "+_warningCount+", "+_weekDiffPercentage+",  '"+toSQL(_WKN)+"',  '"+toSQL(_quoteTime)+"', "+_dayDiffAbsolute+",  '"+toSQL(_quoteDate)+"', "+_dayDiffPercentage+", "+_weekDiffAbsolute+",  '"+toSQL(_stockExchange)+"')");
				result = new StockQuote();
				result.yearDiffPercentage= _yearDiffPercentage;
				result.currentQuote= _currentQuote;
				result.yearDiffAbsolute= _yearDiffAbsolute;
				result.id= nextGUID;
				result.longName= _longName;
				result.warningCount= _warningCount;
				result.weekDiffPercentage= _weekDiffPercentage;
				result.WKN= _WKN;
				result.quoteTime= _quoteTime;
				result.dayDiffAbsolute= _dayDiffAbsolute;
				result.quoteDate= _quoteDate;
				result.dayDiffPercentage= _dayDiffPercentage;
				result.weekDiffAbsolute= _weekDiffAbsolute;
				result.stockExchange= _stockExchange;
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}


	/**
	 * create a new object in the database
	 */
	static public void newInstance( double  _yearDiffPercentage, double  _currentQuote, double  _yearDiffAbsolute, String  _longName, int  _warningCount, double  _weekDiffPercentage, String  _WKN, String  _quoteTime, double  _dayDiffAbsolute, String  _quoteDate, double  _dayDiffPercentage, double  _weekDiffAbsolute, String  _stockExchange )
	{
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbStockQuote.newInstance");
			try
			{
				String nextGUID = new java.rmi.server.UID().toString();
				stmt.executeUpdate( "INSERT INTO StockQuote ( yearDiffPercentage, currentQuote, yearDiffAbsolute, id, longName, warningCount, weekDiffPercentage, WKN, quoteTime, dayDiffAbsolute, quoteDate, dayDiffPercentage, weekDiffAbsolute, stockExchange) VALUES ("+_yearDiffPercentage+", "+_currentQuote+", "+_yearDiffAbsolute+", '"+nextGUID+"',  '"+toSQL(_longName)+"', "+_warningCount+", "+_weekDiffPercentage+",  '"+toSQL(_WKN)+"',  '"+toSQL(_quoteTime)+"', "+_dayDiffAbsolute+",  '"+toSQL(_quoteDate)+"', "+_dayDiffPercentage+", "+_weekDiffAbsolute+",  '"+toSQL(_stockExchange)+"')");
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
	}


	/**
	 * destroy a object in the database
	 */
	static public boolean destroyInstance( String  _key)
	{
		boolean result = false;
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbStockQuote.destroyInstance");
			try
			{
					stmt.executeUpdate( "DELETE FROM StockQuote WHERE id='"+_key+"'");
					result = true;
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}


	/**
	 * destroy ALL objects in the database
	 */
	static public boolean destroyAll()
	{
		boolean result = false;
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbStockQuote.destroyAll");
			try
			{
					stmt.executeUpdate("DELETE from StockQuote" );
					result = true;
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}


	/**
	 */
	public String toString()
	{
		StringBuffer result = new StringBuffer(1024);
		result.append(yearDiffPercentage);
		result.append("|");
		result.append(currentQuote);
		result.append("|");
		result.append(yearDiffAbsolute);
		result.append("|");
		result.append(id);
		result.append("|");
		result.append(longName);
		result.append("|");
		result.append(warningCount);
		result.append("|");
		result.append(weekDiffPercentage);
		result.append("|");
		result.append(WKN);
		result.append("|");
		result.append(quoteTime);
		result.append("|");
		result.append(dayDiffAbsolute);
		result.append("|");
		result.append(quoteDate);
		result.append("|");
		result.append(dayDiffPercentage);
		result.append("|");
		result.append(weekDiffAbsolute);
		result.append("|");
		result.append(stockExchange);
		return result.toString();
	}


	/**
	 * init the class
	 */
	static
	{
		try
		{
			DatabaseMetaData dMeta = ConnectionManager.getValid().getMetaData ();
			ResultSet result;
			result=dMeta.getColumns(null,null,"StockQuote","yearDiffPercentage");
			if(!result.next())
			{
				System.out.println("ERROR: installed DB-schema not compatible to java classes");
				System.out.println("       Attribute 'yearDiffPercentage' in table 'StockQuote' missing");
			}
			result.close();
			result=dMeta.getColumns(null,null,"StockQuote","currentQuote");
			if(!result.next())
			{
				System.out.println("ERROR: installed DB-schema not compatible to java classes");
				System.out.println("       Attribute 'currentQuote' in table 'StockQuote' missing");
			}
			result.close();
			result=dMeta.getColumns(null,null,"StockQuote","yearDiffAbsolute");
			if(!result.next())
			{
				System.out.println("ERROR: installed DB-schema not compatible to java classes");
				System.out.println("       Attribute 'yearDiffAbsolute' in table 'StockQuote' missing");
			}
			result.close();
			result=dMeta.getColumns(null,null,"StockQuote","id");
			if(!result.next())
			{
				System.out.println("ERROR: installed DB-schema not compatible to java classes");
				System.out.println("       Attribute 'id' in table 'StockQuote' missing");
			}
			result.close();
			result=dMeta.getColumns(null,null,"StockQuote","longName");
			if(!result.next())
			{
				System.out.println("ERROR: installed DB-schema not compatible to java classes");
				System.out.println("       Attribute 'longName' in table 'StockQuote' missing");
			}
			result.close();
			result=dMeta.getColumns(null,null,"StockQuote","warningCount");
			if(!result.next())
			{
				System.out.println("ERROR: installed DB-schema not compatible to java classes");
				System.out.println("       Attribute 'warningCount' in table 'StockQuote' missing");
			}
			result.close();
			result=dMeta.getColumns(null,null,"StockQuote","weekDiffPercentage");
			if(!result.next())
			{
				System.out.println("ERROR: installed DB-schema not compatible to java classes");
				System.out.println("       Attribute 'weekDiffPercentage' in table 'StockQuote' missing");
			}
			result.close();
			result=dMeta.getColumns(null,null,"StockQuote","WKN");
			if(!result.next())
			{
				System.out.println("ERROR: installed DB-schema not compatible to java classes");
				System.out.println("       Attribute 'WKN' in table 'StockQuote' missing");
			}
			result.close();
			result=dMeta.getColumns(null,null,"StockQuote","quoteTime");
			if(!result.next())
			{
				System.out.println("ERROR: installed DB-schema not compatible to java classes");
				System.out.println("       Attribute 'quoteTime' in table 'StockQuote' missing");
			}
			result.close();
			result=dMeta.getColumns(null,null,"StockQuote","dayDiffAbsolute");
			if(!result.next())
			{
				System.out.println("ERROR: installed DB-schema not compatible to java classes");
				System.out.println("       Attribute 'dayDiffAbsolute' in table 'StockQuote' missing");
			}
			result.close();
			result=dMeta.getColumns(null,null,"StockQuote","quoteDate");
			if(!result.next())
			{
				System.out.println("ERROR: installed DB-schema not compatible to java classes");
				System.out.println("       Attribute 'quoteDate' in table 'StockQuote' missing");
			}
			result.close();
			result=dMeta.getColumns(null,null,"StockQuote","dayDiffPercentage");
			if(!result.next())
			{
				System.out.println("ERROR: installed DB-schema not compatible to java classes");
				System.out.println("       Attribute 'dayDiffPercentage' in table 'StockQuote' missing");
			}
			result.close();
			result=dMeta.getColumns(null,null,"StockQuote","weekDiffAbsolute");
			if(!result.next())
			{
				System.out.println("ERROR: installed DB-schema not compatible to java classes");
				System.out.println("       Attribute 'weekDiffAbsolute' in table 'StockQuote' missing");
			}
			result.close();
			result=dMeta.getColumns(null,null,"StockQuote","stockExchange");
			if(!result.next())
			{
				System.out.println("ERROR: installed DB-schema not compatible to java classes");
				System.out.println("       Attribute 'stockExchange' in table 'StockQuote' missing");
			}
			result.close();
		}
		catch (Exception ex)
		{
		}
	}


}
