package de.shorti.baseknowledge.objects;

/**
 * Class generated by automatic ClassGenerator
 * Date: Sat May 11 21:15:24 GMT+02:00 2002
 */
import de.shorti.db.*;
import java.util.ArrayList;
import java.util.Iterator;
import java.sql.*;

class _dbPlayListEntry extends dbObject 
{

	String    album;
	String    interpret;
	long      startTime;
	String    radioStation_id;	// Foreign Key pointing to Table [RadioStation], Field [id]
	String    title;


	/**
	 * destroy a object in the database
	 */
	public boolean destroy()
	{
		boolean result = false;
		String    _key   = id;
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbPlayListEntry.destroyInstance");
			try
			{
					stmt.executeUpdate( "DELETE FROM PlayListEntry WHERE id='"+_key+"'");
					result = true;
					removeFromCache(this);
					id     = null;
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}



	/**
	 * Method:      getAlbum()
	 * Description: 
	 * Returns:     String
	 */
	public String getAlbum()
	{
		return album;
	}

	/**
	 * Method:      setAlbum(String _album, boolean _autoCommit)
	 * Description: 
	 * Returns:     void
	 */
	public void setAlbum(String _album, boolean _autoCommit)
	{
		album=_album;
		if(_autoCommit)
		{
			commit();
		}
	}

	/**
	 * Method:      getInterpret()
	 * Description: 
	 * Returns:     String
	 */
	public String getInterpret()
	{
		return interpret;
	}

	/**
	 * Method:      setInterpret(String _interpret, boolean _autoCommit)
	 * Description: 
	 * Returns:     void
	 */
	public void setInterpret(String _interpret, boolean _autoCommit)
	{
		interpret=_interpret;
		if(_autoCommit)
		{
			commit();
		}
	}

	/**
	 * Method:      getStartTime()
	 * Description: 
	 * Returns:     long
	 */
	public long getStartTime()
	{
		return startTime;
	}

	/**
	 * Method:      setStartTime(long _startTime, boolean _autoCommit)
	 * Description: 
	 * Returns:     void
	 */
	public void setStartTime(long _startTime, boolean _autoCommit)
	{
		startTime=_startTime;
		if(_autoCommit)
		{
			commit();
		}
	}

	/**
	 * Method:      getTitle()
	 * Description: 
	 * Returns:     String
	 */
	public String getTitle()
	{
		return title;
	}

	/**
	 * Method:      setTitle(String _title, boolean _autoCommit)
	 * Description: 
	 * Returns:     void
	 */
	public void setTitle(String _title, boolean _autoCommit)
	{
		title=_title;
		if(_autoCommit)
		{
			commit();
		}
	}

	/**
	 * Method:      getId()
	 * Description: 
	 * Returns:     String
	 */
	public String getId()
	{
		return id;
	}

	/**
	 * Method:      getRadioStation()
	 * Description: 
	 * Returns:     RadioStation
	 */
	public RadioStation getRadioStation()
	{
		return RadioStation.findById(radioStation_id);
	}

	/**
	 * Method:      setRadioStation()
	 * Description: 
	 * Returns:     void
	 */
	public void setRadioStation(RadioStation _foreigner, boolean _autocommit)
	{
		radioStation_id= _foreigner.getId();
		if (_autocommit == true)
			commit();
	}

	/**
	 *  Method:      findByAlbum(String _album)
	 *  Description: 
	 *  Returns:     ArrayList<PlayListEntry>
	 */
	public static ArrayList findByAlbum(String _album)
	{
		ArrayList result = new ArrayList();
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbPlayListEntry.findByAlbum");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT id, album, interpret, startTime, radioStation_id, title FROM PlayListEntry WHERE album='"+toSQL(_album)+"'"+" order by generatedId desc");
				while(s.next())
				{
					String _tmpID = s.getString(1);
					PlayListEntry newObject = (PlayListEntry)getFromCache(_tmpID);
					if(newObject ==null)
					{
						newObject = new PlayListEntry();
						newObject.album=s.getString(2);
						newObject.interpret=s.getString(3);
						newObject.startTime=s.getLong(4);
						newObject.radioStation_id=s.getString(5);
						newObject.title=s.getString(6);
						newObject.id=_tmpID;
						putToCache(newObject);
					}
					result.add(newObject);
				}
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}

	/**
	 *  Method:      findByInterpret(String _interpret)
	 *  Description: 
	 *  Returns:     ArrayList<PlayListEntry>
	 */
	public static ArrayList findByInterpret(String _interpret)
	{
		ArrayList result = new ArrayList();
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbPlayListEntry.findByInterpret");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT id, album, interpret, startTime, radioStation_id, title FROM PlayListEntry WHERE interpret='"+toSQL(_interpret)+"'"+" order by generatedId desc");
				while(s.next())
				{
					String _tmpID = s.getString(1);
					PlayListEntry newObject = (PlayListEntry)getFromCache(_tmpID);
					if(newObject ==null)
					{
						newObject = new PlayListEntry();
						newObject.album=s.getString(2);
						newObject.interpret=s.getString(3);
						newObject.startTime=s.getLong(4);
						newObject.radioStation_id=s.getString(5);
						newObject.title=s.getString(6);
						newObject.id=_tmpID;
						putToCache(newObject);
					}
					result.add(newObject);
				}
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}

	/**
	 *  Method:      findByStartTime(long _startTime)
	 *  Description: 
	 *  Returns:     ArrayList<PlayListEntry>
	 */
	public static ArrayList findByStartTime(long _startTime)
	{
		ArrayList result = new ArrayList();
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbPlayListEntry.findByStartTime");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT id, album, interpret, startTime, radioStation_id, title FROM PlayListEntry WHERE startTime="+_startTime+" order by generatedId desc");
				while(s.next())
				{
					String _tmpID = s.getString(1);
					PlayListEntry newObject = (PlayListEntry)getFromCache(_tmpID);
					if(newObject ==null)
					{
						newObject = new PlayListEntry();
						newObject.album=s.getString(2);
						newObject.interpret=s.getString(3);
						newObject.startTime=s.getLong(4);
						newObject.radioStation_id=s.getString(5);
						newObject.title=s.getString(6);
						newObject.id=_tmpID;
						putToCache(newObject);
					}
					result.add(newObject);
				}
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}

	/**
	 *  Method:      findByRadioStation(_dbRadioStation _radioStation)
	 *  Description: 
	 *  Returns:     ArrayList<PlayListEntry>
	 */
	public static ArrayList findByRadioStation(_dbRadioStation _radioStation)
	{
		ArrayList result = new ArrayList();
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbPlayListEntry.findByRadioStation");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT id, album, interpret, startTime, radioStation_id, title FROM PlayListEntry WHERE radioStation_id='"+toSQL(((_radioStation==null)?"":_radioStation.getId()))+"'"+" order by generatedId desc");
				while(s.next())
				{
					String _tmpID = s.getString(1);
					PlayListEntry newObject = (PlayListEntry)getFromCache(_tmpID);
					if(newObject ==null)
					{
						newObject = new PlayListEntry();
						newObject.album=s.getString(2);
						newObject.interpret=s.getString(3);
						newObject.startTime=s.getLong(4);
						newObject.radioStation_id=s.getString(5);
						newObject.title=s.getString(6);
						newObject.id=_tmpID;
						putToCache(newObject);
					}
					result.add(newObject);
				}
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}

	/**
	 *  Method:      findByTitle(String _title)
	 *  Description: 
	 *  Returns:     ArrayList<PlayListEntry>
	 */
	public static ArrayList findByTitle(String _title)
	{
		ArrayList result = new ArrayList();
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbPlayListEntry.findByTitle");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT id, album, interpret, startTime, radioStation_id, title FROM PlayListEntry WHERE title='"+toSQL(_title)+"'"+" order by generatedId desc");
				while(s.next())
				{
					String _tmpID = s.getString(1);
					PlayListEntry newObject = (PlayListEntry)getFromCache(_tmpID);
					if(newObject ==null)
					{
						newObject = new PlayListEntry();
						newObject.album=s.getString(2);
						newObject.interpret=s.getString(3);
						newObject.startTime=s.getLong(4);
						newObject.radioStation_id=s.getString(5);
						newObject.title=s.getString(6);
						newObject.id=_tmpID;
						putToCache(newObject);
					}
					result.add(newObject);
				}
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}

	/**
	 *  Method:      findById(String _id)
	 *  Description: 
	 *  Returns:     PlayListEntry
	 */
	public static PlayListEntry findById(String _id)
	{
		PlayListEntry result = (PlayListEntry)getFromCache(_id);
		if(result!=null) return result;
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbPlayListEntry.findById");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT id, album, interpret, startTime, radioStation_id, title FROM PlayListEntry WHERE id='"+toSQL(_id)+"'"+" order by generatedId desc");
				if(s.next())
				{
					result = new PlayListEntry();
					result.album= s.getString(2);
					result.interpret= s.getString(3);
					result.startTime= s.getLong(4);
					result.radioStation_id= s.getString(5);
					result.title= s.getString(6);
					result.id= _id;
					putToCache(result);
				}
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}

	/**
	 * returns boolean
	 */
	public boolean commit()
	{
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbPlayListEntry.commit");
			try
			{
				stmt.executeUpdate( "UPDATE PlayListEntry set album= '"+toSQL(album)+"', interpret= '"+toSQL(interpret)+"', startTime= "+startTime+", radioStation_id= '"+toSQL(radioStation_id)+"', title= '"+toSQL(title)+"' WHERE id='"+id+"'");
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return true;
	}


	/**
	 * returns ArrayList<PlayListEntry>
	 */
	public static ArrayList getAll()
	{
		ArrayList result = new ArrayList();
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbPlayListEntry.getAll");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT id, album, interpret, startTime, radioStation_id, title FROM PlayListEntry order by generatedId desc");
				while(s.next())
				{
					String _tmpID = s.getString(1);
					PlayListEntry newObject = (PlayListEntry)getFromCache(_tmpID);
					if(newObject ==null)
					{
						newObject = new PlayListEntry();
						newObject.album=s.getString(2);
						newObject.interpret=s.getString(3);
						newObject.startTime=s.getLong(4);
						newObject.radioStation_id=s.getString(5);
						newObject.title=s.getString(6);
						newObject.id=_tmpID;
						putToCache(newObject);
					}
					result.add(newObject);
				}
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}


	/**
	 * create a new object in the database
	 */
	static public PlayListEntry createInstance( String  _album, String  _interpret, long  _startTime, _dbRadioStation _radioStation, String  _title )
	{
		PlayListEntry result = null;
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbPlayListEntry.createInstance");
			try
			{
				String nextGUID = new java.rmi.server.UID().toString();
				stmt.executeUpdate( "INSERT INTO PlayListEntry ( album, interpret, startTime, radioStation_id, title, id) VALUES ( '"+toSQL(_album)+"',  '"+toSQL(_interpret)+"', "+_startTime+",  '"+((_radioStation==null)?"":_radioStation.getId())+"',  '"+toSQL(_title)+"', '"+nextGUID+"')");
				result = new PlayListEntry();
				result.album= _album;
				result.interpret= _interpret;
				result.startTime= _startTime;
				result.radioStation_id= (_radioStation==null)?"":_radioStation.getId();
				result.title= _title;
				result.id= nextGUID;
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}


	/**
	 * create a new object in the database
	 */
	static public void newInstance( String  _album, String  _interpret, long  _startTime, _dbRadioStation _radioStation, String  _title )
	{
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbPlayListEntry.newInstance");
			try
			{
				String nextGUID = new java.rmi.server.UID().toString();
				stmt.executeUpdate( "INSERT INTO PlayListEntry ( album, interpret, startTime, radioStation_id, title, id) VALUES ( '"+toSQL(_album)+"',  '"+toSQL(_interpret)+"', "+_startTime+",  '"+((_radioStation==null)?"":_radioStation.getId())+"',  '"+toSQL(_title)+"', '"+nextGUID+"')");
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
	}


	/**
	 * destroy a object in the database
	 */
	static public boolean destroyInstance( String  _key)
	{
		boolean result = false;
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbPlayListEntry.destroyInstance");
			try
			{
					stmt.executeUpdate( "DELETE FROM PlayListEntry WHERE id='"+_key+"'");
					result = true;
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}


	/**
	 * destroy ALL objects in the database
	 */
	static public boolean destroyAll()
	{
		boolean result = false;
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbPlayListEntry.destroyAll");
			try
			{
					stmt.executeUpdate("DELETE from PlayListEntry" );
					result = true;
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}


	/**
	 */
	public String toString()
	{
		StringBuffer result = new StringBuffer(1024);
		result.append(album);
		result.append("|");
		result.append(interpret);
		result.append("|");
		result.append(startTime);
		result.append("|");
		result.append(radioStation_id);
		result.append("|");
		result.append(title);
		result.append("|");
		result.append(id);
		return result.toString();
	}


	/**
	 * init the class
	 */
	static
	{
		try
		{
			DatabaseMetaData dMeta = ConnectionManager.getValid().getMetaData ();
			ResultSet result;
			result=dMeta.getColumns(null,null,"PlayListEntry","album");
			if(!result.next())
			{
				System.out.println("ERROR: installed DB-schema not compatible to java classes");
				System.out.println("       Attribute 'album' in table 'PlayListEntry' missing");
			}
			result.close();
			result=dMeta.getColumns(null,null,"PlayListEntry","interpret");
			if(!result.next())
			{
				System.out.println("ERROR: installed DB-schema not compatible to java classes");
				System.out.println("       Attribute 'interpret' in table 'PlayListEntry' missing");
			}
			result.close();
			result=dMeta.getColumns(null,null,"PlayListEntry","startTime");
			if(!result.next())
			{
				System.out.println("ERROR: installed DB-schema not compatible to java classes");
				System.out.println("       Attribute 'startTime' in table 'PlayListEntry' missing");
			}
			result.close();
			result=dMeta.getColumns(null,null,"PlayListEntry","radioStation_id");
			if(!result.next())
			{
				System.out.println("ERROR: installed DB-schema not compatible to java classes");
				System.out.println("       Attribute 'radioStation_id' in table 'PlayListEntry' missing");
			}
			result.close();
			result=dMeta.getColumns(null,null,"PlayListEntry","title");
			if(!result.next())
			{
				System.out.println("ERROR: installed DB-schema not compatible to java classes");
				System.out.println("       Attribute 'title' in table 'PlayListEntry' missing");
			}
			result.close();
			result=dMeta.getColumns(null,null,"PlayListEntry","id");
			if(!result.next())
			{
				System.out.println("ERROR: installed DB-schema not compatible to java classes");
				System.out.println("       Attribute 'id' in table 'PlayListEntry' missing");
			}
			result.close();
		}
		catch (Exception ex)
		{
		}
	}


}
