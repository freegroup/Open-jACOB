package de.shorti.baseknowledge.objects;

/**
 * Class generated by automatic ClassGenerator
 * Date: Sat May 11 21:15:22 GMT+02:00 2002
 */
import de.shorti.db.*;
import java.util.ArrayList;
import java.util.Iterator;
import java.sql.*;

class _dbBill extends dbObject 
{

	String    account_id;	// Foreign Key pointing to Table [Account], Field [id]
	long      payTime;
	int       payStatus;
	long      createTime;


	/**
	 * destroy a object in the database
	 */
	public boolean destroy()
	{
		boolean result = false;
		String    _key   = id;
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbBill.destroyInstance");
			try
			{
					stmt.executeUpdate( "DELETE FROM Bill WHERE id='"+_key+"'");
					result = true;
					removeFromCache(this);
					id     = null;
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}



	/**
	 * Method:      getPayTime()
	 * Description: 
	 * Returns:     long
	 */
	public long getPayTime()
	{
		return payTime;
	}

	/**
	 * Method:      setPayTime(long _payTime, boolean _autoCommit)
	 * Description: 
	 * Returns:     void
	 */
	public void setPayTime(long _payTime, boolean _autoCommit)
	{
		payTime=_payTime;
		if(_autoCommit)
		{
			commit();
		}
	}

	/**
	 * Method:      getPayStatus()
	 * Description: 
	 * Returns:     int
	 */
	public int getPayStatus()
	{
		return payStatus;
	}

	/**
	 * Method:      setPayStatus(int _payStatus, boolean _autoCommit)
	 * Description: 
	 * Returns:     void
	 */
	public void setPayStatus(int _payStatus, boolean _autoCommit)
	{
		payStatus=_payStatus;
		if(_autoCommit)
		{
			commit();
		}
	}

	/**
	 * Method:      getCreateTime()
	 * Description: 
	 * Returns:     long
	 */
	public long getCreateTime()
	{
		return createTime;
	}

	/**
	 * Method:      setCreateTime(long _createTime, boolean _autoCommit)
	 * Description: 
	 * Returns:     void
	 */
	public void setCreateTime(long _createTime, boolean _autoCommit)
	{
		createTime=_createTime;
		if(_autoCommit)
		{
			commit();
		}
	}

	/**
	 * Method:      getId()
	 * Description: 
	 * Returns:     String
	 */
	public String getId()
	{
		return id;
	}

	/**
	 * Method:      getAccount()
	 * Description: 
	 * Returns:     Account
	 */
	public Account getAccount()
	{
		return Account.findById(account_id);
	}

	/**
	 * Method:      setAccount()
	 * Description: 
	 * Returns:     void
	 */
	public void setAccount(Account _foreigner, boolean _autocommit)
	{
		account_id= _foreigner.getId();
		if (_autocommit == true)
			commit();
	}

	/**
	 *  Method:      getBillingInformations()
	 *  Description:                              
	 *  Returns:     ArrayList<BillingInformation>
	 */
	public ArrayList getBillingInformations()
	{
		return _dbBillingInformation.findByBill(this);
	}


	/**
	 *  Method:      getBillReminders()
	 *  Description:                              
	 *  Returns:     ArrayList<BillReminder>
	 */
	public ArrayList getBillReminders()
	{
		return _dbBillReminder.findByBill(this);
	}


	/**
	 *  Method:      findByAccount(_dbAccount _account)
	 *  Description: 
	 *  Returns:     ArrayList<Bill>
	 */
	public static ArrayList findByAccount(_dbAccount _account)
	{
		ArrayList result = new ArrayList();
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbBill.findByAccount");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT id, account_id, payTime, payStatus, createTime FROM Bill WHERE account_id='"+toSQL(((_account==null)?"":_account.getId()))+"'"+" order by generatedId desc");
				while(s.next())
				{
					String _tmpID = s.getString(1);
					Bill newObject = (Bill)getFromCache(_tmpID);
					if(newObject ==null)
					{
						newObject = new Bill();
						newObject.account_id=s.getString(2);
						newObject.payTime=s.getLong(3);
						newObject.payStatus=s.getInt(4);
						newObject.createTime=s.getLong(5);
						newObject.id=_tmpID;
						putToCache(newObject);
					}
					result.add(newObject);
				}
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}

	/**
	 *  Method:      findByPayTime(long _payTime)
	 *  Description: 
	 *  Returns:     ArrayList<Bill>
	 */
	public static ArrayList findByPayTime(long _payTime)
	{
		ArrayList result = new ArrayList();
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbBill.findByPayTime");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT id, account_id, payTime, payStatus, createTime FROM Bill WHERE payTime="+_payTime+" order by generatedId desc");
				while(s.next())
				{
					String _tmpID = s.getString(1);
					Bill newObject = (Bill)getFromCache(_tmpID);
					if(newObject ==null)
					{
						newObject = new Bill();
						newObject.account_id=s.getString(2);
						newObject.payTime=s.getLong(3);
						newObject.payStatus=s.getInt(4);
						newObject.createTime=s.getLong(5);
						newObject.id=_tmpID;
						putToCache(newObject);
					}
					result.add(newObject);
				}
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}

	/**
	 *  Method:      findByPayStatus(int _payStatus)
	 *  Description: 
	 *  Returns:     ArrayList<Bill>
	 */
	public static ArrayList findByPayStatus(int _payStatus)
	{
		ArrayList result = new ArrayList();
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbBill.findByPayStatus");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT id, account_id, payTime, payStatus, createTime FROM Bill WHERE payStatus="+_payStatus+" order by generatedId desc");
				while(s.next())
				{
					String _tmpID = s.getString(1);
					Bill newObject = (Bill)getFromCache(_tmpID);
					if(newObject ==null)
					{
						newObject = new Bill();
						newObject.account_id=s.getString(2);
						newObject.payTime=s.getLong(3);
						newObject.payStatus=s.getInt(4);
						newObject.createTime=s.getLong(5);
						newObject.id=_tmpID;
						putToCache(newObject);
					}
					result.add(newObject);
				}
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}

	/**
	 *  Method:      findByCreateTime(long _createTime)
	 *  Description: 
	 *  Returns:     ArrayList<Bill>
	 */
	public static ArrayList findByCreateTime(long _createTime)
	{
		ArrayList result = new ArrayList();
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbBill.findByCreateTime");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT id, account_id, payTime, payStatus, createTime FROM Bill WHERE createTime="+_createTime+" order by generatedId desc");
				while(s.next())
				{
					String _tmpID = s.getString(1);
					Bill newObject = (Bill)getFromCache(_tmpID);
					if(newObject ==null)
					{
						newObject = new Bill();
						newObject.account_id=s.getString(2);
						newObject.payTime=s.getLong(3);
						newObject.payStatus=s.getInt(4);
						newObject.createTime=s.getLong(5);
						newObject.id=_tmpID;
						putToCache(newObject);
					}
					result.add(newObject);
				}
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}

	/**
	 *  Method:      findById(String _id)
	 *  Description: 
	 *  Returns:     Bill
	 */
	public static Bill findById(String _id)
	{
		Bill result = (Bill)getFromCache(_id);
		if(result!=null) return result;
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbBill.findById");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT id, account_id, payTime, payStatus, createTime FROM Bill WHERE id='"+toSQL(_id)+"'"+" order by generatedId desc");
				if(s.next())
				{
					result = new Bill();
					result.account_id= s.getString(2);
					result.payTime= s.getLong(3);
					result.payStatus= s.getInt(4);
					result.createTime= s.getLong(5);
					result.id= _id;
					putToCache(result);
				}
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}

	/**
	 * returns boolean
	 */
	public boolean commit()
	{
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbBill.commit");
			try
			{
				stmt.executeUpdate( "UPDATE Bill set account_id= '"+toSQL(account_id)+"', payTime= "+payTime+", payStatus= "+payStatus+", createTime= "+createTime+" WHERE id='"+id+"'");
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return true;
	}


	/**
	 * returns ArrayList<Bill>
	 */
	public static ArrayList getAll()
	{
		ArrayList result = new ArrayList();
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbBill.getAll");
			try
			{
				ResultSet s = stmt.executeQuery( "SELECT id, account_id, payTime, payStatus, createTime FROM Bill order by generatedId desc");
				while(s.next())
				{
					String _tmpID = s.getString(1);
					Bill newObject = (Bill)getFromCache(_tmpID);
					if(newObject ==null)
					{
						newObject = new Bill();
						newObject.account_id=s.getString(2);
						newObject.payTime=s.getLong(3);
						newObject.payStatus=s.getInt(4);
						newObject.createTime=s.getLong(5);
						newObject.id=_tmpID;
						putToCache(newObject);
					}
					result.add(newObject);
				}
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}


	/**
	 * create a new object in the database
	 */
	static public Bill createInstance( _dbAccount _account, long  _payTime, int  _payStatus, long  _createTime )
	{
		Bill result = null;
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbBill.createInstance");
			try
			{
				String nextGUID = new java.rmi.server.UID().toString();
				stmt.executeUpdate( "INSERT INTO Bill ( account_id, payTime, payStatus, createTime, id) VALUES ( '"+((_account==null)?"":_account.getId())+"', "+_payTime+", "+_payStatus+", "+_createTime+", '"+nextGUID+"')");
				result = new Bill();
				result.account_id= (_account==null)?"":_account.getId();
				result.payTime= _payTime;
				result.payStatus= _payStatus;
				result.createTime= _createTime;
				result.id= nextGUID;
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}


	/**
	 * create a new object in the database
	 */
	static public void newInstance( _dbAccount _account, long  _payTime, int  _payStatus, long  _createTime )
	{
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbBill.newInstance");
			try
			{
				String nextGUID = new java.rmi.server.UID().toString();
				stmt.executeUpdate( "INSERT INTO Bill ( account_id, payTime, payStatus, createTime, id) VALUES ( '"+((_account==null)?"":_account.getId())+"', "+_payTime+", "+_payStatus+", "+_createTime+", '"+nextGUID+"')");
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
	}


	/**
	 * destroy a object in the database
	 */
	static public boolean destroyInstance( String  _key)
	{
		boolean result = false;
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbBill.destroyInstance");
			try
			{
					stmt.executeUpdate( "DELETE FROM Bill WHERE id='"+_key+"'");
					result = true;
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}


	/**
	 * destroy ALL objects in the database
	 */
	static public boolean destroyAll()
	{
		boolean result = false;
		SaveStatement  stmt;

		try
		{
			stmt  = ConnectionManager.getValid().createStatement("_dbBill.destroyAll");
			try
			{
					stmt.executeUpdate("DELETE from Bill" );
					result = true;
			}
			catch(Exception exc)
			{
				System.err.println(exc);
				exc.printStackTrace();
			}
			stmt.close();
		
		}
		catch (Exception ex)
		{
			System.err.println(ex);
			ex.printStackTrace();
		}
		return result;
	}


	/**
	 */
	public String toString()
	{
		StringBuffer result = new StringBuffer(1024);
		result.append(account_id);
		result.append("|");
		result.append(payTime);
		result.append("|");
		result.append(payStatus);
		result.append("|");
		result.append(createTime);
		result.append("|");
		result.append(id);
		return result.toString();
	}


	/**
	 * init the class
	 */
	static
	{
		try
		{
			DatabaseMetaData dMeta = ConnectionManager.getValid().getMetaData ();
			ResultSet result;
			result=dMeta.getColumns(null,null,"Bill","account_id");
			if(!result.next())
			{
				System.out.println("ERROR: installed DB-schema not compatible to java classes");
				System.out.println("       Attribute 'account_id' in table 'Bill' missing");
			}
			result.close();
			result=dMeta.getColumns(null,null,"Bill","payTime");
			if(!result.next())
			{
				System.out.println("ERROR: installed DB-schema not compatible to java classes");
				System.out.println("       Attribute 'payTime' in table 'Bill' missing");
			}
			result.close();
			result=dMeta.getColumns(null,null,"Bill","payStatus");
			if(!result.next())
			{
				System.out.println("ERROR: installed DB-schema not compatible to java classes");
				System.out.println("       Attribute 'payStatus' in table 'Bill' missing");
			}
			result.close();
			result=dMeta.getColumns(null,null,"Bill","createTime");
			if(!result.next())
			{
				System.out.println("ERROR: installed DB-schema not compatible to java classes");
				System.out.println("       Attribute 'createTime' in table 'Bill' missing");
			}
			result.close();
			result=dMeta.getColumns(null,null,"Bill","id");
			if(!result.next())
			{
				System.out.println("ERROR: installed DB-schema not compatible to java classes");
				System.out.println("       Attribute 'id' in table 'Bill' missing");
			}
			result.close();
		}
		catch (Exception ex)
		{
		}
	}


}
