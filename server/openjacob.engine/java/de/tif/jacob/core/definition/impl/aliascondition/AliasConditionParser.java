
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Tue Apr 28 11:21:05 CEST 2015
//----------------------------------------------------

package de.tif.jacob.core.definition.impl.aliascondition;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

/** CUP v0.10k generated parser.
  * @version Tue Apr 28 11:21:05 CEST 2015
  */
public class AliasConditionParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AliasConditionParser() {super();}

  /** Constructor which sets the default scanner. */
  public AliasConditionParser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\076\000\002\002\004\000\002\003\002\000\002\003" +
    "\003\000\002\004\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\005\005\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\006\003\000\002\006\003\000\002\006" +
    "\003\000\002\007\005\000\002\007\005\000\002\010\007" +
    "\000\002\010\007\000\002\011\005\000\002\011\006\000" +
    "\002\012\005\000\002\012\006\000\002\013\005\000\002" +
    "\013\004\000\002\013\005\000\002\013\005\000\002\014" +
    "\003\000\002\014\003\000\002\014\003\000\002\015\003" +
    "\000\002\015\003\000\002\015\003\000\002\015\003\000" +
    "\002\015\003\000\002\015\003\000\002\015\003\000\002" +
    "\015\003\000\002\015\003\000\002\015\003\000\002\015" +
    "\004\000\002\015\004\000\002\016\005\000\002\016\004" +
    "\000\002\016\004\000\002\016\005\000\002\016\005\000" +
    "\002\016\005\000\002\016\005\000\002\017\006\000\002" +
    "\020\005\000\002\020\005\000\002\022\002\000\002\022" +
    "\003\000\002\021\003\000\002\021\005\000\002\023\003" +
    "\000\002\023\005\000\002\023\007\000\002\024\003\000" +
    "\002\024\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\151\000\050\002\000\010\013\012\037\020\005\021" +
    "\035\030\025\032\014\036\026\037\017\040\032\041\043" +
    "\042\024\043\033\045\040\046\021\047\016\051\042\052" +
    "\012\053\010\001\002\000\052\002\uffe0\004\uffe0\005\uffe0" +
    "\006\uffe0\007\uffe0\011\uffe0\013\uffe0\014\uffe0\016\uffe0\017" +
    "\uffe0\020\uffe0\021\uffe0\022\uffe0\023\uffe0\024\uffe0\025\uffe0" +
    "\026\uffe0\027\uffe0\031\uffe0\034\uffe0\001\002\000\044\012" +
    "\037\020\005\021\035\030\052\032\014\036\026\037\017" +
    "\040\032\041\043\042\024\043\033\045\040\046\021\047" +
    "\016\051\042\052\012\053\010\001\002\000\046\006\uffe2" +
    "\007\uffe2\010\147\011\uffe2\013\uffe2\014\uffe2\015\146\016" +
    "\uffe2\017\uffe2\020\uffe2\021\uffe2\022\uffe2\023\uffe2\024\uffe2" +
    "\025\uffe2\026\uffe2\027\uffe2\031\uffe2\001\002\000\012\002" +
    "\ufffd\004\ufffd\005\ufffd\031\ufffd\001\002\000\052\002\uffe1" +
    "\004\uffe1\005\uffe1\006\uffe1\007\uffe1\011\uffe1\013\uffe1\014" +
    "\uffe1\016\uffe1\017\uffe1\020\uffe1\021\uffe1\022\uffe1\023\uffe1" +
    "\024\uffe1\025\uffe1\026\uffe1\027\uffe1\031\uffe1\034\uffe1\001" +
    "\002\000\012\002\ufffc\004\ufffc\005\ufffc\031\ufffc\001\002" +
    "\000\052\002\uffc4\004\uffc4\005\uffc4\006\uffc4\007\uffc4\011" +
    "\uffc4\013\uffc4\014\uffc4\016\uffc4\017\uffc4\020\uffc4\021\uffc4" +
    "\022\uffc4\023\uffc4\024\uffc4\025\uffc4\026\uffc4\027\uffc4\031" +
    "\uffc4\034\uffc4\001\002\000\046\010\013\012\037\020\005" +
    "\021\035\030\025\032\014\036\026\037\017\040\032\041" +
    "\043\042\024\043\033\045\040\046\021\047\016\051\042" +
    "\052\012\053\010\001\002\000\004\047\141\001\002\000" +
    "\012\002\ufffa\004\ufffa\005\ufffa\031\ufffa\001\002\000\062" +
    "\002\uffc8\004\uffc8\005\uffc8\006\uffc8\007\uffc8\010\uffc8\011" +
    "\uffc8\013\uffc8\014\uffc8\015\uffc8\016\uffc8\017\uffc8\020\uffc8" +
    "\021\uffc8\022\uffc8\023\uffc8\024\uffc8\025\uffc8\026\uffc8\027" +
    "\uffc8\030\133\031\uffc8\034\uffc8\035\134\001\002\000\052" +
    "\002\uffdd\004\uffdd\005\uffdd\006\uffdd\007\uffdd\011\uffdd\013" +
    "\uffdd\014\uffdd\016\uffdd\017\uffdd\020\uffdd\021\uffdd\022\uffdd" +
    "\023\uffdd\024\uffdd\025\uffdd\026\uffdd\027\uffdd\031\uffdd\034" +
    "\uffdd\001\002\000\052\002\uffe4\004\uffe4\005\uffe4\006\uffe4" +
    "\007\uffe4\011\uffe4\013\uffe4\014\uffe4\016\uffe4\017\uffe4\020" +
    "\uffe4\021\uffe4\022\uffe4\023\uffe4\024\uffe4\025\uffe4\026\uffe4" +
    "\027\uffe4\031\uffe4\034\uffe4\001\002\000\004\050\132\001" +
    "\002\000\052\002\uffe3\004\uffe3\005\uffe3\006\uffe3\007\uffe3" +
    "\011\uffe3\013\uffe3\014\uffe3\016\uffe3\017\uffe3\020\uffe3\021" +
    "\uffe3\022\uffe3\023\uffe3\024\uffe3\025\uffe3\026\uffe3\027\uffe3" +
    "\031\uffe3\034\uffe3\001\002\000\012\002\ufffb\004\ufffb\005" +
    "\ufffb\031\ufffb\001\002\000\052\002\uffda\004\uffda\005\uffda" +
    "\006\uffda\007\uffda\011\uffda\013\uffda\014\uffda\016\uffda\017" +
    "\uffda\020\uffda\021\uffda\022\uffda\023\uffda\024\uffda\025\uffda" +
    "\026\uffda\027\uffda\031\uffda\034\uffda\001\002\000\046\010" +
    "\013\012\037\020\005\021\035\030\025\032\014\036\026" +
    "\037\017\040\032\041\043\042\024\043\033\045\040\046" +
    "\021\047\016\051\042\052\012\053\010\001\002\000\052" +
    "\002\uffde\004\uffde\005\uffde\006\uffde\007\uffde\011\uffde\013" +
    "\uffde\014\uffde\016\uffde\017\uffde\020\uffde\021\uffde\022\uffde" +
    "\023\uffde\024\uffde\025\uffde\026\uffde\027\uffde\031\uffde\034" +
    "\uffde\001\002\000\012\002\ufff9\004\ufff9\005\ufff9\031\ufff9" +
    "\001\002\000\004\002\126\001\002\000\040\006\067\007" +
    "\066\011\101\013\075\014\100\016\054\017\057\020\055" +
    "\021\056\022\074\023\070\024\077\025\071\026\073\027" +
    "\076\001\002\000\052\002\uffdc\004\uffdc\005\uffdc\006\uffdc" +
    "\007\uffdc\011\uffdc\013\uffdc\014\uffdc\016\uffdc\017\uffdc\020" +
    "\uffdc\021\uffdc\022\uffdc\023\uffdc\024\uffdc\025\uffdc\026\uffdc" +
    "\027\uffdc\031\uffdc\034\uffdc\001\002\000\052\002\uffd9\004" +
    "\uffd9\005\uffd9\006\uffd9\007\uffd9\011\uffd9\013\uffd9\014\uffd9" +
    "\016\uffd9\017\uffd9\020\uffd9\021\uffd9\022\uffd9\023\uffd9\024" +
    "\uffd9\025\uffd9\026\uffd9\027\uffd9\031\uffd9\034\uffd9\001\002" +
    "\000\052\002\uffe5\004\uffe5\005\uffe5\006\uffe5\007\uffe5\011" +
    "\uffe5\013\uffe5\014\uffe5\016\uffe5\017\uffe5\020\uffe5\021\uffe5" +
    "\022\uffe5\023\uffe5\024\uffe5\025\uffe5\026\uffe5\027\uffe5\031" +
    "\uffe5\034\uffe5\001\002\000\044\012\037\020\005\021\035" +
    "\030\052\032\014\036\026\037\017\040\032\041\043\042" +
    "\024\043\033\045\040\046\021\047\016\051\042\052\012" +
    "\053\010\001\002\000\010\002\uffff\004\045\005\046\001" +
    "\002\000\052\002\uffdf\004\uffdf\005\uffdf\006\uffdf\007\uffdf" +
    "\011\uffdf\013\uffdf\014\uffdf\016\uffdf\017\uffdf\020\uffdf\021" +
    "\uffdf\022\uffdf\023\uffdf\024\uffdf\025\uffdf\026\uffdf\027\uffdf" +
    "\031\uffdf\034\uffdf\001\002\000\004\050\044\001\002\000" +
    "\012\002\ufffe\004\ufffe\005\ufffe\031\ufffe\001\002\000\052" +
    "\002\uffc5\004\uffc5\005\uffc5\006\uffc5\007\uffc5\011\uffc5\013" +
    "\uffc5\014\uffc5\016\uffc5\017\uffc5\020\uffc5\021\uffc5\022\uffc5" +
    "\023\uffc5\024\uffc5\025\uffc5\026\uffc5\027\uffc5\031\uffc5\034" +
    "\uffc5\001\002\000\052\002\uffdb\004\uffdb\005\uffdb\006\uffdb" +
    "\007\uffdb\011\uffdb\013\uffdb\014\uffdb\016\uffdb\017\uffdb\020" +
    "\uffdb\021\uffdb\022\uffdb\023\uffdb\024\uffdb\025\uffdb\026\uffdb" +
    "\027\uffdb\031\uffdb\034\uffdb\001\002\000\052\002\uffd8\004" +
    "\uffd8\005\uffd8\006\uffd8\007\uffd8\011\uffd8\013\uffd8\014\uffd8" +
    "\016\uffd8\017\uffd8\020\uffd8\021\uffd8\022\uffd8\023\uffd8\024" +
    "\uffd8\025\uffd8\026\uffd8\027\uffd8\031\uffd8\034\uffd8\001\002" +
    "\000\046\010\013\012\037\020\005\021\035\030\025\032" +
    "\014\036\026\037\017\040\032\041\043\042\024\043\033" +
    "\045\040\046\021\047\016\051\042\052\012\053\010\001" +
    "\002\000\046\010\013\012\037\020\005\021\035\030\025" +
    "\032\014\036\026\037\017\040\032\041\043\042\024\043" +
    "\033\045\040\046\021\047\016\051\042\052\012\053\010" +
    "\001\002\000\012\002\uffe6\004\045\005\uffe6\031\uffe6\001" +
    "\002\000\012\002\uffe7\004\uffe7\005\uffe7\031\uffe7\001\002" +
    "\000\052\002\uffe2\004\uffe2\005\uffe2\006\uffe2\007\uffe2\011" +
    "\uffe2\013\uffe2\014\uffe2\016\uffe2\017\uffe2\020\uffe2\021\uffe2" +
    "\022\uffe2\023\uffe2\024\uffe2\025\uffe2\026\uffe2\027\uffe2\031" +
    "\uffe2\034\uffe2\001\002\000\044\012\037\020\005\021\035" +
    "\030\052\032\014\036\026\037\017\040\032\041\043\042" +
    "\024\043\033\045\040\046\021\047\016\051\042\052\012" +
    "\053\010\001\002\000\052\002\uffd4\004\uffd4\005\uffd4\006" +
    "\uffd4\007\uffd4\011\uffd4\013\uffd4\014\uffd4\016\054\017\057" +
    "\020\uffd4\021\uffd4\022\uffd4\023\uffd4\024\uffd4\025\uffd4\026" +
    "\uffd4\027\uffd4\031\uffd4\034\uffd4\001\002\000\044\012\037" +
    "\020\005\021\035\030\052\032\014\036\026\037\017\040" +
    "\032\041\043\042\024\043\033\045\040\046\021\047\016" +
    "\051\042\052\012\053\010\001\002\000\044\012\037\020" +
    "\005\021\035\030\052\032\014\036\026\037\017\040\032" +
    "\041\043\042\024\043\033\045\040\046\021\047\016\051" +
    "\042\052\012\053\010\001\002\000\044\012\037\020\005" +
    "\021\035\030\052\032\014\036\026\037\017\040\032\041" +
    "\043\042\024\043\033\045\040\046\021\047\016\051\042" +
    "\052\012\053\010\001\002\000\044\012\037\020\005\021" +
    "\035\030\052\032\014\036\026\037\017\040\032\041\043" +
    "\042\024\043\033\045\040\046\021\047\016\051\042\052" +
    "\012\053\010\001\002\000\052\002\uffd2\004\uffd2\005\uffd2" +
    "\006\uffd2\007\uffd2\011\uffd2\013\uffd2\014\uffd2\016\uffd2\017" +
    "\uffd2\020\uffd2\021\uffd2\022\uffd2\023\uffd2\024\uffd2\025\uffd2" +
    "\026\uffd2\027\uffd2\031\uffd2\034\uffd2\001\002\000\052\002" +
    "\uffd0\004\uffd0\005\uffd0\006\uffd0\007\uffd0\011\uffd0\013\uffd0" +
    "\014\uffd0\016\054\017\057\020\uffd0\021\uffd0\022\uffd0\023" +
    "\uffd0\024\uffd0\025\uffd0\026\uffd0\027\uffd0\031\uffd0\034\uffd0" +
    "\001\002\000\052\002\uffd1\004\uffd1\005\uffd1\006\uffd1\007" +
    "\uffd1\011\uffd1\013\uffd1\014\uffd1\016\054\017\057\020\uffd1" +
    "\021\uffd1\022\uffd1\023\uffd1\024\uffd1\025\uffd1\026\uffd1\027" +
    "\uffd1\031\uffd1\034\uffd1\001\002\000\052\002\uffd3\004\uffd3" +
    "\005\uffd3\006\uffd3\007\uffd3\011\uffd3\013\uffd3\014\uffd3\016" +
    "\uffd3\017\uffd3\020\uffd3\021\uffd3\022\uffd3\023\uffd3\024\uffd3" +
    "\025\uffd3\026\uffd3\027\uffd3\031\uffd3\034\uffd3\001\002\000" +
    "\014\016\054\017\057\020\055\021\056\031\065\001\002" +
    "\000\052\002\uffd6\004\uffd6\005\uffd6\006\uffd6\007\uffd6\011" +
    "\uffd6\013\uffd6\014\uffd6\016\uffd6\017\uffd6\020\uffd6\021\uffd6" +
    "\022\uffd6\023\uffd6\024\uffd6\025\uffd6\026\uffd6\027\uffd6\031" +
    "\uffd6\034\uffd6\001\002\000\004\030\115\001\002\000\004" +
    "\030\115\001\002\000\044\012\ufff6\020\ufff6\021\ufff6\030" +
    "\ufff6\032\ufff6\036\ufff6\037\ufff6\040\ufff6\041\ufff6\042\ufff6" +
    "\043\ufff6\045\ufff6\046\ufff6\047\ufff6\051\ufff6\052\ufff6\053" +
    "\ufff6\001\002\000\044\012\ufff3\020\ufff3\021\ufff3\030\ufff3" +
    "\032\ufff3\036\ufff3\037\ufff3\040\ufff3\041\ufff3\042\ufff3\043" +
    "\ufff3\045\ufff3\046\ufff3\047\ufff3\051\ufff3\052\ufff3\053\ufff3" +
    "\001\002\000\044\012\037\020\005\021\035\030\052\032" +
    "\014\036\026\037\017\040\032\041\043\042\024\043\033" +
    "\045\040\046\021\047\016\051\042\052\012\053\010\001" +
    "\002\000\044\012\ufff4\020\ufff4\021\ufff4\030\ufff4\032\ufff4" +
    "\036\ufff4\037\ufff4\040\ufff4\041\ufff4\042\ufff4\043\ufff4\045" +
    "\ufff4\046\ufff4\047\ufff4\051\ufff4\052\ufff4\053\ufff4\001\002" +
    "\000\044\012\ufff7\020\ufff7\021\ufff7\030\ufff7\032\ufff7\036" +
    "\ufff7\037\ufff7\040\ufff7\041\ufff7\042\ufff7\043\ufff7\045\ufff7" +
    "\046\ufff7\047\ufff7\051\ufff7\052\ufff7\053\ufff7\001\002\000" +
    "\044\012\037\020\005\021\035\030\052\032\014\036\026" +
    "\037\017\040\032\041\043\042\024\043\033\045\040\046" +
    "\021\047\016\051\042\052\012\053\010\001\002\000\044" +
    "\012\ufff2\020\ufff2\021\ufff2\030\ufff2\032\ufff2\036\ufff2\037" +
    "\ufff2\040\ufff2\041\ufff2\042\ufff2\043\ufff2\045\ufff2\046\ufff2" +
    "\047\ufff2\051\ufff2\052\ufff2\053\ufff2\001\002\000\044\012" +
    "\ufff5\020\ufff5\021\ufff5\030\ufff5\032\ufff5\036\ufff5\037\ufff5" +
    "\040\ufff5\041\ufff5\042\ufff5\043\ufff5\045\ufff5\046\ufff5\047" +
    "\ufff5\051\ufff5\052\ufff5\053\ufff5\001\002\000\044\012\037" +
    "\020\005\021\035\030\052\032\014\036\026\037\017\040" +
    "\032\041\043\042\024\043\033\045\040\046\021\047\016" +
    "\051\042\052\012\053\010\001\002\000\006\010\102\012" +
    "\103\001\002\000\004\012\104\001\002\000\012\002\uffed" +
    "\004\uffed\005\uffed\031\uffed\001\002\000\012\002\uffec\004" +
    "\uffec\005\uffec\031\uffec\001\002\000\014\004\106\016\054" +
    "\017\057\020\055\021\056\001\002\000\044\012\037\020" +
    "\005\021\035\030\052\032\014\036\026\037\017\040\032" +
    "\041\043\042\024\043\033\045\040\046\021\047\016\051" +
    "\042\052\012\053\010\001\002\000\022\002\uffee\004\uffee" +
    "\005\uffee\016\054\017\057\020\055\021\056\031\uffee\001" +
    "\002\000\014\004\111\016\054\017\057\020\055\021\056" +
    "\001\002\000\044\012\037\020\005\021\035\030\052\032" +
    "\014\036\026\037\017\040\032\041\043\042\024\043\033" +
    "\045\040\046\021\047\016\051\042\052\012\053\010\001" +
    "\002\000\022\002\uffef\004\uffef\005\uffef\016\054\017\057" +
    "\020\055\021\056\031\uffef\001\002\000\022\002\ufff8\004" +
    "\ufff8\005\ufff8\016\054\017\057\020\055\021\056\031\ufff8" +
    "\001\002\000\012\002\ufff1\004\ufff1\005\ufff1\031\ufff1\001" +
    "\002\000\046\012\037\020\005\021\035\030\052\032\014" +
    "\036\026\037\017\040\032\041\043\042\024\043\033\044" +
    "\116\045\040\046\021\047\016\051\042\052\012\053\010" +
    "\001\002\000\004\031\124\001\002\000\016\016\054\017" +
    "\057\020\055\021\056\031\uffca\034\uffca\001\002\000\006" +
    "\031\122\034\121\001\002\000\044\012\037\020\005\021" +
    "\035\030\052\032\014\036\026\037\017\040\032\041\043" +
    "\042\024\043\033\045\040\046\021\047\016\051\042\052" +
    "\012\053\010\001\002\000\012\002\uffcd\004\uffcd\005\uffcd" +
    "\031\uffcd\001\002\000\016\016\054\017\057\020\055\021" +
    "\056\031\uffc9\034\uffc9\001\002\000\012\002\uffce\004\uffce" +
    "\005\uffce\031\uffce\001\002\000\012\002\ufff0\004\ufff0\005" +
    "\ufff0\031\ufff0\001\002\000\004\002\001\001\002\000\042" +
    "\006\067\007\066\011\101\013\075\014\100\016\054\017" +
    "\057\020\055\021\056\022\074\023\070\024\077\025\071" +
    "\026\073\027\076\031\065\001\002\000\010\004\045\005" +
    "\046\031\131\001\002\000\012\002\uffe9\004\uffe9\005\uffe9" +
    "\031\uffe9\001\002\000\052\002\uffd7\004\uffd7\005\uffd7\006" +
    "\uffd7\007\uffd7\011\uffd7\013\uffd7\014\uffd7\016\uffd7\017\uffd7" +
    "\020\uffd7\021\uffd7\022\uffd7\023\uffd7\024\uffd7\025\uffd7\026" +
    "\uffd7\027\uffd7\031\uffd7\034\uffd7\001\002\000\046\012\037" +
    "\020\005\021\035\030\052\031\uffcc\032\014\036\026\037" +
    "\017\040\032\041\043\042\024\043\033\045\040\046\021" +
    "\047\016\051\042\052\012\053\010\001\002\000\004\047" +
    "\135\001\002\000\056\002\uffc7\004\uffc7\005\uffc7\006\uffc7" +
    "\007\uffc7\010\uffc7\011\uffc7\013\uffc7\014\uffc7\015\uffc7\016" +
    "\uffc7\017\uffc7\020\uffc7\021\uffc7\022\uffc7\023\uffc7\024\uffc7" +
    "\025\uffc7\026\uffc7\027\uffc7\031\uffc7\034\uffc7\001\002\000" +
    "\004\031\140\001\002\000\006\031\uffcb\034\121\001\002" +
    "\000\052\002\uffcf\004\uffcf\005\uffcf\006\uffcf\007\uffcf\011" +
    "\uffcf\013\uffcf\014\uffcf\016\uffcf\017\uffcf\020\uffcf\021\uffcf" +
    "\022\uffcf\023\uffcf\024\uffcf\025\uffcf\026\uffcf\027\uffcf\031" +
    "\uffcf\034\uffcf\001\002\000\004\033\142\001\002\000\004" +
    "\035\143\001\002\000\004\047\144\001\002\000\056\002" +
    "\uffc6\004\uffc6\005\uffc6\006\uffc6\007\uffc6\010\uffc6\011\uffc6" +
    "\013\uffc6\014\uffc6\015\uffc6\016\uffc6\017\uffc6\020\uffc6\021" +
    "\uffc6\022\uffc6\023\uffc6\024\uffc6\025\uffc6\026\uffc6\027\uffc6" +
    "\031\uffc6\034\uffc6\001\002\000\012\002\uffe8\004\uffe8\005" +
    "\uffe8\031\uffe8\001\002\000\004\053\152\001\002\000\004" +
    "\015\150\001\002\000\004\053\151\001\002\000\012\002" +
    "\uffea\004\uffea\005\uffea\031\uffea\001\002\000\012\002\uffeb" +
    "\004\uffeb\005\uffeb\031\uffeb\001\002\000\052\002\uffd5\004" +
    "\uffd5\005\uffd5\006\uffd5\007\uffd5\011\uffd5\013\uffd5\014\uffd5" +
    "\016\054\017\057\020\uffd5\021\uffd5\022\uffd5\023\uffd5\024" +
    "\uffd5\025\uffd5\026\uffd5\027\uffd5\031\uffd5\034\uffd5\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\151\000\036\003\027\004\035\005\040\007\006\010" +
    "\010\011\022\012\014\013\026\014\030\015\033\016\017" +
    "\017\021\023\005\024\003\001\001\000\002\001\001\000" +
    "\016\014\152\015\033\016\017\017\021\023\050\024\003" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\034\004\144" +
    "\005\040\007\006\010\010\011\022\012\014\013\026\014" +
    "\030\015\033\016\017\017\021\023\005\024\003\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\004" +
    "\127\005\040\007\006\010\010\011\022\012\014\013\026" +
    "\014\126\015\033\016\017\017\021\023\005\024\003\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\006\071\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\014\052\015\033\016\017" +
    "\017\021\023\050\024\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\004" +
    "\047\005\040\007\006\010\010\011\022\012\014\013\026" +
    "\014\030\015\033\016\017\017\021\023\005\024\003\001" +
    "\001\000\034\004\046\005\040\007\006\010\010\011\022" +
    "\012\014\013\026\014\030\015\033\016\017\017\021\023" +
    "\005\024\003\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\014\063\015\033\016\017\017" +
    "\021\023\050\024\003\001\001\000\002\001\001\000\016" +
    "\014\062\015\033\016\017\017\021\023\050\024\003\001" +
    "\001\000\016\014\061\015\033\016\017\017\021\023\050" +
    "\024\003\001\001\000\016\014\060\015\033\016\017\017" +
    "\021\023\050\024\003\001\001\000\016\014\057\015\033" +
    "\016\017\017\021\023\050\024\003\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\020\124\001" +
    "\001\000\004\020\113\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\014\112\015\033\016\017\017\021\023" +
    "\050\024\003\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\014\107\015\033\016\017\017\021\023\050\024" +
    "\003\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\014\104\015\033\016\017\017\021\023\050\024\003\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\014\106\015" +
    "\033\016\017\017\021\023\050\024\003\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\014\111\015\033\016" +
    "\017\017\021\023\050\024\003\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\014\116\015" +
    "\033\016\017\017\021\021\117\023\050\024\003\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\014\122\015\033\016\017\017\021\023\050\024\003" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\006\071" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\014\116\015\033\016\017\017\021\021\136" +
    "\022\135\023\050\024\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AliasConditionParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AliasConditionParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AliasConditionParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


 
  private static Log logger = LogFactory.getLog(AliasConditionScanner.class);

  static public final transient String RCS_ID = "$Id: aliascondition.cup,v 1.5 2009/12/14 12:00:43 ibissw Exp $";
  static public final transient String RCS_REV = "$Revision: 1.5 $";

  private String errorMessage(String message, Object info)
  {
    StringBuffer m = new StringBuffer("Parser error ");

    if (info instanceof java_cup.runtime.Symbol)
      m.append("(").append(info.toString()).append(")");

    m.append(" : ").append(message);

    return m.toString();
  }

  public void report_error(String message, Object info)
  {
    if (logger.isWarnEnabled())
    {
      logger.warn(errorMessage(message, info));
    }
  }

  public void report_fatal_error(String message, Object info) throws Exception
  {
    throw new Exception("Syntax error: " + errorMessage(message, info));
  }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AliasConditionParser$actions {
  private final AliasConditionParser parser;

  /** Constructor */
  CUP$AliasConditionParser$actions(AliasConditionParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$AliasConditionParser$do_action(
    int                        CUP$AliasConditionParser$act_num,
    java_cup.runtime.lr_parser CUP$AliasConditionParser$parser,
    java.util.Stack            CUP$AliasConditionParser$stack,
    int                        CUP$AliasConditionParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AliasConditionParser$result;

      /* select the action based on the action number */
      switch (CUP$AliasConditionParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // number ::= DECIMAL_LITERAL 
            {
              Number RESULT = null;
		int numleft = ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).right;
		java.math.BigDecimal num = (java.math.BigDecimal)((java_cup.runtime.Symbol) CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).value;
		
	RESULT = num;

              CUP$AliasConditionParser$result = new java_cup.runtime.Symbol(18/*number*/, ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).right, RESULT);
            }
          return CUP$AliasConditionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // number ::= LONG_LITERAL 
            {
              Number RESULT = null;
		int numleft = ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).right;
		java.lang.Long num = (java.lang.Long)((java_cup.runtime.Symbol) CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).value;
		
	RESULT = num;

              CUP$AliasConditionParser$result = new java_cup.runtime.Symbol(18/*number*/, ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).right, RESULT);
            }
          return CUP$AliasConditionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // column ::= LBRACK IDENTIFIER RBRACK DOT IDENTIFIER 
            {
              AliasTableColumn RESULT = null;
		int aliasleft = ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-3)).left;
		int aliasright = ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-3)).right;
		java.lang.String alias = (java.lang.String)((java_cup.runtime.Symbol) CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-3)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).right;
		java.lang.String name = (java.lang.String)((java_cup.runtime.Symbol) CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).value;
		
	RESULT = new AliasTableColumn(alias, name, true);

              CUP$AliasConditionParser$result = new java_cup.runtime.Symbol(17/*column*/, ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).right, RESULT);
            }
          return CUP$AliasConditionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // column ::= IDENTIFIER DOT IDENTIFIER 
            {
              AliasTableColumn RESULT = null;
		int aliasleft = ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-2)).left;
		int aliasright = ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-2)).right;
		java.lang.String alias = (java.lang.String)((java_cup.runtime.Symbol) CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-2)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).right;
		java.lang.String name = (java.lang.String)((java_cup.runtime.Symbol) CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).value;
		
	RESULT = new AliasTableColumn(alias, name, false);

              CUP$AliasConditionParser$result = new java_cup.runtime.Symbol(17/*column*/, ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).right, RESULT);
            }
          return CUP$AliasConditionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // column ::= IDENTIFIER 
            {
              AliasTableColumn RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).right;
		java.lang.String name = (java.lang.String)((java_cup.runtime.Symbol) CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).value;
		
	RESULT = new AliasTableColumn(name);

              CUP$AliasConditionParser$result = new java_cup.runtime.Symbol(17/*column*/, ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).right, RESULT);
            }
          return CUP$AliasConditionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expression_list_entries ::= expression_list_entries COMMA expression 
            {
              AliasExpressionList RESULT = null;
		int entriesleft = ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-2)).left;
		int entriesright = ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-2)).right;
		AliasExpressionList entries = (AliasExpressionList)((java_cup.runtime.Symbol) CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).right;
		AliasExpression expr = (AliasExpression)((java_cup.runtime.Symbol) CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).value;
		
	entries.add(expr);
	RESULT = entries;

              CUP$AliasConditionParser$result = new java_cup.runtime.Symbol(15/*expression_list_entries*/, ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).right, RESULT);
            }
          return CUP$AliasConditionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expression_list_entries ::= expression 
            {
              AliasExpressionList RESULT = null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).right;
		AliasExpression expr = (AliasExpression)((java_cup.runtime.Symbol) CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).value;
		
	AliasExpressionList entries = new AliasExpressionList();
	entries.add(expr);
	RESULT = entries;

              CUP$AliasConditionParser$result = new java_cup.runtime.Symbol(15/*expression_list_entries*/, ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).right, RESULT);
            }
          return CUP$AliasConditionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expression_list_entries_opt ::= expression_list_entries 
            {
              AliasExpressionList RESULT = null;
		int entriesleft = ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).left;
		int entriesright = ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).right;
		AliasExpressionList entries = (AliasExpressionList)((java_cup.runtime.Symbol) CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).value;
		
	RESULT = entries;

              CUP$AliasConditionParser$result = new java_cup.runtime.Symbol(16/*expression_list_entries_opt*/, ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).right, RESULT);
            }
          return CUP$AliasConditionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expression_list_entries_opt ::= 
            {
              AliasExpressionList RESULT = null;
		
	RESULT = new AliasExpressionList();

              CUP$AliasConditionParser$result = new java_cup.runtime.Symbol(16/*expression_list_entries_opt*/, ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).right, RESULT);
            }
          return CUP$AliasConditionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // list_expression ::= LPAREN expression_list_entries RPAREN 
            {
              AliasExpression RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-1)).right;
		AliasExpressionList list = (AliasExpressionList)((java_cup.runtime.Symbol) CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-1)).value;
		
	RESULT = list;

              CUP$AliasConditionParser$result = new java_cup.runtime.Symbol(14/*list_expression*/, ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).right, RESULT);
            }
          return CUP$AliasConditionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // list_expression ::= LPAREN ROLES RPAREN 
            {
              AliasExpression RESULT = null;
		
	RESULT = AliasUserExpression.ROLES;

              CUP$AliasConditionParser$result = new java_cup.runtime.Symbol(14/*list_expression*/, ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).right, RESULT);
            }
          return CUP$AliasConditionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // function_expression ::= IDENTIFIER LPAREN expression_list_entries_opt RPAREN 
            {
              AliasExpression RESULT = null;
		int funcleft = ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-3)).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-3)).right;
		java.lang.String func = (java.lang.String)((java_cup.runtime.Symbol) CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-3)).value;
		int entriesleft = ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-1)).left;
		int entriesright = ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-1)).right;
		AliasExpressionList entries = (AliasExpressionList)((java_cup.runtime.Symbol) CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-1)).value;
		
	AliasCompoundExpression compoundExpression = new AliasCompoundExpression();
	compoundExpression.add(func);
	compoundExpression.add(entries);
	RESULT = compoundExpression;

              CUP$AliasConditionParser$result = new java_cup.runtime.Symbol(13/*function_expression*/, ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).right, RESULT);
            }
          return CUP$AliasConditionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // compound_expression ::= expression MINUS expression 
            {
              AliasExpression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-2)).right;
		AliasExpression expr1 = (AliasExpression)((java_cup.runtime.Symbol) CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).right;
		AliasExpression expr2 = (AliasExpression)((java_cup.runtime.Symbol) CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).value;
		
	AliasCompoundExpression compoundExpression = new AliasCompoundExpression();
	compoundExpression.add(expr1);
	compoundExpression.add("-");
	compoundExpression.add(expr2);
	RESULT = compoundExpression;

              CUP$AliasConditionParser$result = new java_cup.runtime.Symbol(12/*compound_expression*/, ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).right, RESULT);
            }
          return CUP$AliasConditionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // compound_expression ::= expression PLUS expression 
            {
              AliasExpression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-2)).right;
		AliasExpression expr1 = (AliasExpression)((java_cup.runtime.Symbol) CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).right;
		AliasExpression expr2 = (AliasExpression)((java_cup.runtime.Symbol) CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).value;
		
	AliasCompoundExpression compoundExpression = new AliasCompoundExpression();
	compoundExpression.add(expr1);
	compoundExpression.add("+");
	compoundExpression.add(expr2);
	RESULT = compoundExpression;

              CUP$AliasConditionParser$result = new java_cup.runtime.Symbol(12/*compound_expression*/, ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).right, RESULT);
            }
          return CUP$AliasConditionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // compound_expression ::= expression DIV expression 
            {
              AliasExpression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-2)).right;
		AliasExpression expr1 = (AliasExpression)((java_cup.runtime.Symbol) CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).right;
		AliasExpression expr2 = (AliasExpression)((java_cup.runtime.Symbol) CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).value;
		
	AliasCompoundExpression compoundExpression = new AliasCompoundExpression();
	compoundExpression.add(expr1);
	compoundExpression.add("/");
	compoundExpression.add(expr2);
	RESULT = compoundExpression;

              CUP$AliasConditionParser$result = new java_cup.runtime.Symbol(12/*compound_expression*/, ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).right, RESULT);
            }
          return CUP$AliasConditionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // compound_expression ::= expression MULT expression 
            {
              AliasExpression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-2)).right;
		AliasExpression expr1 = (AliasExpression)((java_cup.runtime.Symbol) CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).right;
		AliasExpression expr2 = (AliasExpression)((java_cup.runtime.Symbol) CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).value;
		
	AliasCompoundExpression compoundExpression = new AliasCompoundExpression();
	compoundExpression.add(expr1);
	compoundExpression.add("*");
	compoundExpression.add(expr2);
	RESULT = compoundExpression;

              CUP$AliasConditionParser$result = new java_cup.runtime.Symbol(12/*compound_expression*/, ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).right, RESULT);
            }
          return CUP$AliasConditionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // compound_expression ::= MINUS expression 
            {
              AliasExpression RESULT = null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).right;
		AliasExpression expr = (AliasExpression)((java_cup.runtime.Symbol) CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).value;
		
	AliasCompoundExpression compoundExpression = new AliasCompoundExpression();
	compoundExpression.add("-");
	compoundExpression.add(expr);
	RESULT = compoundExpression;

              CUP$AliasConditionParser$result = new java_cup.runtime.Symbol(12/*compound_expression*/, ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).right, RESULT);
            }
          return CUP$AliasConditionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // compound_expression ::= PLUS expression 
            {
              AliasExpression RESULT = null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).right;
		AliasExpression expr = (AliasExpression)((java_cup.runtime.Symbol) CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).value;
		
	AliasCompoundExpression compoundExpression = new AliasCompoundExpression();
	compoundExpression.add("+");
	compoundExpression.add(expr);
	RESULT = compoundExpression;

              CUP$AliasConditionParser$result = new java_cup.runtime.Symbol(12/*compound_expression*/, ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).right, RESULT);
            }
          return CUP$AliasConditionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // compound_expression ::= LPAREN expression RPAREN 
            {
              AliasExpression RESULT = null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-1)).right;
		AliasExpression expr = (AliasExpression)((java_cup.runtime.Symbol) CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-1)).value;
		
	AliasCompoundExpression compoundExpression = new AliasCompoundExpression();
	compoundExpression.add("(");
	compoundExpression.add(expr);
	compoundExpression.add(")");
	RESULT = compoundExpression;

              CUP$AliasConditionParser$result = new java_cup.runtime.Symbol(12/*compound_expression*/, ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).right, RESULT);
            }
          return CUP$AliasConditionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // simple_expression ::= QUOTED_USERPROPERTY PROPERTY 
            {
              AliasExpression RESULT = null;
		int propertyleft = ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).left;
		int propertyright = ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).right;
		java.lang.String property = (java.lang.String)((java_cup.runtime.Symbol) CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).value;
		
	RESULT = AliasUserExpression.getUserPropertyExpression(property, true);

              CUP$AliasConditionParser$result = new java_cup.runtime.Symbol(11/*simple_expression*/, ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).right, RESULT);
            }
          return CUP$AliasConditionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // simple_expression ::= USERPROPERTY PROPERTY 
            {
              AliasExpression RESULT = null;
		int propertyleft = ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).left;
		int propertyright = ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).right;
		java.lang.String property = (java.lang.String)((java_cup.runtime.Symbol) CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).value;
		
	RESULT = AliasUserExpression.getUserPropertyExpression(property, false);

              CUP$AliasConditionParser$result = new java_cup.runtime.Symbol(11/*simple_expression*/, ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).right, RESULT);
            }
          return CUP$AliasConditionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // simple_expression ::= APPLICATIONNAME 
            {
              AliasExpression RESULT = null;
		
	RESULT = AliasUserExpression.APPLICATION_NAME;

              CUP$AliasConditionParser$result = new java_cup.runtime.Symbol(11/*simple_expression*/, ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).right, RESULT);
            }
          return CUP$AliasConditionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // simple_expression ::= LOGINID 
            {
              AliasExpression RESULT = null;
		
	RESULT = AliasUserExpression.LOGIN_ID;

              CUP$AliasConditionParser$result = new java_cup.runtime.Symbol(11/*simple_expression*/, ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).right, RESULT);
            }
          return CUP$AliasConditionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // simple_expression ::= QUOTED_USERID 
            {
              AliasExpression RESULT = null;
		
	RESULT = AliasUserExpression.QUOTED_USER_ID;

              CUP$AliasConditionParser$result = new java_cup.runtime.Symbol(11/*simple_expression*/, ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).right, RESULT);
            }
          return CUP$AliasConditionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // simple_expression ::= USERID 
            {
              AliasExpression RESULT = null;
		
	RESULT = AliasUserExpression.USER_ID;

              CUP$AliasConditionParser$result = new java_cup.runtime.Symbol(11/*simple_expression*/, ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).right, RESULT);
            }
          return CUP$AliasConditionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // simple_expression ::= QUOTED_MANDATORID 
            {
              AliasExpression RESULT = null;
		
	RESULT = AliasUserExpression.QUOTED_MANDATOR_ID;

              CUP$AliasConditionParser$result = new java_cup.runtime.Symbol(11/*simple_expression*/, ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).right, RESULT);
            }
          return CUP$AliasConditionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // simple_expression ::= MANDATORID 
            {
              AliasExpression RESULT = null;
		
	RESULT = AliasUserExpression.MANDATOR_ID;

              CUP$AliasConditionParser$result = new java_cup.runtime.Symbol(11/*simple_expression*/, ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).right, RESULT);
            }
          return CUP$AliasConditionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // simple_expression ::= NULL 
            {
              AliasExpression RESULT = null;
		
	RESULT = new AliasSimpleExpression("NULL");

              CUP$AliasConditionParser$result = new java_cup.runtime.Symbol(11/*simple_expression*/, ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).right, RESULT);
            }
          return CUP$AliasConditionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // simple_expression ::= number 
            {
              AliasExpression RESULT = null;
		int numleft = ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).right;
		Number num = (Number)((java_cup.runtime.Symbol) CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).value;
		
	RESULT = new AliasSimpleExpression(num.toString());

              CUP$AliasConditionParser$result = new java_cup.runtime.Symbol(11/*simple_expression*/, ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).right, RESULT);
            }
          return CUP$AliasConditionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // simple_expression ::= QUOTED_STRING_LITERAL 
            {
              AliasExpression RESULT = null;
		int strleft = ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).left;
		int strright = ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).right;
		java.lang.String str = (java.lang.String)((java_cup.runtime.Symbol) CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).value;
		
	RESULT = new AliasSimpleExpression(str);

              CUP$AliasConditionParser$result = new java_cup.runtime.Symbol(11/*simple_expression*/, ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).right, RESULT);
            }
          return CUP$AliasConditionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // simple_expression ::= column 
            {
              AliasExpression RESULT = null;
		int colleft = ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).left;
		int colright = ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).right;
		AliasTableColumn col = (AliasTableColumn)((java_cup.runtime.Symbol) CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).value;
		
	RESULT = col;

              CUP$AliasConditionParser$result = new java_cup.runtime.Symbol(11/*simple_expression*/, ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).right, RESULT);
            }
          return CUP$AliasConditionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expression ::= function_expression 
            {
              AliasExpression RESULT = null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).right;
		AliasExpression expr = (AliasExpression)((java_cup.runtime.Symbol) CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).value;
		
	RESULT = expr;

              CUP$AliasConditionParser$result = new java_cup.runtime.Symbol(10/*expression*/, ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).right, RESULT);
            }
          return CUP$AliasConditionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expression ::= compound_expression 
            {
              AliasExpression RESULT = null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).right;
		AliasExpression expr = (AliasExpression)((java_cup.runtime.Symbol) CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).value;
		
	RESULT = expr;

              CUP$AliasConditionParser$result = new java_cup.runtime.Symbol(10/*expression*/, ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).right, RESULT);
            }
          return CUP$AliasConditionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expression ::= simple_expression 
            {
              AliasExpression RESULT = null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).right;
		AliasExpression expr = (AliasExpression)((java_cup.runtime.Symbol) CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).value;
		
	RESULT = expr;

              CUP$AliasConditionParser$result = new java_cup.runtime.Symbol(10/*expression*/, ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).right, RESULT);
            }
          return CUP$AliasConditionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // compound_condition ::= condition OR condition 
            {
              AliasCondition RESULT = null;
		int cond1left = ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-2)).left;
		int cond1right = ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-2)).right;
		AliasCondition cond1 = (AliasCondition)((java_cup.runtime.Symbol) CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-2)).value;
		int cond2left = ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).left;
		int cond2right = ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).right;
		AliasCondition cond2 = (AliasCondition)((java_cup.runtime.Symbol) CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).value;
		
	RESULT = new AliasBinaryCondition(cond1, " OR ", cond2);

              CUP$AliasConditionParser$result = new java_cup.runtime.Symbol(9/*compound_condition*/, ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).right, RESULT);
            }
          return CUP$AliasConditionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // compound_condition ::= condition AND condition 
            {
              AliasCondition RESULT = null;
		int cond1left = ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-2)).left;
		int cond1right = ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-2)).right;
		AliasCondition cond1 = (AliasCondition)((java_cup.runtime.Symbol) CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-2)).value;
		int cond2left = ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).left;
		int cond2right = ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).right;
		AliasCondition cond2 = (AliasCondition)((java_cup.runtime.Symbol) CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).value;
		
	RESULT = new AliasBinaryCondition(cond1, " AND ", cond2);

              CUP$AliasConditionParser$result = new java_cup.runtime.Symbol(9/*compound_condition*/, ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).right, RESULT);
            }
          return CUP$AliasConditionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // compound_condition ::= NOT condition 
            {
              AliasCondition RESULT = null;
		int condleft = ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).right;
		AliasCondition cond = (AliasCondition)((java_cup.runtime.Symbol) CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).value;
		
	RESULT = new AliasUnaryCondition("NOT ", cond);

              CUP$AliasConditionParser$result = new java_cup.runtime.Symbol(9/*compound_condition*/, ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).right, RESULT);
            }
          return CUP$AliasConditionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // compound_condition ::= LPAREN condition RPAREN 
            {
              AliasCondition RESULT = null;
		int condleft = ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-1)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-1)).right;
		AliasCondition cond = (AliasCondition)((java_cup.runtime.Symbol) CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-1)).value;
		
	RESULT = new AliasParenthesedCondition(cond);

              CUP$AliasConditionParser$result = new java_cup.runtime.Symbol(9/*compound_condition*/, ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).right, RESULT);
            }
          return CUP$AliasConditionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // like_condition ::= column NOT LIKE QUOTED_STRING_LITERAL 
            {
              AliasCondition RESULT = null;
		int colleft = ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-3)).left;
		int colright = ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-3)).right;
		AliasTableColumn col = (AliasTableColumn)((java_cup.runtime.Symbol) CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-3)).value;
		int strleft = ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).left;
		int strright = ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).right;
		java.lang.String str = (java.lang.String)((java_cup.runtime.Symbol) CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).value;
		
	AliasSimpleCondition condition = new AliasSimpleCondition();
	condition.add(col);
	condition.add(" NOT LIKE "+ str);
	RESULT = condition;

              CUP$AliasConditionParser$result = new java_cup.runtime.Symbol(8/*like_condition*/, ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).right, RESULT);
            }
          return CUP$AliasConditionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // like_condition ::= column LIKE QUOTED_STRING_LITERAL 
            {
              AliasCondition RESULT = null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-2)).right;
		AliasTableColumn expr = (AliasTableColumn)((java_cup.runtime.Symbol) CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-2)).value;
		int strleft = ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).left;
		int strright = ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).right;
		java.lang.String str = (java.lang.String)((java_cup.runtime.Symbol) CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).value;
		
	AliasSimpleCondition condition = new AliasSimpleCondition();
	condition.add(expr);
	condition.add(" LIKE "+ str);
	RESULT = condition;

              CUP$AliasConditionParser$result = new java_cup.runtime.Symbol(8/*like_condition*/, ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).right, RESULT);
            }
          return CUP$AliasConditionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // null_condition ::= expression IS NOT NULL 
            {
              AliasCondition RESULT = null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-3)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-3)).right;
		AliasExpression expr = (AliasExpression)((java_cup.runtime.Symbol) CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-3)).value;
		
	AliasSimpleCondition condition = new AliasSimpleCondition();
	condition.add(expr);
	condition.add(" IS NOT NULL");
	RESULT = condition;

              CUP$AliasConditionParser$result = new java_cup.runtime.Symbol(7/*null_condition*/, ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).right, RESULT);
            }
          return CUP$AliasConditionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // null_condition ::= expression IS NULL 
            {
              AliasCondition RESULT = null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-2)).right;
		AliasExpression expr = (AliasExpression)((java_cup.runtime.Symbol) CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-2)).value;
		
	AliasSimpleCondition condition = new AliasSimpleCondition();
	condition.add(expr);
	condition.add(" IS NULL");
	RESULT = condition;

              CUP$AliasConditionParser$result = new java_cup.runtime.Symbol(7/*null_condition*/, ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).right, RESULT);
            }
          return CUP$AliasConditionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // range_condition ::= expression NOT_BETWEEN expression AND expression 
            {
              AliasCondition RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-4)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-4)).right;
		AliasExpression expr1 = (AliasExpression)((java_cup.runtime.Symbol) CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-4)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-2)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-2)).right;
		AliasExpression expr2 = (AliasExpression)((java_cup.runtime.Symbol) CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-2)).value;
		int expr3left = ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).left;
		int expr3right = ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).right;
		AliasExpression expr3 = (AliasExpression)((java_cup.runtime.Symbol) CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).value;
		
	AliasSimpleCondition condition = new AliasSimpleCondition();
	condition.add(expr1);
	condition.add(" NOT BETWEEN ");
	condition.add(expr2);
	condition.add(" AND ");
	condition.add(expr3);
	RESULT = condition;

              CUP$AliasConditionParser$result = new java_cup.runtime.Symbol(6/*range_condition*/, ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).right, RESULT);
            }
          return CUP$AliasConditionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // range_condition ::= expression BETWEEN expression AND expression 
            {
              AliasCondition RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-4)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-4)).right;
		AliasExpression expr1 = (AliasExpression)((java_cup.runtime.Symbol) CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-4)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-2)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-2)).right;
		AliasExpression expr2 = (AliasExpression)((java_cup.runtime.Symbol) CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-2)).value;
		int expr3left = ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).left;
		int expr3right = ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).right;
		AliasExpression expr3 = (AliasExpression)((java_cup.runtime.Symbol) CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).value;
		
	AliasSimpleCondition condition = new AliasSimpleCondition();
	condition.add(expr1);
	condition.add(" BETWEEN ");
	condition.add(expr2);
	condition.add(" AND ");
	condition.add(expr3);
	RESULT = condition;

              CUP$AliasConditionParser$result = new java_cup.runtime.Symbol(6/*range_condition*/, ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).right, RESULT);
            }
          return CUP$AliasConditionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // membership_condition ::= expression NOT_IN list_expression 
            {
              AliasCondition RESULT = null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-2)).right;
		AliasExpression expr = (AliasExpression)((java_cup.runtime.Symbol) CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-2)).value;
		int exprlistleft = ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).left;
		int exprlistright = ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).right;
		AliasExpression exprlist = (AliasExpression)((java_cup.runtime.Symbol) CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).value;
		
	AliasSimpleCondition condition = new AliasSimpleCondition();
	condition.add(expr);
	condition.add(" NOT IN ");
	condition.add(exprlist);
	RESULT = condition;

              CUP$AliasConditionParser$result = new java_cup.runtime.Symbol(5/*membership_condition*/, ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).right, RESULT);
            }
          return CUP$AliasConditionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // membership_condition ::= expression IN list_expression 
            {
              AliasCondition RESULT = null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-2)).right;
		AliasExpression expr = (AliasExpression)((java_cup.runtime.Symbol) CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-2)).value;
		int exprlistleft = ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).left;
		int exprlistright = ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).right;
		AliasExpression exprlist = (AliasExpression)((java_cup.runtime.Symbol) CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).value;
		
	AliasSimpleCondition condition = new AliasSimpleCondition();
	condition.add(expr);
	condition.add(" IN ");
	condition.add(exprlist);
	RESULT = condition;

              CUP$AliasConditionParser$result = new java_cup.runtime.Symbol(5/*membership_condition*/, ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).right, RESULT);
            }
          return CUP$AliasConditionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // simple_comparison_operator ::= LESS_OR_EQ_THAN 
            {
              String RESULT = null;
		
	RESULT = "<=";

              CUP$AliasConditionParser$result = new java_cup.runtime.Symbol(4/*simple_comparison_operator*/, ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).right, RESULT);
            }
          return CUP$AliasConditionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // simple_comparison_operator ::= GREATER_OR_EQ_THAN 
            {
              String RESULT = null;
		
	RESULT = ">=";

              CUP$AliasConditionParser$result = new java_cup.runtime.Symbol(4/*simple_comparison_operator*/, ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).right, RESULT);
            }
          return CUP$AliasConditionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // simple_comparison_operator ::= LESS_THAN 
            {
              String RESULT = null;
		
	RESULT = "<";

              CUP$AliasConditionParser$result = new java_cup.runtime.Symbol(4/*simple_comparison_operator*/, ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).right, RESULT);
            }
          return CUP$AliasConditionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // simple_comparison_operator ::= GREATER_THAN 
            {
              String RESULT = null;
		
	RESULT = ">";

              CUP$AliasConditionParser$result = new java_cup.runtime.Symbol(4/*simple_comparison_operator*/, ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).right, RESULT);
            }
          return CUP$AliasConditionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // simple_comparison_operator ::= NOTEQ 
            {
              String RESULT = null;
		
	RESULT = "<>";

              CUP$AliasConditionParser$result = new java_cup.runtime.Symbol(4/*simple_comparison_operator*/, ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).right, RESULT);
            }
          return CUP$AliasConditionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // simple_comparison_operator ::= EQ 
            {
              String RESULT = null;
		
	RESULT = "=";

              CUP$AliasConditionParser$result = new java_cup.runtime.Symbol(4/*simple_comparison_operator*/, ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).right, RESULT);
            }
          return CUP$AliasConditionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // simple_comparison_condition ::= expression simple_comparison_operator expression 
            {
              AliasCondition RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-2)).right;
		AliasExpression expr1 = (AliasExpression)((java_cup.runtime.Symbol) CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-1)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).right;
		AliasExpression expr2 = (AliasExpression)((java_cup.runtime.Symbol) CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).value;
		
	AliasSimpleCondition condition = new AliasSimpleCondition();
	condition.add(expr1);
	condition.add(op);
	condition.add(expr2);
	RESULT = condition;

              CUP$AliasConditionParser$result = new java_cup.runtime.Symbol(3/*simple_comparison_condition*/, ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).right, RESULT);
            }
          return CUP$AliasConditionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // condition ::= compound_condition 
            {
              AliasCondition RESULT = null;
		int condleft = ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).right;
		AliasCondition cond = (AliasCondition)((java_cup.runtime.Symbol) CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).value;
		
	RESULT = cond;

              CUP$AliasConditionParser$result = new java_cup.runtime.Symbol(2/*condition*/, ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).right, RESULT);
            }
          return CUP$AliasConditionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // condition ::= like_condition 
            {
              AliasCondition RESULT = null;
		int condleft = ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).right;
		AliasCondition cond = (AliasCondition)((java_cup.runtime.Symbol) CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).value;
		
	RESULT = cond;

              CUP$AliasConditionParser$result = new java_cup.runtime.Symbol(2/*condition*/, ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).right, RESULT);
            }
          return CUP$AliasConditionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // condition ::= null_condition 
            {
              AliasCondition RESULT = null;
		int condleft = ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).right;
		AliasCondition cond = (AliasCondition)((java_cup.runtime.Symbol) CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).value;
		
	RESULT = cond;

              CUP$AliasConditionParser$result = new java_cup.runtime.Symbol(2/*condition*/, ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).right, RESULT);
            }
          return CUP$AliasConditionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // condition ::= range_condition 
            {
              AliasCondition RESULT = null;
		int condleft = ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).right;
		AliasCondition cond = (AliasCondition)((java_cup.runtime.Symbol) CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).value;
		
	RESULT = cond;

              CUP$AliasConditionParser$result = new java_cup.runtime.Symbol(2/*condition*/, ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).right, RESULT);
            }
          return CUP$AliasConditionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // condition ::= membership_condition 
            {
              AliasCondition RESULT = null;
		int condleft = ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).right;
		AliasCondition cond = (AliasCondition)((java_cup.runtime.Symbol) CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).value;
		
	RESULT = cond;

              CUP$AliasConditionParser$result = new java_cup.runtime.Symbol(2/*condition*/, ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).right, RESULT);
            }
          return CUP$AliasConditionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // condition ::= simple_comparison_condition 
            {
              AliasCondition RESULT = null;
		int condleft = ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).right;
		AliasCondition cond = (AliasCondition)((java_cup.runtime.Symbol) CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).value;
		
	RESULT = cond;

              CUP$AliasConditionParser$result = new java_cup.runtime.Symbol(2/*condition*/, ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).right, RESULT);
            }
          return CUP$AliasConditionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // condition_start ::= condition 
            {
              AliasCondition RESULT = null;
		int condleft = ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).right;
		AliasCondition cond = (AliasCondition)((java_cup.runtime.Symbol) CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).value;
		
	RESULT = cond;

              CUP$AliasConditionParser$result = new java_cup.runtime.Symbol(1/*condition_start*/, ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).right, RESULT);
            }
          return CUP$AliasConditionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // condition_start ::= 
            {
              AliasCondition RESULT = null;
		
	RESULT = null;

              CUP$AliasConditionParser$result = new java_cup.runtime.Symbol(1/*condition_start*/, ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).right, RESULT);
            }
          return CUP$AliasConditionParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= condition_start EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-1)).right;
		AliasCondition start_val = (AliasCondition)((java_cup.runtime.Symbol) CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-1)).value;
		RESULT = start_val;
              CUP$AliasConditionParser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$AliasConditionParser$stack.elementAt(CUP$AliasConditionParser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$AliasConditionParser$parser.done_parsing();
          return CUP$AliasConditionParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

