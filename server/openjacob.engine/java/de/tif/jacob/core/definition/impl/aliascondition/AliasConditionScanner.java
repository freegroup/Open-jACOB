/* The following code was generated by JFlex 1.3.5 on 28.04.15 11:21 */

/*
     This file is part of Open-jACOB
     Copyright (C) 2005-2006 Tarragon GmbH
  
     This program is free software; you can redistribute it and/or modify
     it under the terms of the GNU General Public License as published by
     the Free Software Foundation; version 2 of the License.
  
     This program is distributed in the hope that it will be useful,
     but WITHOUT ANY WARRANTY; without even the implied warranty of
     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     GNU General Public License for more details.
  
     You should have received a copy of the GNU General Public License     
     along with this program; if not, write to the Free Software
     Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  
     USA
*/

package de.tif.jacob.core.definition.impl.aliascondition;

import java_cup.runtime.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.3.5
 * on 28.04.15 11:21 from the specification file
 * <tt>file:/Users/andherz/Documents/workspace/openjacob.engine/JFlex/aliascondition.flex</tt>
 */
public class AliasConditionScanner implements AliasConditionSym, java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  final public static int YYEOF = -1;

  /** initial size of the lookahead buffer */
  final private static int YY_BUFFERSIZE = 16384;

  /** lexical states */
  final public static int STRINGLITERAL = 1;
  final public static int PROPERTY_STATE_QUOTED = 3;
  final public static int YYINITIAL = 0;
  final public static int PROPERTY_STATE = 2;

  /** 
   * Translates characters to character classes
   */
  final private static String yycmap_packed = 
    "\11\5\1\3\1\2\1\0\1\3\1\1\16\5\4\0\1\3\1\62"+
    "\2\0\1\4\2\0\1\11\1\52\1\53\1\63\1\65\1\54\1\66"+
    "\1\10\1\64\1\6\11\7\2\0\1\60\1\57\1\61\2\0\1\32"+
    "\1\24\1\50\1\34\1\44\1\4\1\46\1\4\1\40\1\4\1\27"+
    "\1\45\1\31\1\33\1\36\1\47\1\4\1\37\1\43\1\35\1\42"+
    "\1\4\1\26\1\4\1\51\1\4\1\55\1\67\1\56\1\0\1\4"+
    "\1\0\1\12\1\24\1\4\1\14\1\25\3\4\1\17\1\4\1\27"+
    "\1\23\1\4\1\13\1\15\2\4\1\16\1\21\1\20\1\22\1\4"+
    "\1\26\3\4\1\30\1\0\1\41\1\0\41\5\2\0\4\4\4\0"+
    "\1\4\2\0\1\5\7\0\1\4\4\0\1\4\5\0\27\4\1\0"+
    "\37\4\1\0\u01ca\4\4\0\14\4\16\0\5\4\7\0\1\4\1\0"+
    "\1\4\21\0\160\5\5\4\1\0\2\4\2\0\4\4\10\0\1\4"+
    "\1\0\3\4\1\0\1\4\1\0\24\4\1\0\123\4\1\0\213\4"+
    "\1\0\5\5\2\0\236\4\11\0\46\4\2\0\1\4\7\0\47\4"+
    "\11\0\55\5\1\0\1\5\1\0\2\5\1\0\2\5\1\0\1\5"+
    "\10\0\33\4\5\0\3\4\15\0\4\5\7\0\1\4\4\0\13\5"+
    "\5\0\53\4\37\5\4\0\2\4\1\5\143\4\1\0\1\4\10\5"+
    "\1\0\6\5\2\4\2\5\1\0\4\5\2\4\12\5\3\4\2\0"+
    "\1\4\17\0\1\5\1\4\1\5\36\4\33\5\2\0\131\4\13\5"+
    "\1\4\16\0\12\5\41\4\11\5\2\4\4\0\1\4\5\0\26\4"+
    "\4\5\1\4\11\5\1\4\3\5\1\4\5\5\22\0\31\4\3\5"+
    "\244\0\4\5\66\4\3\5\1\4\22\5\1\4\7\5\12\4\2\5"+
    "\2\0\12\5\1\0\7\4\1\0\7\4\1\0\3\5\1\0\10\4"+
    "\2\0\2\4\2\0\26\4\1\0\7\4\1\0\1\4\3\0\4\4"+
    "\2\0\1\5\1\4\7\5\2\0\2\5\2\0\3\5\1\4\10\0"+
    "\1\5\4\0\2\4\1\0\3\4\2\5\2\0\12\5\4\4\7\0"+
    "\1\4\5\0\3\5\1\0\6\4\4\0\2\4\2\0\26\4\1\0"+
    "\7\4\1\0\2\4\1\0\2\4\1\0\2\4\2\0\1\5\1\0"+
    "\5\5\4\0\2\5\2\0\3\5\3\0\1\5\7\0\4\4\1\0"+
    "\1\4\7\0\14\5\3\4\1\5\13\0\3\5\1\0\11\4\1\0"+
    "\3\4\1\0\26\4\1\0\7\4\1\0\2\4\1\0\5\4\2\0"+
    "\1\5\1\4\10\5\1\0\3\5\1\0\3\5\2\0\1\4\17\0"+
    "\2\4\2\5\2\0\12\5\1\0\1\4\17\0\3\5\1\0\10\4"+
    "\2\0\2\4\2\0\26\4\1\0\7\4\1\0\2\4\1\0\5\4"+
    "\2\0\1\5\1\4\7\5\2\0\2\5\2\0\3\5\10\0\2\5"+
    "\4\0\2\4\1\0\3\4\2\5\2\0\12\5\1\0\1\4\20\0"+
    "\1\5\1\4\1\0\6\4\3\0\3\4\1\0\4\4\3\0\2\4"+
    "\1\0\1\4\1\0\2\4\3\0\2\4\3\0\3\4\3\0\14\4"+
    "\4\0\5\5\3\0\3\5\1\0\4\5\2\0\1\4\6\0\1\5"+
    "\16\0\12\5\11\0\1\4\7\0\3\5\1\0\10\4\1\0\3\4"+
    "\1\0\27\4\1\0\12\4\1\0\5\4\3\0\1\4\7\5\1\0"+
    "\3\5\1\0\4\5\7\0\2\5\1\0\2\4\6\0\2\4\2\5"+
    "\2\0\12\5\22\0\2\5\1\0\10\4\1\0\3\4\1\0\27\4"+
    "\1\0\12\4\1\0\5\4\2\0\1\5\1\4\7\5\1\0\3\5"+
    "\1\0\4\5\7\0\2\5\7\0\1\4\1\0\2\4\2\5\2\0"+
    "\12\5\1\0\2\4\17\0\2\5\1\0\10\4\1\0\3\4\1\0"+
    "\51\4\2\0\1\4\7\5\1\0\3\5\1\0\4\5\1\4\10\0"+
    "\1\5\10\0\2\4\2\5\2\0\12\5\12\0\6\4\2\0\2\5"+
    "\1\0\22\4\3\0\30\4\1\0\11\4\1\0\1\4\2\0\7\4"+
    "\3\0\1\5\4\0\6\5\1\0\1\5\1\0\10\5\22\0\2\5"+
    "\15\0\60\4\1\5\2\4\7\5\4\0\10\4\10\5\1\0\12\5"+
    "\47\0\2\4\1\0\1\4\2\0\2\4\1\0\1\4\2\0\1\4"+
    "\6\0\4\4\1\0\7\4\1\0\3\4\1\0\1\4\1\0\1\4"+
    "\2\0\2\4\1\0\4\4\1\5\2\4\6\5\1\0\2\5\1\4"+
    "\2\0\5\4\1\0\1\4\1\0\6\5\2\0\12\5\2\0\2\4"+
    "\42\0\1\4\27\0\2\5\6\0\12\5\13\0\1\5\1\0\1\5"+
    "\1\0\1\5\4\0\2\5\10\4\1\0\44\4\4\0\24\5\1\0"+
    "\2\5\5\4\13\5\1\0\44\5\11\0\1\5\71\0\53\4\24\5"+
    "\1\4\12\5\6\0\6\4\4\5\4\4\3\5\1\4\3\5\2\4"+
    "\7\5\3\4\4\5\15\4\14\5\1\4\17\5\2\0\46\4\12\0"+
    "\53\4\1\0\1\4\3\0\u0149\4\1\0\4\4\2\0\7\4\1\0"+
    "\1\4\1\0\4\4\2\0\51\4\1\0\4\4\2\0\41\4\1\0"+
    "\4\4\2\0\7\4\1\0\1\4\1\0\4\4\2\0\17\4\1\0"+
    "\71\4\1\0\4\4\2\0\103\4\2\0\3\5\40\0\20\4\20\0"+
    "\125\4\14\0\u026c\4\2\0\21\4\1\0\32\4\5\0\113\4\3\0"+
    "\3\4\17\0\15\4\1\0\4\4\3\5\13\0\22\4\3\5\13\0"+
    "\22\4\2\5\14\0\15\4\1\0\3\4\1\0\2\5\14\0\64\4"+
    "\40\5\3\0\1\4\3\0\2\4\1\5\2\0\12\5\41\0\3\5"+
    "\2\0\12\5\6\0\130\4\10\0\51\4\1\5\1\4\5\0\106\4"+
    "\12\0\35\4\3\0\14\5\4\0\14\5\12\0\12\5\36\4\2\0"+
    "\5\4\13\0\54\4\4\0\21\5\7\4\2\5\6\0\12\5\46\0"+
    "\27\4\5\5\4\0\65\4\12\5\1\0\35\5\2\0\13\5\6\0"+
    "\12\5\15\0\1\4\130\0\5\5\57\4\21\5\7\4\4\0\12\5"+
    "\21\0\11\5\14\0\3\5\36\4\12\5\3\0\2\4\12\5\6\0"+
    "\46\4\16\5\14\0\44\4\24\5\10\0\12\5\3\0\3\4\12\5"+
    "\44\4\122\0\3\5\1\0\25\5\4\4\1\5\4\4\1\5\15\0"+
    "\300\4\47\5\25\0\4\5\u0116\4\2\0\6\4\2\0\46\4\2\0"+
    "\6\4\2\0\10\4\1\0\1\4\1\0\1\4\1\0\1\4\1\0"+
    "\37\4\2\0\65\4\1\0\7\4\1\0\1\4\3\0\3\4\1\0"+
    "\7\4\3\0\4\4\2\0\6\4\4\0\15\4\5\0\3\4\1\0"+
    "\7\4\16\0\5\5\32\0\5\5\20\0\2\4\23\0\1\4\13\0"+
    "\5\5\5\0\6\5\1\0\1\4\15\0\1\4\20\0\15\4\3\0"+
    "\32\4\26\0\15\5\4\0\1\5\3\0\14\5\21\0\1\4\4\0"+
    "\1\4\2\0\12\4\1\0\1\4\3\0\5\4\6\0\1\4\1\0"+
    "\1\4\1\0\1\4\1\0\4\4\1\0\13\4\2\0\4\4\5\0"+
    "\5\4\4\0\1\4\21\0\51\4\u0a77\0\57\4\1\0\57\4\1\0"+
    "\205\4\6\0\4\4\3\5\16\0\46\4\12\0\66\4\11\0\1\4"+
    "\17\0\1\5\27\4\11\0\7\4\1\0\7\4\1\0\7\4\1\0"+
    "\7\4\1\0\7\4\1\0\7\4\1\0\7\4\1\0\7\4\1\0"+
    "\40\5\57\0\1\4\u01d5\0\3\4\31\0\11\4\6\5\1\0\5\4"+
    "\2\0\5\4\4\0\126\4\2\0\2\5\2\0\3\4\1\0\132\4"+
    "\1\0\4\4\5\0\51\4\3\0\136\4\21\0\33\4\65\0\20\4"+
    "\u0200\0\u19b6\4\112\0\u51cc\4\64\0\u048d\4\103\0\56\4\2\0\u010d\4"+
    "\3\0\20\4\12\5\2\4\24\0\57\4\1\5\14\0\2\5\1\0"+
    "\31\4\10\0\120\4\2\5\45\0\11\4\2\0\147\4\2\0\4\4"+
    "\1\0\2\4\16\0\12\4\120\0\10\4\1\5\3\4\1\5\4\4"+
    "\1\5\27\4\5\5\20\0\1\4\7\0\64\4\14\0\2\5\62\4"+
    "\21\5\13\0\12\5\6\0\22\5\6\4\3\0\1\4\4\0\12\5"+
    "\34\4\10\5\2\0\27\4\15\5\14\0\35\4\3\0\4\5\57\4"+
    "\16\5\16\0\1\4\12\5\46\0\51\4\16\5\11\0\3\4\1\5"+
    "\10\4\2\5\2\0\12\5\6\0\27\4\3\0\1\4\1\5\4\0"+
    "\60\4\1\5\1\4\3\5\2\4\2\5\5\4\2\5\1\4\1\5"+
    "\1\4\30\0\3\4\43\0\6\4\2\0\6\4\2\0\6\4\11\0"+
    "\7\4\1\0\7\4\221\0\43\4\10\5\1\0\2\5\2\0\12\5"+
    "\6\0\u2ba4\4\14\0\27\4\4\0\61\4\u2104\0\u012e\4\2\0\76\4"+
    "\2\0\152\4\46\0\7\4\14\0\5\4\5\0\1\4\1\5\12\4"+
    "\1\0\15\4\1\0\5\4\1\0\1\4\1\0\2\4\1\0\2\4"+
    "\1\0\154\4\41\0\u016b\4\22\0\100\4\2\0\66\4\50\0\15\4"+
    "\3\0\20\5\20\0\7\5\14\0\2\4\30\0\3\4\31\0\1\4"+
    "\6\0\5\4\1\0\207\4\2\0\1\5\4\0\1\4\13\0\12\5"+
    "\7\0\32\4\4\0\1\4\1\0\32\4\13\0\131\4\3\0\6\4"+
    "\2\0\6\4\2\0\6\4\2\0\3\4\3\0\2\4\3\0\2\4"+
    "\22\0\3\5\4\0";

  /** 
   * Translates characters to character classes
   */
  final private static char [] yycmap = yy_unpack_cmap(yycmap_packed);

  /** 
   * Translates a state to a row index in the transition table
   */
  final private static int yy_rowMap [] = { 
        0,    56,   112,   168,   224,   280,   224,   336,   392,   448, 
      504,   560,   616,   672,   728,   784,   840,   896,   952,   224, 
      224,   224,   224,   224,   224,  1008,  1064,  1120,   224,   224, 
      224,   224,  1176,  1232,   224,  1288,  1344,   224,  1400,   224, 
     1456,   392,   504,  1512,  1568,  1624,  1680,   336,   336,   336, 
     1736,  1792,  1848,  1904,  1960,  2016,  2072,   224,   224,   224, 
      224,   224,  2128,  2184,  2240,  2296,   336,  2352,  2408,  2464, 
     2520,  2576,  2632,  2688,  2744,  2800,  2856,  2912,  2968,  3024, 
     3080,   336,   336,  3136,  3192,  3248,  3304,  3360,  3416,  3472, 
     3528,  3584,  3640,  3696,  3752,  3808,  3864,  3920,  3976,  4032, 
     4088,  4144,  4200,  4256,  4312,   224,  4368,  4424,  4480,  4536, 
     4592,  4648,  4704,  4760,  4816,  4872,  4928,  4984,  5040,  5096, 
      336,  5152,  5208,   224,  5264,  5320,  5376,  5432,  5488,  5544, 
     5600,  5656,  5712,  5768,  5824,   224,  5880,  5936,  5992,  6048, 
     6104,  6160,  6216,  6272,  6328,  6384,  6440,   224,  6496,  6552, 
      224,  6608,  6664,  6720,  6776,  6832,  6888,  6944,  7000,  7056, 
      224,  7112,  7168,  7224,  7280,  7336,  7392,   224,  7448,  7504, 
     7560,  7616,  7672,  7728,  7784,   224,  7840,  7896,  7952,   224, 
     8008,   224,  8064,  8120,  8176,  8232,   224,  8288
  };

  /** 
   * The packed transition table of the DFA (part 0)
   */
  final private static String yy_packed0 = 
    "\1\5\1\6\2\7\1\10\1\5\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\10\1\17\1\10\1\20\3\10"+
    "\1\21\1\22\3\10\1\23\1\10\1\15\1\16\2\10"+
    "\1\17\1\10\1\20\1\5\3\10\1\21\4\10\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\5\1\41\1\42\1\43"+
    "\6\41\1\44\55\41\1\45\4\46\1\47\5\46\16\47"+
    "\1\46\10\47\1\50\10\47\22\46\1\47\5\46\16\47"+
    "\1\46\10\47\1\51\10\47\16\46\72\0\1\7\71\0"+
    "\4\10\2\0\16\10\1\0\10\10\1\0\10\10\24\0"+
    "\2\52\1\53\65\0\2\12\1\53\65\0\2\53\110\0"+
    "\1\54\43\0\4\10\2\0\1\10\1\55\14\10\1\0"+
    "\2\10\1\55\5\10\1\0\10\10\22\0\4\10\2\0"+
    "\3\10\1\56\4\10\1\57\5\10\1\0\5\10\1\56"+
    "\2\10\1\0\1\57\7\10\22\0\4\10\2\0\4\10"+
    "\1\60\11\10\1\0\6\10\1\60\1\10\1\0\10\10"+
    "\22\0\4\10\2\0\1\10\1\61\5\10\1\62\6\10"+
    "\1\0\2\10\1\61\5\10\1\0\1\10\1\62\6\10"+
    "\22\0\4\10\2\0\5\10\1\63\10\10\1\0\7\10"+
    "\1\63\1\0\10\10\22\0\4\10\2\0\13\10\1\64"+
    "\2\10\1\0\10\10\1\0\2\10\1\64\5\10\47\0"+
    "\1\65\1\66\4\0\1\67\2\0\1\70\2\0\1\71"+
    "\101\0\1\72\1\0\1\73\65\0\1\74\67\0\1\73"+
    "\10\0\1\41\2\0\6\41\1\0\56\41\2\0\1\43"+
    "\76\0\1\75\56\0\1\41\1\76\1\0\6\41\1\76"+
    "\56\41\4\0\5\47\1\0\16\47\1\0\10\47\1\0"+
    "\10\47\27\0\1\50\107\0\1\77\1\100\7\0\1\101"+
    "\2\0\1\102\26\0\4\10\2\0\2\10\1\103\13\10"+
    "\1\0\3\10\1\103\4\10\1\0\10\10\22\0\4\10"+
    "\2\0\6\10\1\104\7\10\1\0\4\10\1\104\3\10"+
    "\1\0\10\10\22\0\4\10\2\0\11\10\1\105\4\10"+
    "\1\0\10\10\1\0\3\10\1\105\4\10\22\0\4\10"+
    "\2\0\15\10\1\106\1\0\10\10\1\0\10\10\22\0"+
    "\4\10\2\0\6\10\1\107\7\10\1\0\4\10\1\107"+
    "\3\10\1\0\10\10\50\0\1\110\104\0\1\111\56\0"+
    "\1\112\74\0\1\113\62\0\1\114\63\0\1\115\104\0"+
    "\1\116\63\0\1\117\62\0\1\120\32\0\3\121\4\10"+
    "\2\0\16\10\1\0\10\10\1\0\10\10\22\0\4\10"+
    "\2\0\11\10\1\122\4\10\1\0\10\10\1\0\3\10"+
    "\1\122\4\10\22\0\4\10\2\0\13\10\1\123\2\10"+
    "\1\0\10\10\1\0\2\10\1\123\5\10\22\0\4\10"+
    "\2\0\14\10\1\124\1\10\1\0\10\10\1\0\10\10"+
    "\51\0\1\125\103\0\1\126\65\0\1\127\66\0\1\130"+
    "\71\0\1\131\54\0\1\132\103\0\1\133\64\0\1\134"+
    "\71\0\1\135\22\0\3\121\13\0\1\136\4\0\1\137"+
    "\13\0\1\136\33\0\4\10\2\0\13\10\1\140\2\10"+
    "\1\0\10\10\1\0\2\10\1\140\5\10\52\0\1\141"+
    "\100\0\1\142\66\0\1\143\62\0\1\144\70\0\1\145"+
    "\63\0\1\146\100\0\1\147\61\0\1\150\70\0\1\151"+
    "\42\0\1\152\17\0\1\152\61\0\1\153\16\0\1\153"+
    "\27\0\4\10\2\0\13\10\1\154\2\10\1\0\10\10"+
    "\1\0\2\10\1\154\5\10\50\0\1\155\75\0\1\156"+
    "\72\0\1\157\64\0\1\160\6\0\1\161\53\0\1\162"+
    "\66\0\1\163\75\0\1\164\67\0\1\165\6\0\1\166"+
    "\53\0\1\167\54\0\1\170\14\0\1\170\36\0\4\10"+
    "\2\0\1\10\1\171\14\10\1\0\2\10\1\171\5\10"+
    "\1\0\10\10\53\0\1\172\102\0\1\173\60\0\1\174"+
    "\62\0\1\175\72\0\1\176\70\0\1\177\64\0\1\200"+
    "\102\0\1\201\53\0\1\202\72\0\1\203\70\0\1\204"+
    "\55\0\1\205\77\0\1\206\63\0\1\207\76\0\1\210"+
    "\64\0\1\211\65\0\1\212\71\0\1\213\63\0\1\214"+
    "\76\0\1\215\64\0\1\216\65\0\1\217\60\0\1\220"+
    "\16\0\1\220\62\0\1\221\65\0\1\222\101\0\1\223"+
    "\61\0\1\224\65\0\1\225\65\0\1\226\43\0\1\227"+
    "\125\0\1\230\61\0\1\231\53\0\1\232\16\0\1\232"+
    "\63\0\1\233\67\0\1\234\73\0\1\235\63\0\1\236"+
    "\67\0\1\237\73\0\1\240\34\0\1\224\71\0\1\241"+
    "\17\0\1\241\70\0\1\242\71\0\1\243\70\0\1\244"+
    "\64\0\1\245\71\0\1\246\70\0\1\247\71\0\1\250"+
    "\61\0\1\251\71\0\1\252\73\0\1\253\61\0\1\254"+
    "\71\0\1\255\65\0\1\256\105\0\1\257\27\0\1\260"+
    "\111\0\1\261\105\0\1\262\50\0\1\263\45\0\1\264"+
    "\111\0\1\265\45\0\1\266\110\0\1\267\67\0\1\270"+
    "\102\0\1\271\67\0\1\272\64\0\1\273\67\0\1\274"+
    "\37\0\1\273\56\0";

  /** 
   * The transition table of the DFA
   */
  final private static int yytrans [] = yy_unpack();


  /* error codes */
  final private static int YY_UNKNOWN_ERROR = 0;
  final private static int YY_ILLEGAL_STATE = 1;
  final private static int YY_NO_MATCH = 2;
  final private static int YY_PUSHBACK_2BIG = 3;

  /* error messages for the codes above */
  final private static String YY_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Internal error: unknown state",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * YY_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private final static byte YY_ATTRIBUTE[] = {
     0,  0,  0,  0,  9,  1,  9,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  9,  9,  9,  9,  9,  9,  1,  1,  1,  9,  9,  9,  9, 
     1,  1,  9,  1,  1,  9,  1,  9,  1,  0,  1,  0,  1,  1,  1,  1, 
     1,  1,  1,  1,  0,  0,  0,  0,  0,  9,  9,  9,  9,  9,  0,  0, 
     0,  0,  1,  1,  1,  1,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  1,  1,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  9,  0,  1,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  1,  0,  0,  9,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  9,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  9,  0,  0,  9,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     9,  0,  0,  0,  0,  0,  0,  9,  0,  0,  0,  0,  0,  0,  0,  9, 
     0,  0,  0,  9,  0,  9,  0,  0,  0,  0,  9,  0
  };

  /** the input device */
  private java.io.Reader yy_reader;

  /** the current state of the DFA */
  private int yy_state;

  /** the current lexical state */
  private int yy_lexical_state = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char yy_buffer[] = new char[YY_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int yy_markedPos;

  /** the textposition at the last state to be included in yytext */
  private int yy_pushbackPos;

  /** the current text position in the buffer */
  private int yy_currentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int yy_startRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int yy_endRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn; 

  /** 
   * yy_atBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean yy_atBOL = true;

  /** yy_atEOF == true <=> the scanner is at the EOF */
  private boolean yy_atEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean yy_eof_done;

  /* user code: */
  static public final transient String RCS_ID = "$Id: aliascondition.flex,v 1.4 2009/12/14 12:00:43 ibissw Exp $";
  static public final transient String RCS_REV = "$Revision: 1.4 $";
  
  private StringBuffer string = new StringBuffer();
  
  private Symbol symbol(int type) {
    return new AliasConditionSymbol(type, yyline+1, yycolumn+1);
  }

  private Symbol symbol(int type, Object value) {
    return new AliasConditionSymbol(type, yyline+1, yycolumn+1, value);
  }

  /* assumes correct representation of a long value for 
     specified radix in String s */
  private long parseLong(String s, int radix) {
    int  max = s.length();
    long result = 0;
    long digit;

    for (int i = 0; i < max; i++) {
      digit  = Character.digit(yy_buffer[i],radix);
      result*= radix;
      result+= digit;
    }

    return result;
  }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public AliasConditionScanner(java.io.Reader in) {
    this.yy_reader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public AliasConditionScanner(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the split, compressed DFA transition table.
   *
   * @return the unpacked transition table
   */
  private static int [] yy_unpack() {
    int [] trans = new int[8344];
    int offset = 0;
    offset = yy_unpack(yy_packed0, offset, trans);
    return trans;
  }

  /** 
   * Unpacks the compressed DFA transition table.
   *
   * @param packed   the packed transition table
   * @return         the index of the last entry
   */
  private static int yy_unpack(String packed, int offset, int [] trans) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do trans[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] yy_unpack_cmap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2246) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   IOException  if any I/O-Error occurs
   */
  private boolean yy_refill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (yy_startRead > 0) {
      System.arraycopy(yy_buffer, yy_startRead, 
                       yy_buffer, 0, 
                       yy_endRead-yy_startRead);

      /* translate stored positions */
      yy_endRead-= yy_startRead;
      yy_currentPos-= yy_startRead;
      yy_markedPos-= yy_startRead;
      yy_pushbackPos-= yy_startRead;
      yy_startRead = 0;
    }

    /* is the buffer big enough? */
    if (yy_currentPos >= yy_buffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[yy_currentPos*2];
      System.arraycopy(yy_buffer, 0, newBuffer, 0, yy_buffer.length);
      yy_buffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = yy_reader.read(yy_buffer, yy_endRead, 
                                            yy_buffer.length-yy_endRead);

    if (numRead < 0) {
      return true;
    }
    else {
      yy_endRead+= numRead;  
      return false;
    }
  }


  /**
   * Closes the input stream.
   */
  final public void yyclose() throws java.io.IOException {
    yy_atEOF = true;            /* indicate end of file */
    yy_endRead = yy_startRead;  /* invalidate buffer    */

    if (yy_reader != null)
      yy_reader.close();
  }


  /**
   * Closes the current stream, and resets the
   * scanner to read from a new input stream.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>YY_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  final public void yyreset(java.io.Reader reader) throws java.io.IOException {
    yyclose();
    yy_reader = reader;
    yy_atBOL  = true;
    yy_atEOF  = false;
    yy_endRead = yy_startRead = 0;
    yy_currentPos = yy_markedPos = yy_pushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    yy_lexical_state = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  final public int yystate() {
    return yy_lexical_state;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  final public void yybegin(int newState) {
    yy_lexical_state = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  final public String yytext() {
    return new String( yy_buffer, yy_startRead, yy_markedPos-yy_startRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  final public char yycharat(int pos) {
    return yy_buffer[yy_startRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  final public int yylength() {
    return yy_markedPos-yy_startRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void yy_ScanError(int errorCode) {
    String message;
    try {
      message = YY_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = YY_ERROR_MSG[YY_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  private void yypushback(int number)  {
    if ( number > yylength() )
      yy_ScanError(YY_PUSHBACK_2BIG);

    yy_markedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void yy_do_eof() throws java.io.IOException {
    if (!yy_eof_done) {
      yy_eof_done = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int yy_input;
    int yy_action;

    // cached fields:
    int yy_currentPos_l;
    int yy_startRead_l;
    int yy_markedPos_l;
    int yy_endRead_l = yy_endRead;
    char [] yy_buffer_l = yy_buffer;
    char [] yycmap_l = yycmap;

    int [] yytrans_l = yytrans;
    int [] yy_rowMap_l = yy_rowMap;
    byte [] yy_attr_l = YY_ATTRIBUTE;

    while (true) {
      yy_markedPos_l = yy_markedPos;

      boolean yy_r = false;
      for (yy_currentPos_l = yy_startRead; yy_currentPos_l < yy_markedPos_l;
                                                             yy_currentPos_l++) {
        switch (yy_buffer_l[yy_currentPos_l]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          yy_r = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          yy_r = true;
          break;
        case '\n':
          if (yy_r)
            yy_r = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          yy_r = false;
          yycolumn++;
        }
      }

      if (yy_r) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean yy_peek;
        if (yy_markedPos_l < yy_endRead_l)
          yy_peek = yy_buffer_l[yy_markedPos_l] == '\n';
        else if (yy_atEOF)
          yy_peek = false;
        else {
          boolean eof = yy_refill();
          yy_markedPos_l = yy_markedPos;
          yy_buffer_l = yy_buffer;
          if (eof) 
            yy_peek = false;
          else 
            yy_peek = yy_buffer_l[yy_markedPos_l] == '\n';
        }
        if (yy_peek) yyline--;
      }
      yy_action = -1;

      yy_startRead_l = yy_currentPos_l = yy_currentPos = 
                       yy_startRead = yy_markedPos_l;

      yy_state = yy_lexical_state;


      yy_forAction: {
        while (true) {

          if (yy_currentPos_l < yy_endRead_l)
            yy_input = yy_buffer_l[yy_currentPos_l++];
          else if (yy_atEOF) {
            yy_input = YYEOF;
            break yy_forAction;
          }
          else {
            // store back cached positions
            yy_currentPos  = yy_currentPos_l;
            yy_markedPos   = yy_markedPos_l;
            boolean eof = yy_refill();
            // get translated positions and possibly new buffer
            yy_currentPos_l  = yy_currentPos;
            yy_markedPos_l   = yy_markedPos;
            yy_buffer_l      = yy_buffer;
            yy_endRead_l     = yy_endRead;
            if (eof) {
              yy_input = YYEOF;
              break yy_forAction;
            }
            else {
              yy_input = yy_buffer_l[yy_currentPos_l++];
            }
          }
          int yy_next = yytrans_l[ yy_rowMap_l[yy_state] + yycmap_l[yy_input] ];
          if (yy_next == -1) break yy_forAction;
          yy_state = yy_next;

          int yy_attributes = yy_attr_l[yy_state];
          if ( (yy_attributes & 1) == 1 ) {
            yy_action = yy_state; 
            yy_markedPos_l = yy_currentPos_l; 
            if ( (yy_attributes & 8) == 8 ) break yy_forAction;
          }

        }
      }

      // store back cached position
      yy_markedPos = yy_markedPos_l;

      switch (yy_action) {

        case 167: 
          {  return symbol(MANDATORID);  }
        case 189: break;
        case 160: 
          {  return symbol(NOT_BETWEEN);  }
        case 190: break;
        case 4: 
        case 18: 
        case 27: 
          {  throw new RuntimeException("Illegal character \""+yytext()+
                                                              "\" at line "+(yyline+1)+", column "+(yycolumn+1));  }
        case 191: break;
        case 37: 
          {  throw new RuntimeException("Illegal character \""+yytext()+ "\" at column "+(yycolumn+1));  }
        case 192: break;
        case 40: 
          {  throw new RuntimeException("Illegal character \""+yytext()+ "\" at column "+(yycolumn+1));  }
        case 193: break;
        case 61: 
          {  throw new RuntimeException("Illegal escape sequence \""+yytext()+"\"");  }
        case 194: break;
        case 42: 
          {  return symbol(DECIMAL_LITERAL, new java.math.BigDecimal(yytext()));  }
        case 195: break;
        case 35: 
          {  yybegin(YYINITIAL); string.append('\''); return symbol(QUOTED_STRING_LITERAL, string.toString());  }
        case 196: break;
        case 33: 
        case 34: 
          {  throw new RuntimeException("Unterminated string at end of line");  }
        case 197: break;
        case 147: 
          {  return symbol(LOGINID);  }
        case 198: break;
        case 135: 
          {  return symbol(USERID);  }
        case 199: break;
        case 120: 
          {  return symbol(BETWEEN);  }
        case 200: break;
        case 105: 
          {  return symbol(NOT_IN);  }
        case 201: break;
        case 23: 
          {  return symbol(RBRACK);  }
        case 202: break;
        case 22: 
          {  return symbol(LBRACK);  }
        case 203: break;
        case 5: 
        case 6: 
          {  /* ignore */  }
        case 204: break;
        case 19: 
          {  return symbol(LPAREN);  }
        case 205: break;
        case 20: 
          {  return symbol(RPAREN);  }
        case 206: break;
        case 67: 
          {  return symbol(NOT);  }
        case 207: break;
        case 29: 
          {  return symbol(DIV);  }
        case 208: break;
        case 24: 
          {  return symbol(EQ);  }
        case 209: break;
        case 10: 
          {  return symbol(DOT);  }
        case 210: break;
        case 47: 
          {  return symbol(OR);  }
        case 211: break;
        case 48: 
          {  return symbol(IN);  }
        case 212: break;
        case 49: 
          {  return symbol(IS);  }
        case 213: break;
        case 66: 
          {  return symbol(AND);  }
        case 214: break;
        case 25: 
          {  return symbol(LESS_THAN);  }
        case 215: break;
        case 181: 
          {  yybegin(PROPERTY_STATE_QUOTED); return symbol(QUOTED_USERPROPERTY);  }
        case 216: break;
        case 179: 
          {  yybegin(PROPERTY_STATE); return symbol(USERPROPERTY);  }
        case 217: break;
        case 11: 
          {  yybegin(STRINGLITERAL); string.setLength(0); string.append('\'');  }
        case 218: break;
        case 60: 
          {  string.append("''");  }
        case 219: break;
        case 32: 
        case 36: 
          {  string.append(yytext());  }
        case 220: break;
        case 123: 
          {  return symbol(ROLES);  }
        case 221: break;
        case 82: 
          {  return symbol(LIKE);  }
        case 222: break;
        case 81: 
          {  return symbol(NULL);  }
        case 223: break;
        case 30: 
          {  return symbol(PLUS);  }
        case 224: break;
        case 28: 
          {  return symbol(MULT);  }
        case 225: break;
        case 21: 
          {  return symbol(COMMA);  }
        case 226: break;
        case 31: 
          {  return symbol(MINUS);  }
        case 227: break;
        case 58: 
          {  return symbol(NOTEQ);  }
        case 228: break;
        case 39: 
          {  yybegin(YYINITIAL);  }
        case 229: break;
        case 7: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
        case 16: 
        case 17: 
        case 44: 
        case 45: 
        case 46: 
        case 50: 
        case 51: 
        case 68: 
        case 69: 
        case 70: 
        case 83: 
        case 95: 
        case 107: 
          {  return symbol(IDENTIFIER, yytext());  }
        case 230: break;
        case 150: 
          {  return symbol(QUOTED_USERID);  }
        case 231: break;
        case 186: 
          {  return symbol(APPLICATIONNAME);  }
        case 232: break;
        case 38: 
          {  return symbol(PROPERTY, yytext());  }
        case 233: break;
        case 175: 
          {  return symbol(QUOTED_MANDATORID);  }
        case 234: break;
        case 26: 
          {  return symbol(GREATER_THAN);  }
        case 235: break;
        case 57: 
          {  return symbol(LESS_OR_EQ_THAN);  }
        case 236: break;
        case 8: 
        case 9: 
          {  return symbol(LONG_LITERAL, new Long(yytext()));  }
        case 237: break;
        case 59: 
          {  return symbol(GREATER_OR_EQ_THAN);  }
        case 238: break;
        default: 
          if (yy_input == YYEOF && yy_startRead == yy_currentPos) {
            yy_atEOF = true;
            yy_do_eof();
              {  return symbol(EOF);  }
          } 
          else {
            yy_ScanError(YY_NO_MATCH);
          }
      }
    }
  }


}
