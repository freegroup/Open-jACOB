/*******************************************************************************
 *    This file is part of Open-jACOB
 *    Copyright (C) 2005-2006 Tarragon GmbH
 * 
 *    This program is free software; you can redistribute it and/or modify
 *    it under the terms of the GNU General Public License as published by
 *    the Free Software Foundation; version 2 of the License.
 * 
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    GNU General Public License for more details.
 * 
 *    You should have received a copy of the GNU General Public License     
 *    along with this program; if not, write to the Free Software
 *    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  
 *    USA
 *******************************************************************************/
/*
 * Created on 10.01.2005
 *
 * To change the template for this generated file go to
 * Window - Preferences - Java - Code Generation - Code and Comments
 */
package de.tif.jacob.core.schema;

import java.util.List;

import de.tif.jacob.core.data.impl.sql.ISQLDataSource;

/**
 * @author Andreas
 *
 * To change the template for this generated type comment go to
 * Window - Preferences - Java - Code Generation - Code and Comments
 */
public interface ISchemaColumnDefinition
{
  /**
   * Returns the name of the table this column belongs to.
   * 
   * @return the table name
   */
  public String getDBTableName();
  
  /**
   * Returns the column name.
   * 
   * @return the column name.
   */
  public String getDBName();

  /**
   * Checks whether the column is required or not.
   * 
   * @return <code>true</code> if required, otherwise <code>false</code> 
   */
  public boolean isRequired();
  
  /**
   * Checks whether the given column is a enumeration column.
   * 
   * @return <code>true</code> if enumeration column, otherwise <code>false</code> if not or unknown!
   */
  public boolean isEnumeration();
  
  /**
   * Returns the enumeration labels in case of an enumeration column.
   * 
   * @return List(String)
   * @see #isEnumeration()
   */
  public List getEnumerationLabels();
  
  /**
   * Returns the column's SQL type.
   * 
   * @param dataSource the SQL data source
   * @return SQL type from java.sql.Types
   */
  public int getSQLType(ISQLDataSource dataSource);
  
  /**
   * Returns the column's size in bytes.
   * 
   * @param dataSource
   *          the SQL data source
   * @return the column's size or 0 if irrelevant or default
   */
  public int getSQLSize(ISQLDataSource dataSource);
  
  /**
   * Returns the number of column's decimal digits.
   * 
   * @param dataSource
   *          the SQL data source
   * @return the number of column's decimal digits or 0 if irrelevant or default
   */
  public int getSQLDecimalDigits(ISQLDataSource dataSource);
  
  /**
   * Returns the column's default value.
   * 
   * @param dataSource
   *          the SQL data source
   * @return the the default value or <code>null</code> if not existing
   */
  public String getDBDefaultValue(ISQLDataSource dataSource);
  
  /**
   * Checks whether the given SQL data source provides auto generated keys for this column.
   * 
   * @param dataSource
   *          the SQL data source
   * @return <code>true</code> if auto generated keys are provided, otherwise <code>false</code>.
   */
  public boolean isDBAutoGenerated(ISQLDataSource dataSource);  
}
