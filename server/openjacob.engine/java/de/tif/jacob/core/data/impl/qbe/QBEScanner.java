/* The following code was generated by JFlex 1.3.5 on 28.04.15 11:21 */

/*
     This file is part of Open-jACOB
     Copyright (C) 2005-2006 Tarragon GmbH
  
     This program is free software; you can redistribute it and/or modify
     it under the terms of the GNU General Public License as published by
     the Free Software Foundation; version 2 of the License.
  
     This program is distributed in the hope that it will be useful,
     but WITHOUT ANY WARRANTY; without even the implied warranty of
     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     GNU General Public License for more details.
  
     You should have received a copy of the GNU General Public License     
     along with this program; if not, write to the Free Software
     Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  
     USA
*/

/* QBE lexer specification */

package de.tif.jacob.core.data.impl.qbe;

import java_cup.runtime.*;
import de.tif.jacob.util.StringUtil;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.3.5
 * on 28.04.15 11:21 from the specification file
 * <tt>file:/Users/andherz/Documents/workspace/openjacob.engine/JFlex/qbe.flex</tt>
 */
public class QBEScanner implements QBESym, java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  final public static int YYEOF = -1;

  /** initial size of the lookahead buffer */
  final private static int YY_BUFFERSIZE = 16384;

  /** lexical states */
  final public static int COMMA_DECIMAL = 6;
  final public static int TIME_LAG_POST = 13;
  final public static int WEEK_NUM = 16;
  final public static int TIME_LAG_FOR_VALUE_POST = 15;
  final public static int DATE = 9;
  final public static int TIME_VALUE = 19;
  final public static int DOT_DECIMAL = 5;
  final public static int NULL_CHECK = 20;
  final public static int TIME_LAG_FOR_VALUE = 14;
  final public static int BOOLEAN = 4;
  final public static int INTERVAL = 7;
  final public static int TIME = 10;
  final public static int TIMESTAMP_VALUE = 17;
  final public static int ENUM = 11;
  final public static int TEXTLITERAL = 2;
  final public static int INTEGER = 3;
  final public static int TIMESTAMP = 8;
  final public static int TEXT = 1;
  final public static int DATE_VALUE = 18;
  final public static int YYINITIAL = 0;
  final public static int TIME_LAG = 12;

  /** 
   * Translates characters to character classes
   */
  final private static String yycmap_packed = 
    "\11\0\1\3\1\2\1\0\1\3\1\1\22\0\1\3\1\43\1\37"+
    "\1\0\1\42\1\0\1\41\3\0\1\50\1\34\1\36\1\53\1\35"+
    "\1\104\1\33\1\31\2\30\6\27\1\52\1\0\1\40\1\45\1\51"+
    "\1\47\1\0\1\6\1\0\1\32\1\103\1\20\1\62\1\0\1\24"+
    "\1\25\1\54\1\26\1\11\1\65\1\7\1\100\1\4\1\23\1\17"+
    "\1\22\1\12\1\10\1\0\1\16\1\0\1\15\4\0\1\46\2\0"+
    "\1\55\1\64\1\70\1\14\1\63\1\21\1\75\1\71\1\73\1\0"+
    "\1\101\1\74\1\5\1\56\1\13\1\72\1\23\1\60\1\76\1\77"+
    "\1\57\1\102\1\16\1\0\1\61\1\66\1\0\1\44\uff80\0\1\67"+
    "\2\0";

  /** 
   * Translates characters to character classes
   */
  final private static char [] yycmap = yy_unpack_cmap(yycmap_packed);

  /** 
   * Translates a state to a row index in the transition table
   */
  final private static int yy_rowMap [] = { 
        0,    69,   138,   207,   276,   345,   414,   483,   552,   621, 
      690,   759,   828,   897,   966,  1035,  1104,  1173,  1242,  1311, 
     1380,  1449,  1518,  1587,  1656,  1725,  1449,  1518,  1449,  1449, 
     1449,  1449,  1449,  1449,  1794,  1863,  1932,  2001,  1449,  2070, 
     2139,  1449,  2208,  2277,  2346,  2415,  2484,  2553,  2622,  2691, 
     2760,  2829,  2898,  2967,  3036,  3105,  1449,  3174,  3243,  3312, 
     3381,  3450,  3519,  3588,  3657,  3726,  3795,  3864,  2277,  1449, 
     3933,  4002,  4071,  4140,  4209,  4278,  4347,  1449,  4416,  4485, 
     4554,  4623,  4692,  1449,  4761,  1449,  1449,  4830,  1449,  1449, 
     4899,  1449,  4968,  1449,  5037,  5106,  1449,  5175,  5244,  5313, 
     1656,  1518,  5382,  1449,  1449,  1449,  5451,  1449,  5520,  5589, 
     5658,  2553,  2967,  2829,  1449,  1449,  5727,  1449,  5796,  5865, 
     5934,  6003,  6072,  6141,  6210,  6279,  6348,  6417,  6486,  6555, 
     6624,  6693,  6762,  6831,  6900,  6969,  7038,  7107,  7176,  7245, 
     7314,  1449,  1449,  7383,  7452,  7521,  7590,  7659,  7728,  7797, 
     7866,  7935,  1449,  8004,  8073,  1449,  8142,  8211,  8280,  1449, 
     1449,  8349,  8418,  1449,  8487,  8556,  8625,  8694,  8763,  8832, 
     8901,  1449,  1449,  8970,  9039,  9108,  1449,  1449,  1449,  9177, 
     1518,  1449,  1449,  9246,  9315,  9384,  9453,  9522,  9591,  1449, 
     9660,  1449,  9729,  9798,  1449,  1449,  9867,  9936, 10005, 10074, 
     4554, 10143,  1449, 10212,  1449, 10281,  1449,  1449,  1449,  1449, 
     1449, 10350, 10419, 10488, 10557, 10626, 10695,  1449,  1449, 10764, 
    10833, 10902, 10971, 11040, 11109, 11178, 11247, 11316, 11385,  1449, 
    11454,  1449, 11523,  1449, 11592,  1449,  1449,  1449,  1449
  };

  /** 
   * The packed transition table of the DFA (part 0)
   */
  final private static String yy_packed0 = 
    "\105\26\7\27\1\30\27\27\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\4\27"+
    "\1\30\26\27\37\44\1\45\45\44\1\26\1\46\2\47"+
    "\3\26\1\50\17\26\3\51\1\26\1\52\1\53\1\54"+
    "\2\26\1\32\1\33\1\26\1\35\1\36\4\26\1\43"+
    "\1\26\1\53\2\26\1\50\27\26\1\46\2\47\3\26"+
    "\1\50\2\26\1\55\6\26\1\56\21\26\1\35\1\36"+
    "\11\26\1\50\3\26\1\56\14\26\1\55\6\26\1\46"+
    "\2\47\3\26\1\50\17\26\3\57\1\26\1\60\1\61"+
    "\1\62\2\26\1\32\1\33\1\26\1\35\1\36\4\26"+
    "\1\43\1\26\1\61\2\26\1\50\27\26\1\46\2\47"+
    "\3\26\1\50\17\26\3\63\1\26\1\64\1\65\1\54"+
    "\1\66\1\26\1\32\1\33\1\26\1\35\1\36\4\26"+
    "\1\43\1\26\1\65\2\26\1\50\27\26\1\46\2\47"+
    "\3\26\1\50\17\26\3\67\1\26\1\70\1\26\1\54"+
    "\2\26\1\32\2\26\1\35\1\36\4\26\1\43\1\71"+
    "\3\26\1\50\27\26\1\46\2\47\1\72\1\73\1\74"+
    "\1\75\2\26\1\76\2\26\1\77\1\100\3\26\1\101"+
    "\1\102\3\26\1\103\2\104\1\26\1\104\1\26\1\105"+
    "\2\26\1\32\2\26\1\35\1\36\4\26\1\43\1\71"+
    "\1\106\1\107\1\110\1\111\2\26\1\77\1\112\2\26"+
    "\1\113\4\26\1\72\4\26\1\76\1\114\2\26\1\115"+
    "\1\116\1\26\1\46\2\47\1\26\1\73\1\117\1\120"+
    "\2\26\1\76\2\26\1\77\1\100\3\26\1\101\1\102"+
    "\3\26\1\103\2\104\1\26\1\104\1\26\1\105\2\26"+
    "\1\32\2\26\1\35\1\36\4\26\1\43\1\26\1\106"+
    "\1\107\1\26\1\50\2\26\1\77\1\112\2\26\1\113"+
    "\11\26\1\76\1\114\2\26\1\115\1\116\1\26\1\46"+
    "\2\47\1\72\1\26\1\110\1\50\17\26\3\103\1\26"+
    "\1\103\1\26\1\54\2\26\1\32\2\26\1\35\1\36"+
    "\4\26\1\43\1\71\2\26\1\110\1\50\13\26\1\72"+
    "\12\26\7\121\1\122\33\121\1\35\1\36\11\121\1\122"+
    "\26\121\1\26\1\46\2\47\23\26\3\123\1\26\1\123"+
    "\1\124\1\125\6\26\1\126\6\26\1\127\32\26\1\46"+
    "\2\47\1\26\1\130\6\26\1\131\1\132\4\26\1\133"+
    "\1\26\1\134\2\26\3\51\1\26\1\52\1\26\1\125"+
    "\6\26\1\126\14\26\1\132\3\26\1\130\3\26\1\134"+
    "\4\26\1\133\4\26\1\131\2\26\1\46\2\47\23\26"+
    "\3\123\1\26\1\123\1\124\16\26\1\127\32\26\1\46"+
    "\2\47\1\26\1\130\6\26\1\131\1\132\4\26\1\133"+
    "\1\26\1\134\2\26\3\51\1\26\1\52\25\26\1\132"+
    "\3\26\1\130\3\26\1\134\4\26\1\133\4\26\1\131"+
    "\30\26\3\135\1\26\1\136\52\26\1\46\2\47\1\72"+
    "\1\26\1\74\1\137\2\26\1\140\7\26\1\101\4\26"+
    "\1\103\2\104\1\26\1\104\1\26\1\141\14\26\1\71"+
    "\1\106\1\107\1\110\1\142\3\26\1\112\2\26\1\143"+
    "\4\26\1\72\4\26\1\140\1\114\2\26\1\115\1\116"+
    "\1\26\1\46\2\47\2\26\1\117\1\144\2\26\1\140"+
    "\7\26\1\101\4\26\1\103\2\104\1\26\1\104\1\26"+
    "\1\141\15\26\1\106\1\107\5\26\1\112\2\26\1\143"+
    "\11\26\1\140\1\114\2\26\1\115\1\116\1\26\1\46"+
    "\2\47\1\72\1\26\1\110\20\26\3\103\1\26\1\103"+
    "\16\26\1\71\2\26\1\110\14\26\1\72\21\26\1\50"+
    "\33\26\1\35\12\26\1\50\26\26\105\0\37\27\1\145"+
    "\1\27\1\0\1\146\1\27\1\0\2\27\2\0\44\27"+
    "\1\147\26\27\1\145\1\27\1\0\1\146\1\27\1\0"+
    "\2\27\2\0\6\27\1\147\25\27\37\0\1\27\112\0"+
    "\1\150\104\0\1\151\37\0\37\44\1\0\45\44\37\0"+
    "\1\152\47\0\1\47\112\0\1\153\46\0\1\153\54\0"+
    "\3\51\1\0\1\51\100\0\3\51\110\0\1\154\66\0"+
    "\1\155\40\0\1\155\32\0\1\156\46\0\1\156\56\0"+
    "\3\57\1\0\1\57\1\0\1\157\76\0\3\160\1\0"+
    "\1\160\1\0\1\157\76\0\3\57\1\0\1\160\100\0"+
    "\3\157\1\0\1\157\1\0\1\154\76\0\3\63\1\0"+
    "\1\63\2\0\1\161\75\0\3\162\1\0\1\162\2\0"+
    "\1\161\75\0\3\63\1\0\1\162\100\0\3\161\1\0"+
    "\1\161\100\0\3\67\1\0\1\67\100\0\3\163\1\0"+
    "\1\163\56\0\1\164\57\0\1\164\31\0\1\165\64\0"+
    "\1\165\12\0\1\166\51\0\1\167\5\0\1\166\4\0"+
    "\1\170\22\0\1\153\2\0\1\171\43\0\1\153\20\0"+
    "\1\172\17\0\1\173\10\0\1\174\44\0\1\174\6\0"+
    "\1\173\16\0\1\175\64\0\1\175\17\0\1\176\5\0"+
    "\1\177\42\0\1\177\13\0\1\176\70\0\1\200\33\0"+
    "\1\201\64\0\1\201\34\0\3\202\1\0\1\202\100\0"+
    "\3\203\1\0\1\203\126\0\1\204\1\0\1\205\32\0"+
    "\1\166\57\0\1\166\27\0\1\153\2\0\1\172\43\0"+
    "\1\153\20\0\1\172\67\0\1\206\33\0\1\165\42\0"+
    "\1\207\2\0\1\210\6\0\1\211\7\0\1\165\75\0"+
    "\1\212\10\0\1\212\66\0\1\213\100\0\1\167\12\0"+
    "\1\170\22\0\1\153\2\0\1\214\43\0\1\153\25\0"+
    "\44\121\1\0\50\121\1\215\33\121\1\0\12\121\1\215"+
    "\25\121\27\0\3\216\1\0\1\216\106\0\1\217\74\0"+
    "\1\220\45\0\1\220\31\0\1\221\42\0\1\221\50\0"+
    "\3\135\1\0\1\135\64\0\1\222\64\0\1\223\17\0"+
    "\1\224\64\0\1\224\17\0\1\223\64\0\1\223\61\0"+
    "\1\207\2\0\1\210\6\0\1\211\30\0\1\214\71\0"+
    "\11\27\1\225\25\27\1\145\1\27\1\0\1\146\1\27"+
    "\1\0\2\27\2\0\23\27\1\225\10\27\11\0\1\226"+
    "\62\0\1\226\20\0\1\227\46\0\1\227\36\0\1\230"+
    "\62\0\1\230\37\0\3\157\1\0\1\157\65\0\1\231"+
    "\66\0\1\231\76\0\1\232\67\0\1\233\42\0\1\234"+
    "\63\0\1\235\20\0\1\234\102\0\1\236\66\0\1\236"+
    "\26\0\1\237\45\0\1\237\25\0\1\240\66\0\1\240"+
    "\15\0\1\241\66\0\1\241\21\0\1\242\42\0\1\242"+
    "\113\0\1\243\26\0\1\244\66\0\1\244\30\0\3\245"+
    "\1\0\1\245\100\0\2\245\1\246\1\0\1\246\127\0"+
    "\1\247\104\0\1\250\15\0\1\251\74\0\1\252\100\0"+
    "\1\253\12\0\1\254\77\0\1\255\76\0\1\210\123\0"+
    "\1\256\73\0\1\257\1\0\1\257\116\0\1\235\2\0"+
    "\11\121\1\260\32\121\1\0\27\121\1\260\10\121\7\0"+
    "\1\261\46\0\1\261\60\0\1\262\35\0\1\262\32\0"+
    "\1\263\63\0\1\235\20\0\1\263\102\0\1\264\66\0"+
    "\1\264\1\0\11\27\1\265\25\27\1\145\1\27\1\0"+
    "\1\146\1\27\1\0\2\27\2\0\23\27\1\265\10\27"+
    "\11\0\1\266\62\0\1\266\30\0\1\267\42\0\1\267"+
    "\43\0\1\270\53\0\1\270\65\0\1\271\120\0\1\272"+
    "\74\0\1\273\27\0\1\274\46\0\1\274\51\0\1\275"+
    "\53\0\1\275\34\0\1\276\52\0\1\276\102\0\1\277"+
    "\34\0\3\300\1\0\1\300\100\0\3\301\1\0\1\301"+
    "\130\0\1\302\110\0\1\303\7\0\1\303\72\0\1\304"+
    "\11\0\1\304\71\0\1\305\114\0\1\306\27\0\1\307"+
    "\154\0\1\310\21\0\11\121\1\311\32\121\1\0\27\121"+
    "\1\311\10\121\6\0\1\312\46\0\1\312\47\0\1\313"+
    "\42\0\1\313\117\0\1\314\102\0\1\315\15\0\1\316"+
    "\114\0\1\317\43\0\1\317\30\0\1\320\7\0\1\321"+
    "\1\322\4\0\1\323\35\0\1\321\3\0\1\320\102\0"+
    "\1\324\50\0\3\325\1\0\1\325\126\0\1\326\106\0"+
    "\1\327\116\0\1\255\77\0\1\330\25\0\1\331\114\0"+
    "\1\332\43\0\1\332\122\0\1\333\71\0\1\334\25\0"+
    "\1\335\126\0\3\336\1\0\1\336\131\0\1\337\101\0"+
    "\1\340\112\0\1\341\105\0\1\342\103\0\1\343\105\0"+
    "\1\344\47\0\3\345\1\0\1\345\132\0\1\346\103\0"+
    "\1\347\104\0\1\350\107\0\1\351\101\0\1\352\107\0"+
    "\1\353\50\0\3\354\1\0\1\354\132\0\1\355\103\0"+
    "\1\356\104\0\1\357\24\0";

  /** 
   * The transition table of the DFA
   */
  final private static int yytrans [] = yy_unpack();


  /* error codes */
  final private static int YY_UNKNOWN_ERROR = 0;
  final private static int YY_ILLEGAL_STATE = 1;
  final private static int YY_NO_MATCH = 2;
  final private static int YY_PUSHBACK_2BIG = 3;

  /* error messages for the codes above */
  final private static String YY_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Internal error: unknown state",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * YY_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private final static byte YY_ATTRIBUTE[] = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  9,  1,  1,  1,  1,  9,  1,  9,  9,  9,  9, 
     9,  9,  1,  1,  1,  1,  9,  1,  1,  9,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  9,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  9,  1,  1,  1,  1,  1,  1,  1,  9,  1,  1, 
     1,  1,  1,  9,  1,  9,  9,  1,  9,  9,  1,  9,  1,  9,  1,  1, 
     9,  1,  1,  1,  0,  0,  1,  9,  9,  9,  0,  9,  0,  0,  1,  0, 
     1,  0,  9,  9,  0,  9,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  1,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  9,  9,  0, 
     0,  0,  0,  0,  1,  0,  0,  0,  9,  1,  1,  9,  1,  0,  0,  9, 
     9,  0,  1,  9,  1,  1,  1,  1,  1,  1,  1,  9,  9,  1,  1,  1, 
     9,  9,  9,  0,  1,  9,  9,  0,  0,  0,  0,  0,  0,  9,  0,  9, 
     1,  0,  9,  9,  0,  0,  0,  0,  1,  0,  9,  0,  9,  0,  9,  9, 
     9,  9,  9,  0,  0,  0,  0,  0,  0,  9,  9,  0,  0,  1,  1,  0, 
     0,  0,  0,  0,  0,  9,  1,  9,  0,  9,  0,  9,  9,  9,  9
  };

  /** the input device */
  private java.io.Reader yy_reader;

  /** the current state of the DFA */
  private int yy_state;

  /** the current lexical state */
  private int yy_lexical_state = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char yy_buffer[] = new char[YY_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int yy_markedPos;

  /** the textposition at the last state to be included in yytext */
  private int yy_pushbackPos;

  /** the current text position in the buffer */
  private int yy_currentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int yy_startRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int yy_endRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn; 

  /** 
   * yy_atBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean yy_atBOL = true;

  /** yy_atEOF == true <=> the scanner is at the EOF */
  private boolean yy_atEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean yy_eof_done;

  /* user code: */
  static public final transient String RCS_ID = "$Id: qbe.flex,v 1.4 2010/08/06 15:07:00 ibissw Exp $";
  static public final transient String RCS_REV = "$Revision: 1.4 $";
  
  private StringBuffer string = new StringBuffer();
  
  private int oldState;
  
  private Symbol symbol(int type) {
    return new QBESymbol(type, yyline+1, yycolumn+1);
  }

  private Symbol symbol(int type, Object value) {
    return new QBESymbol(type, yyline+1, yycolumn+1, value);
  }
  
  /**
   * Make one double quote from two double quotes.
   * @param str
   * @return
   */
  private String correctDoubleQuote(String str)
  {
    StringBuffer buf = null;
    for (int i = 0; i < str.length(); i++)
    {
      char c = str.charAt(i);
      switch (c)
      {
        case '"':
          if (buf == null)
          {
            buf = new StringBuffer(str.substring(0, i));
          }
          buf.append(c);
          i++;
          break;
        default:
          if (buf != null)
            buf.append(c);
          break;
      }
    }
    return buf == null ? str : buf.toString();
  }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public QBEScanner(java.io.Reader in) {
    this.yy_reader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public QBEScanner(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the split, compressed DFA transition table.
   *
   * @return the unpacked transition table
   */
  private static int [] yy_unpack() {
    int [] trans = new int[11661];
    int offset = 0;
    offset = yy_unpack(yy_packed0, offset, trans);
    return trans;
  }

  /** 
   * Unpacks the compressed DFA transition table.
   *
   * @param packed   the packed transition table
   * @return         the index of the last entry
   */
  private static int yy_unpack(String packed, int offset, int [] trans) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do trans[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] yy_unpack_cmap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 182) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   IOException  if any I/O-Error occurs
   */
  private boolean yy_refill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (yy_startRead > 0) {
      System.arraycopy(yy_buffer, yy_startRead, 
                       yy_buffer, 0, 
                       yy_endRead-yy_startRead);

      /* translate stored positions */
      yy_endRead-= yy_startRead;
      yy_currentPos-= yy_startRead;
      yy_markedPos-= yy_startRead;
      yy_pushbackPos-= yy_startRead;
      yy_startRead = 0;
    }

    /* is the buffer big enough? */
    if (yy_currentPos >= yy_buffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[yy_currentPos*2];
      System.arraycopy(yy_buffer, 0, newBuffer, 0, yy_buffer.length);
      yy_buffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = yy_reader.read(yy_buffer, yy_endRead, 
                                            yy_buffer.length-yy_endRead);

    if (numRead < 0) {
      return true;
    }
    else {
      yy_endRead+= numRead;  
      return false;
    }
  }


  /**
   * Closes the input stream.
   */
  final public void yyclose() throws java.io.IOException {
    yy_atEOF = true;            /* indicate end of file */
    yy_endRead = yy_startRead;  /* invalidate buffer    */

    if (yy_reader != null)
      yy_reader.close();
  }


  /**
   * Closes the current stream, and resets the
   * scanner to read from a new input stream.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>YY_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  final public void yyreset(java.io.Reader reader) throws java.io.IOException {
    yyclose();
    yy_reader = reader;
    yy_atBOL  = true;
    yy_atEOF  = false;
    yy_endRead = yy_startRead = 0;
    yy_currentPos = yy_markedPos = yy_pushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    yy_lexical_state = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  final public int yystate() {
    return yy_lexical_state;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  final public void yybegin(int newState) {
    yy_lexical_state = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  final public String yytext() {
    return new String( yy_buffer, yy_startRead, yy_markedPos-yy_startRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  final public char yycharat(int pos) {
    return yy_buffer[yy_startRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  final public int yylength() {
    return yy_markedPos-yy_startRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void yy_ScanError(int errorCode) {
    String message;
    try {
      message = YY_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = YY_ERROR_MSG[YY_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  private void yypushback(int number)  {
    if ( number > yylength() )
      yy_ScanError(YY_PUSHBACK_2BIG);

    yy_markedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void yy_do_eof() throws java.io.IOException {
    if (!yy_eof_done) {
      yy_eof_done = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int yy_input;
    int yy_action;

    // cached fields:
    int yy_currentPos_l;
    int yy_startRead_l;
    int yy_markedPos_l;
    int yy_endRead_l = yy_endRead;
    char [] yy_buffer_l = yy_buffer;
    char [] yycmap_l = yycmap;

    int [] yytrans_l = yytrans;
    int [] yy_rowMap_l = yy_rowMap;
    byte [] yy_attr_l = YY_ATTRIBUTE;

    while (true) {
      yy_markedPos_l = yy_markedPos;

      boolean yy_r = false;
      for (yy_currentPos_l = yy_startRead; yy_currentPos_l < yy_markedPos_l;
                                                             yy_currentPos_l++) {
        switch (yy_buffer_l[yy_currentPos_l]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          yy_r = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          yy_r = true;
          break;
        case '\n':
          if (yy_r)
            yy_r = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          yy_r = false;
          yycolumn++;
        }
      }

      if (yy_r) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean yy_peek;
        if (yy_markedPos_l < yy_endRead_l)
          yy_peek = yy_buffer_l[yy_markedPos_l] == '\n';
        else if (yy_atEOF)
          yy_peek = false;
        else {
          boolean eof = yy_refill();
          yy_markedPos_l = yy_markedPos;
          yy_buffer_l = yy_buffer;
          if (eof) 
            yy_peek = false;
          else 
            yy_peek = yy_buffer_l[yy_markedPos_l] == '\n';
        }
        if (yy_peek) yyline--;
      }
      yy_action = -1;

      yy_startRead_l = yy_currentPos_l = yy_currentPos = 
                       yy_startRead = yy_markedPos_l;

      yy_state = yy_lexical_state;


      yy_forAction: {
        while (true) {

          if (yy_currentPos_l < yy_endRead_l)
            yy_input = yy_buffer_l[yy_currentPos_l++];
          else if (yy_atEOF) {
            yy_input = YYEOF;
            break yy_forAction;
          }
          else {
            // store back cached positions
            yy_currentPos  = yy_currentPos_l;
            yy_markedPos   = yy_markedPos_l;
            boolean eof = yy_refill();
            // get translated positions and possibly new buffer
            yy_currentPos_l  = yy_currentPos;
            yy_markedPos_l   = yy_markedPos;
            yy_buffer_l      = yy_buffer;
            yy_endRead_l     = yy_endRead;
            if (eof) {
              yy_input = YYEOF;
              break yy_forAction;
            }
            else {
              yy_input = yy_buffer_l[yy_currentPos_l++];
            }
          }
          int yy_next = yytrans_l[ yy_rowMap_l[yy_state] + yycmap_l[yy_input] ];
          if (yy_next == -1) break yy_forAction;
          yy_state = yy_next;

          int yy_attributes = yy_attr_l[yy_state];
          if ( (yy_attributes & 1) == 1 ) {
            yy_action = yy_state; 
            yy_markedPos_l = yy_currentPos_l; 
            if ( (yy_attributes & 8) == 8 ) break yy_forAction;
          }

        }
      }

      // store back cached position
      yy_markedPos = yy_markedPos_l;

      switch (yy_action) {

        case 110: 
          {  return symbol(DECIMAL_LITERAL, new java.math.BigDecimal(yytext()));  }
        case 240: break;
        case 88: 
          {  yybegin(oldState); return symbol(DAYS);  }
        case 241: break;
        case 176: 
          {  yybegin(oldState); return symbol(MINS);  }
        case 242: break;
        case 177: 
          {  yybegin(oldState); return symbol(SECS);  }
        case 243: break;
        case 231: 
          {  return symbol(OCTOBER);  }
        case 244: break;
        case 229: 
          {  return symbol(JANURAY);  }
        case 245: break;
        case 222: 
          {  return symbol(JANURAY);  }
        case 246: break;
        case 218: 
          {  return symbol(AUGUST);  }
        case 247: break;
        case 22: 
        case 23: 
        case 102: 
        case 148: 
          {  string.append(yytext()); String result = correctDoubleQuote(string.toString()); string.setLength(0); return symbol(TEXT_LITERAL, result);  }
        case 248: break;
        case 37: 
        case 38: 
          {  /* ignore */  }
        case 249: break;
        case 153: 
          {  return symbol(AUGUST);  }
        case 250: break;
        case 166: 
          {  return symbol(JANURAY);  }
        case 251: break;
        case 173: 
          {  return symbol(OCTOBER);  }
        case 252: break;
        case 68: 
        case 96: 
          {  return symbol(DOT);  }
        case 253: break;
        case 29: 
          {  return symbol(OR);  }
        case 254: break;
        case 28: 
          {  return symbol(NOT);  }
        case 255: break;
        case 26: 
          {  return symbol(AND);  }
        case 256: break;
        case 115: 
          {  return symbol(PM);  }
        case 257: break;
        case 117: 
          {  return symbol(AM);  }
        case 258: break;
        case 171: 
          {  return symbol(MAI);  }
        case 259: break;
        case 238: 
          {  return symbol(SEPTEMBER);  }
        case 260: break;
        case 237: 
          {  return symbol(DECEMBER);  }
        case 261: break;
        case 236: 
          {  return symbol(FEBRUARY);  }
        case 262: break;
        case 233: 
          {  return symbol(NOVEMBER);  }
        case 263: break;
        case 230: 
          {  return symbol(FEBRUARY);  }
        case 264: break;
        case 25: 
          {  return symbol(LESS_THAN);  }
        case 265: break;
        case 33: 
          {  return symbol(WILDCARD);  }
        case 266: break;
        case 156: 
          {  return symbol(NOVEMBER);  }
        case 267: break;
        case 162: 
          {  return symbol(SEPTEMBER);  }
        case 268: break;
        case 169: 
          {  return symbol(FEBRUARY);  }
        case 269: break;
        case 174: 
          {  return symbol(DECEMBER);  }
        case 270: break;
        case 36: 
          {  yybegin(TEXT); String result = string.toString(); string.setLength(0); return symbol(TEXT_LITERAL, result);  }
        case 271: break;
        case 91: 
          {  yybegin(oldState); return symbol(HOURS);  }
        case 272: break;
        case 89: 
          {  yybegin(oldState); return symbol(YEARS);  }
        case 273: break;
        case 87: 
          {  yybegin(oldState); return symbol(MONTHS);  }
        case 274: break;
        case 105: 
          {  string.append('\"');  }
        case 275: break;
        case 142: 
          {  yybegin(oldState); return symbol(RANGE);  }
        case 276: break;
        case 35: 
          {  string.append(yytext());  }
        case 277: break;
        case 204: 
          {  return symbol(APRIL);  }
        case 278: break;
        case 77: 
          {  return symbol(SLASH);  }
        case 279: break;
        case 69: 
          {  return symbol(DASH);  }
        case 280: break;
        case 56: 
          {  return symbol(COLON);  }
        case 281: break;
        case 107: 
          {  return symbol(RANGE);  }
        case 282: break;
        case 154: 
          {  return symbol(APRIL);  }
        case 283: break;
        case 167: 
          {  return symbol(JUNE);  }
        case 284: break;
        case 168: 
          {  return symbol(JULY);  }
        case 285: break;
        case 170: 
          {  return symbol(MARCH);  }
        case 286: break;
        case 172: 
          {  return symbol(MARCH);  }
        case 287: break;
        case 180: 
        case 181: 
        case 200: 
          {  return symbol(NULL);  }
        case 288: break;
        case 194: 
          {  return symbol(JUNE);  }
        case 289: break;
        case 195: 
          {  return symbol(JULY);  }
        case 290: break;
        case 189: 
          {  oldState = yystate(); yybegin(WEEK_NUM); return symbol(WEEK);  }
        case 291: break;
        case 104: 
          {  return symbol(GREATER_OR_EQUAL_THAN);  }
        case 292: break;
        case 152: 
          {  oldState = yystate(); yybegin(TIME_LAG); return symbol(MTD);  }
        case 293: break;
        case 155: 
          {  oldState = yystate(); yybegin(TIME_LAG); return symbol(NOW);  }
        case 294: break;
        case 159: 
          {  oldState = yystate(); yybegin(TIME_LAG); return symbol(YTD);  }
        case 295: break;
        case 160: 
          {  oldState = yystate(); yybegin(TIME_LAG); return symbol(WTD);  }
        case 296: break;
        case 163: 
          {  oldState = yystate(); yybegin(TIME_LAG); return symbol(QTD);  }
        case 297: break;
        case 103: 
          {  return symbol(LESS_OR_EQUAL_THAN);  }
        case 298: break;
        case 66: 
        case 67: 
        case 129: 
        case 130: 
          {  return symbol(TWO_DIGIT_LITERAL, new Integer(yytext()));  }
        case 299: break;
        case 54: 
        case 55: 
          {  return symbol(INTERVAL_LITERAL, new Integer(yytext()));  }
        case 300: break;
        case 27: 
          {  return symbol(RIGHT_ANCHOR);  }
        case 301: break;
        case 40: 
        case 41: 
        case 46: 
        case 47: 
        case 50: 
        case 51: 
          {  return symbol(BIGINT_LITERAL, new Long(yytext()));  }
        case 302: break;
        case 114: 
          {  return symbol(INTERVAL_LITERAL, new Integer(yytext()));  }
        case 303: break;
        case 235: 
          {  return symbol(DATE_LITERAL, yytext());  }
        case 304: break;
        case 221: 
          {  return symbol(DATE_LITERAL, yytext());  }
        case 305: break;
        case 178: 
          {  oldState = yystate(); yybegin(TIME_LAG_FOR_VALUE); return symbol(NOW);  }
        case 306: break;
        case 182: 
          {  return symbol(BOOLEAN_LITERAL, Boolean.TRUE);  }
        case 307: break;
        case 210: 
          {  oldState = yystate(); yybegin(TIME_LAG); return symbol(THISQ);  }
        case 308: break;
        case 209: 
          {  oldState = yystate(); yybegin(TIME_LAG); return symbol(THISW);  }
        case 309: break;
        case 208: 
          {  oldState = yystate(); yybegin(TIME_LAG); return symbol(THISY);  }
        case 310: break;
        case 207: 
          {  oldState = yystate(); yybegin(TIME_LAG); return symbol(THISM);  }
        case 311: break;
        case 206: 
          {  oldState = yystate(); yybegin(TIME_LAG); return symbol(TODAY);  }
        case 312: break;
        case 92: 
        case 93: 
          {  yybegin(TIME_LAG); return symbol(BIGINT_LITERAL, new Long(yytext()));  }
        case 313: break;
        case 32: 
          {  return symbol(SINGLEWILDCARD);  }
        case 314: break;
        case 202: 
          {  return symbol(BOOLEAN_LITERAL, Boolean.FALSE);  }
        case 315: break;
        case 34: 
          {  return symbol(GREATER_THAN);  }
        case 316: break;
        case 164: 
        case 165: 
        case 191: 
        case 192: 
          {  return symbol(FOUR_DIGIT_LITERAL, new Integer(yytext()));  }
        case 317: break;
        case 82: 
        case 141: 
          {  yybegin(oldState); return symbol(TWO_DIGIT_LITERAL, new Integer(yytext()));  }
        case 318: break;
        case 112: 
          {  return symbol(DECIMAL_LITERAL, new java.math.BigDecimal(StringUtil.replace(yytext(), ",", ".")));  }
        case 319: break;
        case 217: 
          {  oldState = yystate(); yybegin(TIME_LAG_FOR_VALUE); return symbol(TODAY);  }
        case 320: break;
        case 80: 
        case 81: 
        case 140: 
        case 175: 
          {  string.append(yytext()); String result = string.toString(); string.setLength(0); return symbol(ENUM_LITERAL, result);  }
        case 321: break;
        case 30: 
          {  return symbol(EXACT_MATCH);  }
        case 322: break;
        case 31: 
          {  return symbol(LEFT_ANCHOR);  }
        case 323: break;
        case 86: 
          {  yybegin(yystate() == TIME_LAG ? TIME_LAG_POST : TIME_LAG_FOR_VALUE_POST); return symbol(MINUS);  }
        case 324: break;
        case 85: 
          {  yybegin(oldState); return symbol(OR);  }
        case 325: break;
        case 83: 
          {  yybegin(yystate() == TIME_LAG ? TIME_LAG_POST : TIME_LAG_FOR_VALUE_POST); return symbol(PLUS);  }
        case 326: break;
        case 24: 
          {  yybegin(TEXTLITERAL); string.setLength(0);  }
        case 327: break;
        case 21: 
        case 39: 
        case 42: 
        case 43: 
        case 44: 
        case 45: 
        case 48: 
        case 49: 
        case 52: 
        case 53: 
        case 57: 
        case 58: 
        case 59: 
        case 60: 
        case 61: 
        case 62: 
        case 63: 
        case 64: 
        case 65: 
        case 70: 
        case 71: 
        case 72: 
        case 73: 
        case 74: 
        case 75: 
        case 76: 
        case 78: 
        case 79: 
        case 84: 
        case 90: 
        case 94: 
        case 95: 
        case 97: 
        case 98: 
        case 99: 
          {  throw new RuntimeException("Illegal character \""+yytext()+
                                                              "\" at line "+(yyline+1)+", column "+(yycolumn+1));  }
        case 328: break;
        default: 
          if (yy_input == YYEOF && yy_startRead == yy_currentPos) {
            yy_atEOF = true;
            yy_do_eof();
              {  return symbol(EOF);  }
          } 
          else {
            yy_ScanError(YY_NO_MATCH);
          }
      }
    }
  }


}
