
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Tue Apr 28 11:21:03 CEST 2015
//----------------------------------------------------

package de.tif.jacob.core.data.impl.qbe;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

/** CUP v0.10k generated parser.
  * @version Tue Apr 28 11:21:03 CEST 2015
  */
public class QBEParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public QBEParser() {super();}

  /** Constructor which sets the default scanner. */
  public QBEParser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\202\000\002\002\004\000\002\003\002\000\002\003" +
    "\003\000\002\003\004\000\002\004\003\000\002\004\004" +
    "\000\002\004\005\000\002\004\003\000\002\005\003\000" +
    "\002\005\003\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\006\003\000\002\006\003\000\002\006" +
    "\003\000\002\006\004\000\002\006\004\000\002\006\004" +
    "\000\002\006\004\000\002\006\004\000\002\006\005\000" +
    "\002\006\005\000\002\006\005\000\002\006\005\000\002" +
    "\006\004\000\002\006\004\000\002\006\004\000\002\006" +
    "\004\000\002\006\004\000\002\006\004\000\002\006\004" +
    "\000\002\006\004\000\002\006\005\000\002\006\007\000" +
    "\002\006\004\000\002\006\005\000\002\006\005\000\002" +
    "\006\006\000\002\006\004\000\002\006\005\000\002\006" +
    "\005\000\002\006\006\000\002\006\005\000\002\006\006" +
    "\000\002\006\006\000\002\006\007\000\002\006\006\000" +
    "\002\006\007\000\002\006\007\000\002\006\010\000\002" +
    "\006\004\000\002\006\004\000\002\006\005\000\002\006" +
    "\003\000\002\006\004\000\002\007\003\000\002\007\003" +
    "\000\002\007\003\000\002\007\003\000\002\011\003\000" +
    "\002\010\003\000\002\010\003\000\002\010\003\000\002" +
    "\010\005\000\002\010\007\000\002\012\003\000\002\012" +
    "\003\000\002\012\003\000\002\013\004\000\002\013\005" +
    "\000\002\014\003\000\002\014\003\000\002\014\004\000" +
    "\002\014\004\000\002\015\003\000\002\015\004\000\002" +
    "\016\003\000\002\016\003\000\002\017\004\000\002\017" +
    "\004\000\002\020\004\000\002\020\003\000\002\020\007" +
    "\000\002\020\007\000\002\020\007\000\002\020\007\000" +
    "\002\020\006\000\002\020\006\000\002\020\007\000\002" +
    "\020\007\000\002\020\005\000\002\020\005\000\002\026" +
    "\002\000\002\026\003\000\002\027\002\000\002\027\003" +
    "\000\002\030\005\000\002\030\005\000\002\030\005\000" +
    "\002\031\003\000\002\031\005\000\002\031\005\000\002" +
    "\031\005\000\002\032\003\000\002\032\003\000\002\021" +
    "\002\000\002\021\003\000\002\022\003\000\002\022\003" +
    "\000\002\022\003\000\002\022\003\000\002\022\003\000" +
    "\002\022\003\000\002\022\003\000\002\022\003\000\002" +
    "\022\003\000\002\022\003\000\002\022\003\000\002\022" +
    "\003\000\002\024\005\000\002\024\007\000\002\024\011" +
    "\000\002\024\006\000\002\024\010\000\002\024\012\000" +
    "\002\023\003\000\002\023\003\000\002\025\003\000\002" +
    "\025\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\301\000\132\002\000\004\033\005\046\006\044\007" +
    "\037\010\071\011\056\012\010\013\015\014\017\015\013" +
    "\016\032\022\067\023\022\024\042\025\021\026\023\027" +
    "\025\030\026\032\004\033\007\034\061\035\064\037\052" +
    "\040\070\041\040\042\066\043\011\044\027\045\057\046" +
    "\051\047\005\050\016\051\031\052\055\061\043\062\024" +
    "\063\020\064\062\065\050\066\060\067\041\070\014\071" +
    "\073\001\002\000\020\002\uffb6\030\uffb6\031\uffb6\032\uffb6" +
    "\033\uffb6\036\uffb6\065\uffb6\001\002\000\006\067\uff8d\070" +
    "\uff8d\001\002\000\004\067\301\001\002\000\014\002\ufffa" +
    "\030\ufffa\031\ufffa\032\004\065\uffba\001\002\000\014\002" +
    "\uffa4\020\116\021\121\030\uffa4\031\uffa4\001\002\000\006" +
    "\067\uff91\070\uff91\001\002\000\012\002\uffbd\017\uffb4\030" +
    "\uffbd\031\uffbd\001\002\000\014\002\uffa4\020\116\021\121" +
    "\030\uffa4\031\uffa4\001\002\000\004\056\273\001\002\000" +
    "\014\002\uffa4\020\116\021\121\030\uffa4\031\uffa4\001\002" +
    "\000\006\067\uff8c\070\uff8c\001\002\000\014\002\uffa4\020" +
    "\116\021\121\030\uffa4\031\uffa4\001\002\000\014\002\uffc2" +
    "\017\uffc2\030\uffc2\031\uffc2\057\265\001\002\000\056\004" +
    "\033\026\023\037\052\040\070\041\040\042\066\043\011" +
    "\044\027\045\057\046\051\047\005\050\016\051\031\052" +
    "\055\061\043\062\024\063\020\064\062\065\134\067\041" +
    "\070\014\071\073\001\002\000\056\004\033\026\023\037" +
    "\052\040\070\041\040\042\066\043\011\044\027\045\057" +
    "\046\051\047\005\050\016\051\031\052\055\061\043\062" +
    "\024\063\020\064\062\065\134\067\041\070\014\071\073" +
    "\001\002\000\016\002\uffa2\017\uffa2\020\116\021\121\030" +
    "\uffa2\031\uffa2\001\002\000\010\002\uffc5\030\uffc5\031\uffc5" +
    "\001\002\000\124\004\033\005\046\006\044\007\037\010" +
    "\071\011\056\012\010\013\015\014\017\015\013\016\032" +
    "\022\067\023\022\024\042\025\021\026\023\032\004\033" +
    "\145\034\061\035\064\037\052\040\070\041\040\042\066" +
    "\043\011\044\027\045\057\046\051\047\005\050\016\051" +
    "\031\052\055\061\043\062\024\063\020\064\062\065\050" +
    "\066\060\067\041\070\014\071\073\001\002\000\126\004" +
    "\033\005\046\006\044\007\037\010\071\011\056\012\010" +
    "\013\015\014\017\015\013\016\032\022\067\023\022\024" +
    "\042\025\021\026\023\027\025\032\004\033\007\034\061" +
    "\035\064\037\052\040\070\041\040\042\066\043\011\044" +
    "\027\045\057\046\051\047\005\050\016\051\031\052\055" +
    "\061\043\062\024\063\020\064\062\065\050\066\060\067" +
    "\041\070\014\071\073\001\002\000\006\067\uff90\070\uff90" +
    "\001\002\000\016\002\uffb9\030\uffb9\031\uffb9\032\141\033" +
    "\150\065\uffb9\001\002\000\006\067\uff8b\070\uff8b\001\002" +
    "\000\004\061\244\001\002\000\020\002\uffa4\017\uffa4\020" +
    "\116\021\121\030\uffa4\031\uffa4\067\uffa4\001\002\000\004" +
    "\017\237\001\002\000\014\002\uffcb\030\uffcb\031\uffcb\032" +
    "\004\033\145\001\002\000\010\002\uffff\030\234\031\232" +
    "\001\002\000\014\002\uffa4\020\116\021\121\030\uffa4\031" +
    "\uffa4\001\002\000\006\067\uff93\070\uff93\001\002\000\042" +
    "\037\uff97\040\uff97\041\uff97\042\uff97\043\uff97\044\uff97\045" +
    "\uff97\046\uff97\047\uff97\050\uff97\051\uff97\052\uff97\055\212" +
    "\056\207\057\100\060\210\001\002\000\056\004\033\026" +
    "\023\037\052\040\070\041\040\042\066\043\011\044\027" +
    "\045\057\046\051\047\005\050\016\051\031\052\055\061" +
    "\043\062\024\063\020\064\062\065\134\067\041\070\014" +
    "\071\073\001\002\000\012\002\uffc4\017\uffc4\030\uffc4\031" +
    "\uffc4\001\002\000\014\002\uffa4\020\116\021\121\030\uffa4" +
    "\031\uffa4\001\002\000\010\002\ufff4\030\ufff4\031\ufff4\001" +
    "\002\000\010\002\ufff7\030\ufff7\031\ufff7\001\002\000\004" +
    "\002\204\001\002\000\016\002\ufff3\030\ufff3\031\ufff3\032" +
    "\004\033\145\036\174\001\002\000\006\067\uff8e\070\uff8e" +
    "\001\002\000\006\067\uff95\070\uff95\001\002\000\012\002" +
    "\uffbe\017\171\030\uffbe\031\uffbe\001\002\000\010\002\ufff5" +
    "\030\ufff5\031\ufff5\001\002\000\006\067\uff8a\070\uff8a\001" +
    "\002\000\014\002\uffa4\020\116\021\121\030\uffa4\031\uffa4" +
    "\001\002\000\006\067\uff8f\070\uff8f\001\002\000\010\002" +
    "\ufff2\030\ufff2\031\ufff2\001\002\000\004\065\167\001\002" +
    "\000\012\002\uffc3\017\uffc3\030\uffc3\031\uffc3\001\002\000" +
    "\012\002\ufff6\017\165\030\ufff6\031\ufff6\001\002\000\006" +
    "\032\004\065\136\001\002\000\010\002\ufffd\030\ufffd\031" +
    "\ufffd\001\002\000\006\067\uff92\070\uff92\001\002\000\056" +
    "\004\033\026\023\037\052\040\070\041\040\042\066\043" +
    "\011\044\027\045\057\046\051\047\005\050\016\051\031" +
    "\052\055\061\043\062\024\063\020\064\062\065\134\067" +
    "\041\070\014\071\073\001\002\000\006\067\uff94\070\uff94" +
    "\001\002\000\014\002\uffa4\020\116\021\121\030\uffa4\031" +
    "\uffa4\001\002\000\014\002\uffbf\017\uffb3\030\uffbf\031\uffbf" +
    "\067\077\001\002\000\014\002\uffaf\017\uffaf\030\uffaf\031" +
    "\uffaf\067\uffaf\001\002\000\004\065\075\001\002\000\016" +
    "\002\uffbc\030\uffbc\031\uffbc\032\uffbc\033\uffbc\036\uffbc\001" +
    "\002\000\012\002\uffb1\017\uffb1\030\uffb1\031\uffb1\001\002" +
    "\000\004\057\100\001\002\000\004\067\101\001\002\000" +
    "\020\002\uff89\017\uff89\030\uff89\031\uff89\053\105\054\103" +
    "\057\104\001\002\000\012\002\uff86\017\uff86\030\uff86\031" +
    "\uff86\001\002\000\012\002\uff80\017\uff80\030\uff80\031\uff80" +
    "\001\002\000\004\067\106\001\002\000\012\002\uff81\017" +
    "\uff81\030\uff81\031\uff81\001\002\000\020\002\uff88\017\uff88" +
    "\030\uff88\031\uff88\053\105\054\103\055\110\001\002\000" +
    "\012\002\uff85\017\uff85\030\uff85\031\uff85\001\002\000\006" +
    "\067\113\070\112\001\002\000\016\002\uff87\017\uff87\030" +
    "\uff87\031\uff87\053\105\054\103\001\002\000\016\002\uff82" +
    "\017\uff82\030\uff82\031\uff82\053\uff82\054\uff82\001\002\000" +
    "\016\002\uff83\017\uff83\030\uff83\031\uff83\053\uff83\054\uff83" +
    "\001\002\000\012\002\uff84\017\uff84\030\uff84\031\uff84\001" +
    "\002\000\004\061\122\001\002\000\004\061\uff99\001\002" +
    "\000\014\002\uffa3\017\uffa3\030\uffa3\031\uffa3\067\uffa3\001" +
    "\002\000\010\002\uffe6\030\uffe6\031\uffe6\001\002\000\004" +
    "\061\uff98\001\002\000\010\072\124\073\125\074\123\001" +
    "\002\000\014\002\uff9e\017\uff9e\030\uff9e\031\uff9e\067\uff9e" +
    "\001\002\000\014\002\uffa0\017\uffa0\030\uffa0\031\uffa0\067" +
    "\uffa0\001\002\000\014\002\uff9f\017\uff9f\030\uff9f\031\uff9f" +
    "\067\uff9f\001\002\000\010\002\uffee\030\uffee\031\uffee\001" +
    "\002\000\012\002\uffbf\030\uffbf\031\uffbf\067\077\001\002" +
    "\000\010\002\uffc6\030\uffc6\031\uffc6\001\002\000\010\002" +
    "\uffc7\030\uffc7\031\uffc7\001\002\000\010\002\uffbd\030\uffbd" +
    "\031\uffbd\001\002\000\010\002\uffc8\030\uffc8\031\uffc8\001" +
    "\002\000\010\002\uffc9\030\uffc9\031\uffc9\001\002\000\010" +
    "\002\uffbe\030\uffbe\031\uffbe\001\002\000\016\002\uffde\030" +
    "\uffde\031\uffde\032\004\033\145\036\157\001\002\000\006" +
    "\032\141\065\140\001\002\000\016\002\uffdc\030\uffdc\031" +
    "\uffdc\032\004\033\145\036\143\001\002\000\020\002\uffb5" +
    "\030\uffb5\031\uffb5\032\uffb5\033\uffb5\036\uffb5\065\uffb5\001" +
    "\002\000\016\002\uffdb\030\uffdb\031\uffdb\032\004\033\145" +
    "\036\151\001\002\000\010\002\uffd4\030\uffd4\031\uffd4\001" +
    "\002\000\012\032\141\033\150\036\147\065\uffb9\001\002" +
    "\000\014\002\uffba\030\uffba\031\uffba\032\004\065\uffba\001" +
    "\002\000\014\002\uffb7\030\uffb7\031\uffb7\032\141\065\uffb7" +
    "\001\002\000\010\002\uffd0\030\uffd0\031\uffd0\001\002\000" +
    "\012\002\uffb8\030\uffb8\031\uffb8\065\uffb8\001\002\000\010" +
    "\002\uffd3\030\uffd3\031\uffd3\001\002\000\004\065\155\001" +
    "\002\000\012\032\141\033\150\036\154\065\uffb9\001\002" +
    "\000\010\002\uffcf\030\uffcf\031\uffcf\001\002\000\016\002" +
    "\uffbb\030\uffbb\031\uffbb\032\uffbb\033\uffbb\036\uffbb\001\002" +
    "\000\016\002\uffdd\030\uffdd\031\uffdd\032\004\033\145\036" +
    "\162\001\002\000\010\002\uffd6\030\uffd6\031\uffd6\001\002" +
    "\000\012\032\141\033\150\036\161\065\uffb9\001\002\000" +
    "\010\002\uffd2\030\uffd2\031\uffd2\001\002\000\010\002\uffd5" +
    "\030\uffd5\031\uffd5\001\002\000\012\032\141\033\150\036" +
    "\164\065\uffb9\001\002\000\010\002\uffd1\030\uffd1\031\uffd1" +
    "\001\002\000\010\061\043\063\020\064\062\001\002\000" +
    "\010\002\uffec\030\uffec\031\uffec\001\002\000\010\002\ufff1" +
    "\030\ufff1\031\ufff1\001\002\000\010\002\uffe5\030\uffe5\031" +
    "\uffe5\001\002\000\004\067\077\001\002\000\010\002\uffeb" +
    "\030\uffeb\031\uffeb\001\002\000\016\002\uffcd\030\uffcd\031" +
    "\uffcd\032\004\033\145\036\200\001\002\000\010\002\uffda" +
    "\030\uffda\031\uffda\001\002\000\012\002\uffce\030\uffce\031" +
    "\uffce\065\075\001\002\000\020\002\uffb9\030\uffb9\031\uffb9" +
    "\032\141\033\150\036\177\065\uffb9\001\002\000\010\002" +
    "\uffd8\030\uffd8\031\uffd8\001\002\000\010\002\uffd9\030\uffd9" +
    "\031\uffd9\001\002\000\012\002\uffcc\030\uffcc\031\uffcc\065" +
    "\155\001\002\000\020\002\uffb9\030\uffb9\031\uffb9\032\141" +
    "\033\150\036\203\065\uffb9\001\002\000\010\002\uffd7\030" +
    "\uffd7\031\uffd7\001\002\000\004\002\001\001\002\000\010" +
    "\002\uffe8\030\uffe8\031\uffe8\001\002\000\010\002\uffed\030" +
    "\uffed\031\uffed\001\002\000\004\067\226\001\002\000\004" +
    "\067\222\001\002\000\032\037\052\040\070\041\040\042" +
    "\066\043\011\044\027\045\057\046\051\047\005\050\016" +
    "\051\031\052\055\001\002\000\034\037\uff96\040\uff96\041" +
    "\uff96\042\uff96\043\uff96\044\uff96\045\uff96\046\uff96\047\uff96" +
    "\050\uff96\051\uff96\052\uff96\067\213\001\002\000\004\055" +
    "\214\001\002\000\006\067\216\070\215\001\002\000\014" +
    "\002\uffad\017\uffad\030\uffad\031\uffad\067\uffad\001\002\000" +
    "\014\002\uffae\017\uffae\030\uffae\031\uffae\067\uffae\001\002" +
    "\000\006\067\221\070\220\001\002\000\014\002\uffa9\017" +
    "\uffa9\030\uffa9\031\uffa9\067\uffa9\001\002\000\014\002\uffaa" +
    "\017\uffaa\030\uffaa\031\uffaa\067\uffaa\001\002\000\004\060" +
    "\223\001\002\000\006\067\225\070\224\001\002\000\014" +
    "\002\uffa7\017\uffa7\030\uffa7\031\uffa7\067\uffa7\001\002\000" +
    "\014\002\uffa8\017\uffa8\030\uffa8\031\uffa8\067\uffa8\001\002" +
    "\000\004\056\227\001\002\000\004\067\230\001\002\000" +
    "\014\002\uffac\017\uffac\030\uffac\031\uffac\067\uffac\001\002" +
    "\000\010\002\uffe7\030\uffe7\031\uffe7\001\002\000\126\004" +
    "\ufff9\005\ufff9\006\ufff9\007\ufff9\010\ufff9\011\ufff9\012\ufff9" +
    "\013\ufff9\014\ufff9\015\ufff9\016\ufff9\022\ufff9\023\ufff9\024" +
    "\ufff9\025\ufff9\026\ufff9\027\ufff9\032\ufff9\033\ufff9\034\ufff9" +
    "\035\ufff9\037\ufff9\040\ufff9\041\ufff9\042\ufff9\043\ufff9\044" +
    "\ufff9\045\ufff9\046\ufff9\047\ufff9\050\ufff9\051\ufff9\052\ufff9" +
    "\061\ufff9\062\ufff9\063\ufff9\064\ufff9\065\ufff9\066\ufff9\067" +
    "\ufff9\070\ufff9\071\ufff9\001\002\000\126\004\033\005\046" +
    "\006\044\007\037\010\071\011\056\012\010\013\015\014" +
    "\017\015\013\016\032\022\067\023\022\024\042\025\021" +
    "\026\023\027\025\032\004\033\007\034\061\035\064\037" +
    "\052\040\070\041\040\042\066\043\011\044\027\045\057" +
    "\046\051\047\005\050\016\051\031\052\055\061\043\062" +
    "\024\063\020\064\062\065\050\066\060\067\041\070\014" +
    "\071\073\001\002\000\126\004\ufff8\005\ufff8\006\ufff8\007" +
    "\ufff8\010\ufff8\011\ufff8\012\ufff8\013\ufff8\014\ufff8\015\ufff8" +
    "\016\ufff8\022\ufff8\023\ufff8\024\ufff8\025\ufff8\026\ufff8\027" +
    "\ufff8\032\ufff8\033\ufff8\034\ufff8\035\ufff8\037\ufff8\040\ufff8" +
    "\041\ufff8\042\ufff8\043\ufff8\044\ufff8\045\ufff8\046\ufff8\047" +
    "\ufff8\050\ufff8\051\ufff8\052\ufff8\061\ufff8\062\ufff8\063\ufff8" +
    "\064\ufff8\065\ufff8\066\ufff8\067\ufff8\070\ufff8\071\ufff8\001" +
    "\002\000\010\002\ufffb\030\234\031\232\001\002\000\012" +
    "\002\uffca\030\uffca\031\uffca\065\155\001\002\000\044\004" +
    "\033\026\023\037\052\040\070\041\040\042\066\043\011" +
    "\044\027\045\057\046\051\047\005\050\016\051\031\052" +
    "\055\067\240\070\014\071\073\001\002\000\040\037\uff97" +
    "\040\uff97\041\uff97\042\uff97\043\uff97\044\uff97\045\uff97\046" +
    "\uff97\047\uff97\050\uff97\051\uff97\052\uff97\055\212\056\207" +
    "\060\210\001\002\000\012\002\uffe9\030\uffe9\031\uffe9\067" +
    "\077\001\002\000\010\002\uffea\030\uffea\031\uffea\001\002" +
    "\000\014\002\uffb0\017\uffb0\030\uffb0\031\uffb0\067\uffb0\001" +
    "\002\000\016\002\uffa4\017\245\020\116\021\121\030\uffa4" +
    "\031\uffa4\001\002\000\004\016\247\001\002\000\010\002" +
    "\uffe0\030\uffe0\031\uffe0\001\002\000\004\061\250\001\002" +
    "\000\010\002\uffdf\030\uffdf\031\uffdf\001\002\000\010\002" +
    "\ufffe\030\234\031\232\001\002\000\010\002\ufffc\030\ufffc" +
    "\031\ufffc\001\002\000\012\002\uffa1\017\uffa1\030\uffa1\031" +
    "\uffa1\001\002\000\004\061\257\001\002\000\012\002\uff9d" +
    "\017\uff9d\030\uff9d\031\uff9d\001\002\000\012\002\uffb2\017" +
    "\uffb2\030\uffb2\031\uffb2\001\002\000\016\072\124\073\125" +
    "\074\123\075\261\076\260\077\262\001\002\000\012\002" +
    "\uff9b\017\uff9b\030\uff9b\031\uff9b\001\002\000\012\002\uff9c" +
    "\017\uff9c\030\uff9c\031\uff9c\001\002\000\012\002\uff9a\017" +
    "\uff9a\030\uff9a\031\uff9a\001\002\000\010\002\ufff0\030\ufff0" +
    "\031\ufff0\001\002\000\010\002\uffef\030\uffef\031\uffef\001" +
    "\002\000\004\063\266\001\002\000\014\002\uffc1\017\uffc1" +
    "\030\uffc1\031\uffc1\057\267\001\002\000\004\063\270\001" +
    "\002\000\012\002\uffc0\017\uffc0\030\uffc0\031\uffc0\001\002" +
    "\000\010\002\uffe2\030\uffe2\031\uffe2\001\002\000\010\002" +
    "\uffe3\030\uffe3\031\uffe3\001\002\000\004\067\274\001\002" +
    "\000\004\056\275\001\002\000\004\067\276\001\002\000" +
    "\014\002\uffab\017\uffab\030\uffab\031\uffab\067\uffab\001\002" +
    "\000\010\002\uffe1\030\uffe1\031\uffe1\001\002\000\010\002" +
    "\uffe4\030\uffe4\031\uffe4\001\002\000\006\067\303\070\302" +
    "\001\002\000\014\002\uffa5\017\uffa5\030\uffa5\031\uffa5\067" +
    "\uffa5\001\002\000\014\002\uffa6\017\uffa6\030\uffa6\031\uffa6" +
    "\067\uffa6\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\301\000\036\003\046\004\035\006\064\010\062\011" +
    "\053\012\044\013\034\014\073\015\027\016\033\017\011" +
    "\020\071\022\005\024\052\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\015\145\001\001" +
    "\000\010\026\277\030\116\032\114\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\026\276\030\116\032\114" +
    "\001\001\000\002\001\001\000\010\026\271\030\116\032" +
    "\114\001\001\000\002\001\001\000\010\026\270\030\116" +
    "\032\114\001\001\000\002\001\001\000\022\007\263\010" +
    "\132\011\130\012\127\017\131\020\126\022\005\024\134" +
    "\001\001\000\022\007\262\010\132\011\130\012\127\017" +
    "\131\020\126\022\005\024\134\001\001\000\012\027\255" +
    "\030\254\031\252\032\253\001\001\000\002\001\001\000" +
    "\032\006\251\010\062\011\053\012\044\013\034\014\073" +
    "\015\027\016\033\017\011\020\071\022\005\024\052\001" +
    "\001\000\034\004\250\006\064\010\062\011\053\012\044" +
    "\013\034\014\073\015\027\016\033\017\011\020\071\022" +
    "\005\024\052\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\026\242\030" +
    "\116\032\114\001\001\000\002\001\001\000\006\014\235" +
    "\015\027\001\001\000\004\005\232\001\001\000\010\026" +
    "\230\030\116\032\114\001\001\000\002\001\001\000\004" +
    "\021\210\001\001\000\022\007\205\010\132\011\130\012" +
    "\127\017\131\020\126\022\005\024\134\001\001\000\002" +
    "\001\001\000\010\026\204\030\116\032\114\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\013\172\014\174\015\175\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\026\167\030\116\032\114\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\015\136\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\007\125\010\132" +
    "\011\130\012\127\017\131\020\126\022\005\024\134\001" +
    "\001\000\002\001\001\000\010\026\117\030\116\032\114" +
    "\001\001\000\004\024\075\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\025\101\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\025\106\001\001\000\002\001\001\000" +
    "\004\023\110\001\001\000\004\025\113\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\024\075\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\013\155\014\073\015\157\001\001\000" +
    "\002\001\001\000\010\013\141\014\073\015\143\001\001" +
    "\000\002\001\001\000\006\014\151\015\152\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\015\145\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\014\151\015\162\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\010\165\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\024\171\001\001\000\002\001" +
    "\001\000\006\014\200\015\201\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\022\216" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\034\004\234\006\064\010\062" +
    "\011\053\012\044\013\034\014\073\015\027\016\033\017" +
    "\011\020\071\022\005\024\052\001\001\000\002\001\001" +
    "\000\004\005\232\001\001\000\002\001\001\000\010\017" +
    "\241\020\240\022\005\001\001\000\004\021\210\001\001" +
    "\000\004\024\075\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\026\245\030\116\032\114\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\005\232\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$QBEParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$QBEParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$QBEParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


 
  private static Log logger = LogFactory.getLog(QBEParser.class);
  
  static public final transient String RCS_ID = "$Id: qbe.cup,v 1.4 2010/08/06 15:07:00 ibissw Exp $";
  static public final transient String RCS_REV = "$Revision: 1.4 $";
  
  private static String errorToString(String message, Object info)
  {
    StringBuffer m = new StringBuffer("Parser error ");

    if (info instanceof java_cup.runtime.Symbol) 
      m.append("(").append(info.toString()).append(")");

    m.append(" : ").append(message);

    return m.toString();
  }
  
  public void report_error(String message, Object info)
  {
    if (logger.isDebugEnabled())
    {
      logger.debug(errorToString(message, info));
    }
  }
   
  public void report_fatal_error(String message, Object info) throws Exception
  {
    report_error(message, info);
    throw new Exception("Syntax error: " + errorToString(message, info));
  }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$QBEParser$actions {
  private final QBEParser parser;

  /** Constructor */
  CUP$QBEParser$actions(QBEParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$QBEParser$do_action(
    int                        CUP$QBEParser$act_num,
    java_cup.runtime.lr_parser CUP$QBEParser$parser,
    java.util.Stack            CUP$QBEParser$stack,
    int                        CUP$QBEParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$QBEParser$result;

      /* select the action based on the action number */
      switch (CUP$QBEParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // is_pm_not_am ::= PM 
            {
              Boolean RESULT = null;
		
	RESULT = Boolean.TRUE;

              CUP$QBEParser$result = new java_cup.runtime.Symbol(19/*is_pm_not_am*/, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right, RESULT);
            }
          return CUP$QBEParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // is_pm_not_am ::= AM 
            {
              Boolean RESULT = null;
		
	RESULT = Boolean.FALSE;

              CUP$QBEParser$result = new java_cup.runtime.Symbol(19/*is_pm_not_am*/, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right, RESULT);
            }
          return CUP$QBEParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // milliseconds ::= FOUR_DIGIT_LITERAL 
            {
              Integer RESULT = null;
		int msleft = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).left;
		int msright = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right;
		java.lang.Integer ms = (java.lang.Integer)((java_cup.runtime.Symbol) CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).value;
		
	RESULT = ms;

              CUP$QBEParser$result = new java_cup.runtime.Symbol(17/*milliseconds*/, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right, RESULT);
            }
          return CUP$QBEParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // milliseconds ::= TWO_DIGIT_LITERAL 
            {
              Integer RESULT = null;
		int msleft = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).left;
		int msright = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right;
		java.lang.Integer ms = (java.lang.Integer)((java_cup.runtime.Symbol) CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).value;
		
	RESULT = ms;

              CUP$QBEParser$result = new java_cup.runtime.Symbol(17/*milliseconds*/, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right, RESULT);
            }
          return CUP$QBEParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // time_literal ::= TWO_DIGIT_LITERAL COLON TWO_DIGIT_LITERAL COLON TWO_DIGIT_LITERAL DOT milliseconds is_pm_not_am 
            {
              QBETimeLiteral RESULT = null;
		int hleft = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-7)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-7)).right;
		java.lang.Integer h = (java.lang.Integer)((java_cup.runtime.Symbol) CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-7)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-5)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-5)).right;
		java.lang.Integer m = (java.lang.Integer)((java_cup.runtime.Symbol) CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-3)).right;
		java.lang.Integer s = (java.lang.Integer)((java_cup.runtime.Symbol) CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-3)).value;
		int msleft = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-1)).left;
		int msright = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-1)).right;
		Integer ms = (Integer)((java_cup.runtime.Symbol) CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-1)).value;
		int pmleft = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).left;
		int pmright = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right;
		Boolean pm = (Boolean)((java_cup.runtime.Symbol) CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).value;
		
	RESULT = new QBETimeLiteral(h.intValue(), m.intValue(), s.intValue(), ms.intValue(), pm.booleanValue());

              CUP$QBEParser$result = new java_cup.runtime.Symbol(18/*time_literal*/, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-7)).left, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right, RESULT);
            }
          return CUP$QBEParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // time_literal ::= TWO_DIGIT_LITERAL COLON TWO_DIGIT_LITERAL COLON TWO_DIGIT_LITERAL is_pm_not_am 
            {
              QBETimeLiteral RESULT = null;
		int hleft = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-5)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-5)).right;
		java.lang.Integer h = (java.lang.Integer)((java_cup.runtime.Symbol) CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-5)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-3)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-3)).right;
		java.lang.Integer m = (java.lang.Integer)((java_cup.runtime.Symbol) CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-1)).right;
		java.lang.Integer s = (java.lang.Integer)((java_cup.runtime.Symbol) CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-1)).value;
		int pmleft = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).left;
		int pmright = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right;
		Boolean pm = (Boolean)((java_cup.runtime.Symbol) CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).value;
		
	RESULT = new QBETimeLiteral(h.intValue(), m.intValue(), s.intValue(), pm.booleanValue());

              CUP$QBEParser$result = new java_cup.runtime.Symbol(18/*time_literal*/, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right, RESULT);
            }
          return CUP$QBEParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // time_literal ::= TWO_DIGIT_LITERAL COLON TWO_DIGIT_LITERAL is_pm_not_am 
            {
              QBETimeLiteral RESULT = null;
		int hleft = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-3)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-3)).right;
		java.lang.Integer h = (java.lang.Integer)((java_cup.runtime.Symbol) CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-3)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-1)).right;
		java.lang.Integer m = (java.lang.Integer)((java_cup.runtime.Symbol) CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-1)).value;
		int pmleft = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).left;
		int pmright = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right;
		Boolean pm = (Boolean)((java_cup.runtime.Symbol) CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).value;
		
	RESULT = new QBETimeLiteral(h.intValue(), m.intValue(), pm.booleanValue());

              CUP$QBEParser$result = new java_cup.runtime.Symbol(18/*time_literal*/, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right, RESULT);
            }
          return CUP$QBEParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // time_literal ::= TWO_DIGIT_LITERAL COLON TWO_DIGIT_LITERAL COLON TWO_DIGIT_LITERAL DOT milliseconds 
            {
              QBETimeLiteral RESULT = null;
		int hleft = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-6)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-6)).right;
		java.lang.Integer h = (java.lang.Integer)((java_cup.runtime.Symbol) CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-6)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-4)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-4)).right;
		java.lang.Integer m = (java.lang.Integer)((java_cup.runtime.Symbol) CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-2)).right;
		java.lang.Integer s = (java.lang.Integer)((java_cup.runtime.Symbol) CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-2)).value;
		int msleft = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).left;
		int msright = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right;
		Integer ms = (Integer)((java_cup.runtime.Symbol) CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).value;
		
	RESULT = new QBETimeLiteral(h.intValue(), m.intValue(), s.intValue(), ms.intValue());

              CUP$QBEParser$result = new java_cup.runtime.Symbol(18/*time_literal*/, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right, RESULT);
            }
          return CUP$QBEParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // time_literal ::= TWO_DIGIT_LITERAL COLON TWO_DIGIT_LITERAL COLON TWO_DIGIT_LITERAL 
            {
              QBETimeLiteral RESULT = null;
		int hleft = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-4)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-4)).right;
		java.lang.Integer h = (java.lang.Integer)((java_cup.runtime.Symbol) CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-4)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-2)).right;
		java.lang.Integer m = (java.lang.Integer)((java_cup.runtime.Symbol) CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right;
		java.lang.Integer s = (java.lang.Integer)((java_cup.runtime.Symbol) CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).value;
		
	RESULT = new QBETimeLiteral(h.intValue(), m.intValue(), s.intValue());

              CUP$QBEParser$result = new java_cup.runtime.Symbol(18/*time_literal*/, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right, RESULT);
            }
          return CUP$QBEParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // time_literal ::= TWO_DIGIT_LITERAL COLON TWO_DIGIT_LITERAL 
            {
              QBETimeLiteral RESULT = null;
		int hleft = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-2)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-2)).right;
		java.lang.Integer h = (java.lang.Integer)((java_cup.runtime.Symbol) CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right;
		java.lang.Integer m = (java.lang.Integer)((java_cup.runtime.Symbol) CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).value;
		
	RESULT = new QBETimeLiteral(h.intValue(), m.intValue());

              CUP$QBEParser$result = new java_cup.runtime.Symbol(18/*time_literal*/, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right, RESULT);
            }
          return CUP$QBEParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // month ::= DECEMBER 
            {
              Integer RESULT = null;
		
	RESULT = new Integer(12);

              CUP$QBEParser$result = new java_cup.runtime.Symbol(16/*month*/, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right, RESULT);
            }
          return CUP$QBEParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // month ::= NOVEMBER 
            {
              Integer RESULT = null;
		
	RESULT = new Integer(11);

              CUP$QBEParser$result = new java_cup.runtime.Symbol(16/*month*/, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right, RESULT);
            }
          return CUP$QBEParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // month ::= OCTOBER 
            {
              Integer RESULT = null;
		
	RESULT = new Integer(10);

              CUP$QBEParser$result = new java_cup.runtime.Symbol(16/*month*/, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right, RESULT);
            }
          return CUP$QBEParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // month ::= SEPTEMBER 
            {
              Integer RESULT = null;
		
	RESULT = new Integer(9);

              CUP$QBEParser$result = new java_cup.runtime.Symbol(16/*month*/, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right, RESULT);
            }
          return CUP$QBEParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // month ::= AUGUST 
            {
              Integer RESULT = null;
		
	RESULT = new Integer(8);

              CUP$QBEParser$result = new java_cup.runtime.Symbol(16/*month*/, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right, RESULT);
            }
          return CUP$QBEParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // month ::= JULY 
            {
              Integer RESULT = null;
		
	RESULT = new Integer(7);

              CUP$QBEParser$result = new java_cup.runtime.Symbol(16/*month*/, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right, RESULT);
            }
          return CUP$QBEParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // month ::= JUNE 
            {
              Integer RESULT = null;
		
	RESULT = new Integer(6);

              CUP$QBEParser$result = new java_cup.runtime.Symbol(16/*month*/, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right, RESULT);
            }
          return CUP$QBEParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // month ::= MAI 
            {
              Integer RESULT = null;
		
	RESULT = new Integer(5);

              CUP$QBEParser$result = new java_cup.runtime.Symbol(16/*month*/, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right, RESULT);
            }
          return CUP$QBEParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // month ::= APRIL 
            {
              Integer RESULT = null;
		
	RESULT = new Integer(4);

              CUP$QBEParser$result = new java_cup.runtime.Symbol(16/*month*/, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right, RESULT);
            }
          return CUP$QBEParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // month ::= MARCH 
            {
              Integer RESULT = null;
		
	RESULT = new Integer(3);

              CUP$QBEParser$result = new java_cup.runtime.Symbol(16/*month*/, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right, RESULT);
            }
          return CUP$QBEParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // month ::= FEBRUARY 
            {
              Integer RESULT = null;
		
	RESULT = new Integer(2);

              CUP$QBEParser$result = new java_cup.runtime.Symbol(16/*month*/, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right, RESULT);
            }
          return CUP$QBEParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // month ::= JANURAY 
            {
              Integer RESULT = null;
		
	RESULT = new Integer(1);

              CUP$QBEParser$result = new java_cup.runtime.Symbol(16/*month*/, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right, RESULT);
            }
          return CUP$QBEParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // dot_opt ::= DOT 
            {
              Object RESULT = null;

              CUP$QBEParser$result = new java_cup.runtime.Symbol(15/*dot_opt*/, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right, RESULT);
            }
          return CUP$QBEParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // dot_opt ::= 
            {
              Object RESULT = null;

              CUP$QBEParser$result = new java_cup.runtime.Symbol(15/*dot_opt*/, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right, RESULT);
            }
          return CUP$QBEParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // plus_minus ::= MINUS 
            {
              Integer RESULT = null;
		
	RESULT = new Integer(-1);

              CUP$QBEParser$result = new java_cup.runtime.Symbol(24/*plus_minus*/, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right, RESULT);
            }
          return CUP$QBEParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // plus_minus ::= PLUS 
            {
              Integer RESULT = null;
		
	RESULT = new Integer(1);

              CUP$QBEParser$result = new java_cup.runtime.Symbol(24/*plus_minus*/, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right, RESULT);
            }
          return CUP$QBEParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // timestamp_time_lag ::= plus_minus BIGINT_LITERAL SECS 
            {
              QBETimeLag RESULT = null;
		int pmleft = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-2)).left;
		int pmright = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-2)).right;
		Integer pm = (Integer)((java_cup.runtime.Symbol) CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-1)).right;
		java.lang.Long s = (java.lang.Long)((java_cup.runtime.Symbol) CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-1)).value;
		
	RESULT = new QBETimeLag(0, 0, 0, 0, 0, pm.intValue()*s.intValue());

              CUP$QBEParser$result = new java_cup.runtime.Symbol(23/*timestamp_time_lag*/, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right, RESULT);
            }
          return CUP$QBEParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // timestamp_time_lag ::= plus_minus BIGINT_LITERAL MINS 
            {
              QBETimeLag RESULT = null;
		int pmleft = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-2)).left;
		int pmright = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-2)).right;
		Integer pm = (Integer)((java_cup.runtime.Symbol) CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-1)).right;
		java.lang.Long m = (java.lang.Long)((java_cup.runtime.Symbol) CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-1)).value;
		
	RESULT = new QBETimeLag(0, 0, 0, 0, pm.intValue()*m.intValue(), 0);

              CUP$QBEParser$result = new java_cup.runtime.Symbol(23/*timestamp_time_lag*/, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right, RESULT);
            }
          return CUP$QBEParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // timestamp_time_lag ::= plus_minus BIGINT_LITERAL HOURS 
            {
              QBETimeLag RESULT = null;
		int pmleft = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-2)).left;
		int pmright = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-2)).right;
		Integer pm = (Integer)((java_cup.runtime.Symbol) CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-2)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-1)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-1)).right;
		java.lang.Long h = (java.lang.Long)((java_cup.runtime.Symbol) CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-1)).value;
		
	RESULT = new QBETimeLag(0, 0, 0, pm.intValue()*h.intValue(), 0, 0);

              CUP$QBEParser$result = new java_cup.runtime.Symbol(23/*timestamp_time_lag*/, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right, RESULT);
            }
          return CUP$QBEParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // timestamp_time_lag ::= date_time_lag 
            {
              QBETimeLag RESULT = null;
		int lagleft = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).left;
		int lagright = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right;
		QBETimeLag lag = (QBETimeLag)((java_cup.runtime.Symbol) CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).value;
		
	RESULT = lag;

              CUP$QBEParser$result = new java_cup.runtime.Symbol(23/*timestamp_time_lag*/, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right, RESULT);
            }
          return CUP$QBEParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // date_time_lag ::= plus_minus BIGINT_LITERAL DAYS 
            {
              QBETimeLag RESULT = null;
		int pmleft = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-2)).left;
		int pmright = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-2)).right;
		Integer pm = (Integer)((java_cup.runtime.Symbol) CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-1)).right;
		java.lang.Long d = (java.lang.Long)((java_cup.runtime.Symbol) CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-1)).value;
		
	RESULT = new QBETimeLag(0, 0, pm.intValue()*d.intValue(), 0, 0, 0);

              CUP$QBEParser$result = new java_cup.runtime.Symbol(22/*date_time_lag*/, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right, RESULT);
            }
          return CUP$QBEParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // date_time_lag ::= plus_minus BIGINT_LITERAL MONTHS 
            {
              QBETimeLag RESULT = null;
		int pmleft = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-2)).left;
		int pmright = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-2)).right;
		Integer pm = (Integer)((java_cup.runtime.Symbol) CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-1)).right;
		java.lang.Long m = (java.lang.Long)((java_cup.runtime.Symbol) CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-1)).value;
		
	RESULT = new QBETimeLag(0, pm.intValue()*m.intValue(), 0, 0, 0, 0);

              CUP$QBEParser$result = new java_cup.runtime.Symbol(22/*date_time_lag*/, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right, RESULT);
            }
          return CUP$QBEParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // date_time_lag ::= plus_minus BIGINT_LITERAL YEARS 
            {
              QBETimeLag RESULT = null;
		int pmleft = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-2)).left;
		int pmright = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-2)).right;
		Integer pm = (Integer)((java_cup.runtime.Symbol) CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-1)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-1)).right;
		java.lang.Long y = (java.lang.Long)((java_cup.runtime.Symbol) CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-1)).value;
		
	RESULT = new QBETimeLag(pm.intValue()*y.intValue(), 0, 0, 0, 0, 0);

              CUP$QBEParser$result = new java_cup.runtime.Symbol(22/*date_time_lag*/, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right, RESULT);
            }
          return CUP$QBEParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // timestamp_time_lag_opt ::= timestamp_time_lag 
            {
              QBETimeLag RESULT = null;
		int lagleft = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).left;
		int lagright = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right;
		QBETimeLag lag = (QBETimeLag)((java_cup.runtime.Symbol) CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).value;
		
	RESULT = lag;

              CUP$QBEParser$result = new java_cup.runtime.Symbol(21/*timestamp_time_lag_opt*/, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right, RESULT);
            }
          return CUP$QBEParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // timestamp_time_lag_opt ::= 
            {
              QBETimeLag RESULT = null;

              CUP$QBEParser$result = new java_cup.runtime.Symbol(21/*timestamp_time_lag_opt*/, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right, RESULT);
            }
          return CUP$QBEParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // date_time_lag_opt ::= date_time_lag 
            {
              QBETimeLag RESULT = null;
		int lagleft = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).left;
		int lagright = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right;
		QBETimeLag lag = (QBETimeLag)((java_cup.runtime.Symbol) CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).value;
		
	RESULT = lag;

              CUP$QBEParser$result = new java_cup.runtime.Symbol(20/*date_time_lag_opt*/, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right, RESULT);
            }
          return CUP$QBEParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // date_time_lag_opt ::= 
            {
              QBETimeLag RESULT = null;

              CUP$QBEParser$result = new java_cup.runtime.Symbol(20/*date_time_lag_opt*/, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right, RESULT);
            }
          return CUP$QBEParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // date_literal ::= month TWO_DIGIT_LITERAL FOUR_DIGIT_LITERAL 
            {
              QBEDateLiteral RESULT = null;
		int mleft = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-2)).right;
		Integer m = (Integer)((java_cup.runtime.Symbol) CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-1)).right;
		java.lang.Integer d = (java.lang.Integer)((java_cup.runtime.Symbol) CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-1)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right;
		java.lang.Integer y = (java.lang.Integer)((java_cup.runtime.Symbol) CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).value;
		
	RESULT = new QBEDateLiteral(d.intValue(), m.intValue(), y.intValue(), false);

              CUP$QBEParser$result = new java_cup.runtime.Symbol(14/*date_literal*/, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right, RESULT);
            }
          return CUP$QBEParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // date_literal ::= month TWO_DIGIT_LITERAL TWO_DIGIT_LITERAL 
            {
              QBEDateLiteral RESULT = null;
		int mleft = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-2)).right;
		Integer m = (Integer)((java_cup.runtime.Symbol) CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-1)).right;
		java.lang.Integer d = (java.lang.Integer)((java_cup.runtime.Symbol) CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-1)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right;
		java.lang.Integer y = (java.lang.Integer)((java_cup.runtime.Symbol) CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).value;
		
	RESULT = new QBEDateLiteral(d.intValue(), m.intValue(), y.intValue(), true);

              CUP$QBEParser$result = new java_cup.runtime.Symbol(14/*date_literal*/, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right, RESULT);
            }
          return CUP$QBEParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // date_literal ::= TWO_DIGIT_LITERAL SLASH TWO_DIGIT_LITERAL SLASH FOUR_DIGIT_LITERAL 
            {
              QBEDateLiteral RESULT = null;
		int mleft = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-4)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-4)).right;
		java.lang.Integer m = (java.lang.Integer)((java_cup.runtime.Symbol) CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-2)).right;
		java.lang.Integer d = (java.lang.Integer)((java_cup.runtime.Symbol) CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right;
		java.lang.Integer y = (java.lang.Integer)((java_cup.runtime.Symbol) CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).value;
		
	RESULT = new QBEDateLiteral(d.intValue(), m.intValue(), y.intValue(), false);

              CUP$QBEParser$result = new java_cup.runtime.Symbol(14/*date_literal*/, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right, RESULT);
            }
          return CUP$QBEParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // date_literal ::= TWO_DIGIT_LITERAL SLASH TWO_DIGIT_LITERAL SLASH TWO_DIGIT_LITERAL 
            {
              QBEDateLiteral RESULT = null;
		int mleft = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-4)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-4)).right;
		java.lang.Integer m = (java.lang.Integer)((java_cup.runtime.Symbol) CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-2)).right;
		java.lang.Integer d = (java.lang.Integer)((java_cup.runtime.Symbol) CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right;
		java.lang.Integer y = (java.lang.Integer)((java_cup.runtime.Symbol) CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).value;
		
	RESULT = new QBEDateLiteral(d.intValue(), m.intValue(), y.intValue(), true);

              CUP$QBEParser$result = new java_cup.runtime.Symbol(14/*date_literal*/, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right, RESULT);
            }
          return CUP$QBEParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // date_literal ::= TWO_DIGIT_LITERAL dot_opt month FOUR_DIGIT_LITERAL 
            {
              QBEDateLiteral RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-3)).right;
		java.lang.Integer d = (java.lang.Integer)((java_cup.runtime.Symbol) CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-3)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-1)).right;
		Integer m = (Integer)((java_cup.runtime.Symbol) CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-1)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right;
		java.lang.Integer y = (java.lang.Integer)((java_cup.runtime.Symbol) CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).value;
		
	RESULT = new QBEDateLiteral(d.intValue(), m.intValue(), y.intValue(), false);

              CUP$QBEParser$result = new java_cup.runtime.Symbol(14/*date_literal*/, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right, RESULT);
            }
          return CUP$QBEParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // date_literal ::= TWO_DIGIT_LITERAL dot_opt month TWO_DIGIT_LITERAL 
            {
              QBEDateLiteral RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-3)).right;
		java.lang.Integer d = (java.lang.Integer)((java_cup.runtime.Symbol) CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-3)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-1)).right;
		Integer m = (Integer)((java_cup.runtime.Symbol) CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-1)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right;
		java.lang.Integer y = (java.lang.Integer)((java_cup.runtime.Symbol) CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).value;
		
	RESULT = new QBEDateLiteral(d.intValue(), m.intValue(), y.intValue(), true);

              CUP$QBEParser$result = new java_cup.runtime.Symbol(14/*date_literal*/, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right, RESULT);
            }
          return CUP$QBEParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // date_literal ::= FOUR_DIGIT_LITERAL DASH TWO_DIGIT_LITERAL DASH TWO_DIGIT_LITERAL 
            {
              QBEDateLiteral RESULT = null;
		int yleft = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-4)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-4)).right;
		java.lang.Integer y = (java.lang.Integer)((java_cup.runtime.Symbol) CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-4)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-2)).right;
		java.lang.Integer m = (java.lang.Integer)((java_cup.runtime.Symbol) CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right;
		java.lang.Integer d = (java.lang.Integer)((java_cup.runtime.Symbol) CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).value;
		
	RESULT = new QBEDateLiteral(d.intValue(), m.intValue(), y.intValue(), false);

              CUP$QBEParser$result = new java_cup.runtime.Symbol(14/*date_literal*/, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right, RESULT);
            }
          return CUP$QBEParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // date_literal ::= TWO_DIGIT_LITERAL DASH TWO_DIGIT_LITERAL DASH TWO_DIGIT_LITERAL 
            {
              QBEDateLiteral RESULT = null;
		int yleft = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-4)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-4)).right;
		java.lang.Integer y = (java.lang.Integer)((java_cup.runtime.Symbol) CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-4)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-2)).right;
		java.lang.Integer m = (java.lang.Integer)((java_cup.runtime.Symbol) CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right;
		java.lang.Integer d = (java.lang.Integer)((java_cup.runtime.Symbol) CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).value;
		
	RESULT = new QBEDateLiteral(d.intValue(), m.intValue(), y.intValue(), true);

              CUP$QBEParser$result = new java_cup.runtime.Symbol(14/*date_literal*/, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right, RESULT);
            }
          return CUP$QBEParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // date_literal ::= TWO_DIGIT_LITERAL DOT TWO_DIGIT_LITERAL DOT FOUR_DIGIT_LITERAL 
            {
              QBEDateLiteral RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-4)).right;
		java.lang.Integer d = (java.lang.Integer)((java_cup.runtime.Symbol) CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-4)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-2)).right;
		java.lang.Integer m = (java.lang.Integer)((java_cup.runtime.Symbol) CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right;
		java.lang.Integer y = (java.lang.Integer)((java_cup.runtime.Symbol) CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).value;
		
	RESULT = new QBEDateLiteral(d.intValue(), m.intValue(), y.intValue(), false);

              CUP$QBEParser$result = new java_cup.runtime.Symbol(14/*date_literal*/, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right, RESULT);
            }
          return CUP$QBEParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // date_literal ::= TWO_DIGIT_LITERAL DOT TWO_DIGIT_LITERAL DOT TWO_DIGIT_LITERAL 
            {
              QBEDateLiteral RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-4)).right;
		java.lang.Integer d = (java.lang.Integer)((java_cup.runtime.Symbol) CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-4)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-2)).right;
		java.lang.Integer m = (java.lang.Integer)((java_cup.runtime.Symbol) CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right;
		java.lang.Integer y = (java.lang.Integer)((java_cup.runtime.Symbol) CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).value;
		
	RESULT = new QBEDateLiteral(d.intValue(), m.intValue(), y.intValue(), true);

              CUP$QBEParser$result = new java_cup.runtime.Symbol(14/*date_literal*/, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right, RESULT);
            }
          return CUP$QBEParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // date_literal ::= DATE_LITERAL 
            {
              QBEDateLiteral RESULT = null;
		int strleft = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).left;
		int strright = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right;
		java.lang.String str = (java.lang.String)((java_cup.runtime.Symbol) CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).value;
		
	RESULT = new QBEDateLiteral(str);

              CUP$QBEParser$result = new java_cup.runtime.Symbol(14/*date_literal*/, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right, RESULT);
            }
          return CUP$QBEParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // date_literal ::= TODAY date_time_lag_opt 
            {
              QBEDateLiteral RESULT = null;
		int lagleft = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).left;
		int lagright = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right;
		QBETimeLag lag = (QBETimeLag)((java_cup.runtime.Symbol) CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).value;
		
	RESULT = new QBETodayLiteral(lag);

              CUP$QBEParser$result = new java_cup.runtime.Symbol(14/*date_literal*/, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right, RESULT);
            }
          return CUP$QBEParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // timestamp_literal ::= date_literal time_literal 
            {
              QBETimestampLiteral RESULT = null;
		int dateleft = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-1)).left;
		int dateright = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-1)).right;
		QBEDateLiteral date = (QBEDateLiteral)((java_cup.runtime.Symbol) CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-1)).value;
		int timeleft = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).left;
		int timeright = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right;
		QBETimeLiteral time = (QBETimeLiteral)((java_cup.runtime.Symbol) CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).value;
		
	RESULT = new QBETimestampLiteral(date, time);

              CUP$QBEParser$result = new java_cup.runtime.Symbol(13/*timestamp_literal*/, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right, RESULT);
            }
          return CUP$QBEParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // timestamp_literal ::= NOW timestamp_time_lag_opt 
            {
              QBETimestampLiteral RESULT = null;
		int lagleft = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).left;
		int lagright = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right;
		QBETimeLag lag = (QBETimeLag)((java_cup.runtime.Symbol) CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).value;
		
	RESULT = new QBENowLiteral(lag);

              CUP$QBEParser$result = new java_cup.runtime.Symbol(13/*timestamp_literal*/, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right, RESULT);
            }
          return CUP$QBEParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // timestamp_date_literal ::= date_literal 
            {
              QBELiteral RESULT = null;
		int literalleft = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).left;
		int literalright = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right;
		QBEDateLiteral literal = (QBEDateLiteral)((java_cup.runtime.Symbol) CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).value;
		
	RESULT = literal;

              CUP$QBEParser$result = new java_cup.runtime.Symbol(12/*timestamp_date_literal*/, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right, RESULT);
            }
          return CUP$QBEParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // timestamp_date_literal ::= timestamp_literal 
            {
              QBELiteral RESULT = null;
		int literalleft = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).left;
		int literalright = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right;
		QBETimestampLiteral literal = (QBETimestampLiteral)((java_cup.runtime.Symbol) CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).value;
		
	RESULT = literal;

              CUP$QBEParser$result = new java_cup.runtime.Symbol(12/*timestamp_date_literal*/, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right, RESULT);
            }
          return CUP$QBEParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // singlewildcard_seq ::= singlewildcard_seq SINGLEWILDCARD 
            {
              QBEWildcard RESULT = null;
		int wildcardleft = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-1)).left;
		int wildcardright = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-1)).right;
		QBEWildcard wildcard = (QBEWildcard)((java_cup.runtime.Symbol) CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-1)).value;
		
	wildcard.inc(); RESULT = wildcard;

              CUP$QBEParser$result = new java_cup.runtime.Symbol(11/*singlewildcard_seq*/, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right, RESULT);
            }
          return CUP$QBEParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // singlewildcard_seq ::= SINGLEWILDCARD 
            {
              QBEWildcard RESULT = null;
		
	RESULT = new QBEWildcard();

              CUP$QBEParser$result = new java_cup.runtime.Symbol(11/*singlewildcard_seq*/, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right, RESULT);
            }
          return CUP$QBEParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // wildcard_seq ::= WILDCARD singlewildcard_seq 
            {
              QBEWildcard RESULT = null;
		int wildcardleft = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).left;
		int wildcardright = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right;
		QBEWildcard wildcard = (QBEWildcard)((java_cup.runtime.Symbol) CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).value;
		
	wildcard.setMultipleTimes(); RESULT = wildcard;

              CUP$QBEParser$result = new java_cup.runtime.Symbol(10/*wildcard_seq*/, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right, RESULT);
            }
          return CUP$QBEParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // wildcard_seq ::= singlewildcard_seq WILDCARD 
            {
              QBEWildcard RESULT = null;
		int wildcardleft = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-1)).left;
		int wildcardright = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-1)).right;
		QBEWildcard wildcard = (QBEWildcard)((java_cup.runtime.Symbol) CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-1)).value;
		
	wildcard.setMultipleTimes(); RESULT = wildcard;

              CUP$QBEParser$result = new java_cup.runtime.Symbol(10/*wildcard_seq*/, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right, RESULT);
            }
          return CUP$QBEParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // wildcard_seq ::= singlewildcard_seq 
            {
              QBEWildcard RESULT = null;
		int wildcardleft = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).left;
		int wildcardright = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right;
		QBEWildcard wildcard = (QBEWildcard)((java_cup.runtime.Symbol) CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).value;
		
	RESULT = wildcard;

              CUP$QBEParser$result = new java_cup.runtime.Symbol(10/*wildcard_seq*/, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right, RESULT);
            }
          return CUP$QBEParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // wildcard_seq ::= WILDCARD 
            {
              QBEWildcard RESULT = null;
		
	RESULT = QBEWildcard.MULTIPLE;

              CUP$QBEParser$result = new java_cup.runtime.Symbol(10/*wildcard_seq*/, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right, RESULT);
            }
          return CUP$QBEParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // wildcard_text_seq ::= wildcard_text_seq wildcard_seq TEXT_LITERAL 
            {
              QBEWildcardExpression RESULT = null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-2)).right;
		QBEWildcardExpression expr = (QBEWildcardExpression)((java_cup.runtime.Symbol) CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-2)).value;
		int wildcardleft = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-1)).left;
		int wildcardright = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-1)).right;
		QBEWildcard wildcard = (QBEWildcard)((java_cup.runtime.Symbol) CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-1)).value;
		int textleft = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).left;
		int textright = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right;
		java.lang.String text = (java.lang.String)((java_cup.runtime.Symbol) CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).value;
		
	expr.addLast(wildcard); expr.addLast(text); RESULT = expr;

              CUP$QBEParser$result = new java_cup.runtime.Symbol(9/*wildcard_text_seq*/, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right, RESULT);
            }
          return CUP$QBEParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // wildcard_text_seq ::= wildcard_seq TEXT_LITERAL 
            {
              QBEWildcardExpression RESULT = null;
		int wildcardleft = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-1)).left;
		int wildcardright = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-1)).right;
		QBEWildcard wildcard = (QBEWildcard)((java_cup.runtime.Symbol) CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-1)).value;
		int textleft = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).left;
		int textright = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right;
		java.lang.String text = (java.lang.String)((java_cup.runtime.Symbol) CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).value;
		
	RESULT = new QBEWildcardExpression(wildcard, text);

              CUP$QBEParser$result = new java_cup.runtime.Symbol(9/*wildcard_text_seq*/, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right, RESULT);
            }
          return CUP$QBEParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // qbe_datetime_literal ::= timestamp_literal 
            {
              QBELiteral RESULT = null;
		int literalleft = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).left;
		int literalright = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right;
		QBETimestampLiteral literal = (QBETimestampLiteral)((java_cup.runtime.Symbol) CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).value;
		
	RESULT = literal;

              CUP$QBEParser$result = new java_cup.runtime.Symbol(8/*qbe_datetime_literal*/, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right, RESULT);
            }
          return CUP$QBEParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // qbe_datetime_literal ::= time_literal 
            {
              QBELiteral RESULT = null;
		int literalleft = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).left;
		int literalright = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right;
		QBETimeLiteral literal = (QBETimeLiteral)((java_cup.runtime.Symbol) CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).value;
		
	RESULT = literal;

              CUP$QBEParser$result = new java_cup.runtime.Symbol(8/*qbe_datetime_literal*/, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right, RESULT);
            }
          return CUP$QBEParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // qbe_datetime_literal ::= date_literal 
            {
              QBELiteral RESULT = null;
		int literalleft = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).left;
		int literalright = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right;
		QBEDateLiteral literal = (QBEDateLiteral)((java_cup.runtime.Symbol) CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).value;
		
	RESULT = literal;

              CUP$QBEParser$result = new java_cup.runtime.Symbol(8/*qbe_datetime_literal*/, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right, RESULT);
            }
          return CUP$QBEParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // qbe_numeric_literal ::= INTERVAL_LITERAL COLON INTERVAL_LITERAL COLON INTERVAL_LITERAL 
            {
              QBELiteral RESULT = null;
		int hoursleft = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-4)).left;
		int hoursright = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-4)).right;
		java.lang.Integer hours = (java.lang.Integer)((java_cup.runtime.Symbol) CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-4)).value;
		int minsleft = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-2)).left;
		int minsright = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-2)).right;
		java.lang.Integer mins = (java.lang.Integer)((java_cup.runtime.Symbol) CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-2)).value;
		int secsleft = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).left;
		int secsright = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right;
		java.lang.Integer secs = (java.lang.Integer)((java_cup.runtime.Symbol) CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).value;
		
	RESULT = new QBENumericLiteral(new Long(3600*hours.intValue()+60*mins.intValue()+secs.intValue()));

              CUP$QBEParser$result = new java_cup.runtime.Symbol(6/*qbe_numeric_literal*/, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right, RESULT);
            }
          return CUP$QBEParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // qbe_numeric_literal ::= INTERVAL_LITERAL COLON INTERVAL_LITERAL 
            {
              QBELiteral RESULT = null;
		int hoursleft = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-2)).left;
		int hoursright = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-2)).right;
		java.lang.Integer hours = (java.lang.Integer)((java_cup.runtime.Symbol) CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-2)).value;
		int minsleft = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).left;
		int minsright = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right;
		java.lang.Integer mins = (java.lang.Integer)((java_cup.runtime.Symbol) CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).value;
		
	RESULT = new QBENumericLiteral(new Long(3600*hours.intValue()+60*mins.intValue()));

              CUP$QBEParser$result = new java_cup.runtime.Symbol(6/*qbe_numeric_literal*/, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right, RESULT);
            }
          return CUP$QBEParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // qbe_numeric_literal ::= INTERVAL_LITERAL 
            {
              QBELiteral RESULT = null;
		int hoursleft = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).left;
		int hoursright = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right;
		java.lang.Integer hours = (java.lang.Integer)((java_cup.runtime.Symbol) CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).value;
		
	RESULT = new QBENumericLiteral(new Long(3600*hours.intValue()));

              CUP$QBEParser$result = new java_cup.runtime.Symbol(6/*qbe_numeric_literal*/, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right, RESULT);
            }
          return CUP$QBEParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // qbe_numeric_literal ::= DECIMAL_LITERAL 
            {
              QBELiteral RESULT = null;
		int numberleft = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).left;
		int numberright = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right;
		java.math.BigDecimal number = (java.math.BigDecimal)((java_cup.runtime.Symbol) CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).value;
		
	RESULT = new QBENumericLiteral(number);

              CUP$QBEParser$result = new java_cup.runtime.Symbol(6/*qbe_numeric_literal*/, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right, RESULT);
            }
          return CUP$QBEParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // qbe_numeric_literal ::= BIGINT_LITERAL 
            {
              QBELiteral RESULT = null;
		int numberleft = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).left;
		int numberright = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right;
		java.lang.Long number = (java.lang.Long)((java_cup.runtime.Symbol) CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).value;
		
	RESULT = new QBENumericLiteral(number);

              CUP$QBEParser$result = new java_cup.runtime.Symbol(6/*qbe_numeric_literal*/, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right, RESULT);
            }
          return CUP$QBEParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // qbe_boolean_literal ::= BOOLEAN_LITERAL 
            {
              QBELiteral RESULT = null;
		int boolleft = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).left;
		int boolright = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right;
		java.lang.Boolean bool = (java.lang.Boolean)((java_cup.runtime.Symbol) CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).value;
		
	RESULT = new QBEBooleanLiteral(bool);

              CUP$QBEParser$result = new java_cup.runtime.Symbol(7/*qbe_boolean_literal*/, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right, RESULT);
            }
          return CUP$QBEParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // qbe_literal ::= qbe_datetime_literal 
            {
              QBELiteral RESULT = null;
		int literalleft = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).left;
		int literalright = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right;
		QBELiteral literal = (QBELiteral)((java_cup.runtime.Symbol) CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).value;
		
	RESULT = literal;

              CUP$QBEParser$result = new java_cup.runtime.Symbol(5/*qbe_literal*/, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right, RESULT);
            }
          return CUP$QBEParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // qbe_literal ::= qbe_boolean_literal 
            {
              QBELiteral RESULT = null;
		int literalleft = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).left;
		int literalright = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right;
		QBELiteral literal = (QBELiteral)((java_cup.runtime.Symbol) CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).value;
		
	RESULT = literal;

              CUP$QBEParser$result = new java_cup.runtime.Symbol(5/*qbe_literal*/, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right, RESULT);
            }
          return CUP$QBEParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // qbe_literal ::= qbe_numeric_literal 
            {
              QBELiteral RESULT = null;
		int literalleft = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).left;
		int literalright = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right;
		QBELiteral literal = (QBELiteral)((java_cup.runtime.Symbol) CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).value;
		
	RESULT = literal;

              CUP$QBEParser$result = new java_cup.runtime.Symbol(5/*qbe_literal*/, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right, RESULT);
            }
          return CUP$QBEParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // qbe_literal ::= TEXT_LITERAL 
            {
              QBELiteral RESULT = null;
		int textleft = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).left;
		int textright = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right;
		java.lang.String text = (java.lang.String)((java_cup.runtime.Symbol) CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).value;
		
	RESULT = new QBETextLiteral(text);

              CUP$QBEParser$result = new java_cup.runtime.Symbol(5/*qbe_literal*/, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right, RESULT);
            }
          return CUP$QBEParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // qbe_notable_expression ::= wildcard_text_seq wildcard_seq 
            {
              QBEExpression RESULT = null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-1)).right;
		QBEWildcardExpression expr = (QBEWildcardExpression)((java_cup.runtime.Symbol) CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-1)).value;
		int wildcardleft = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).left;
		int wildcardright = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right;
		QBEWildcard wildcard = (QBEWildcard)((java_cup.runtime.Symbol) CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).value;
		
	expr.addLast(wildcard); RESULT = expr;

              CUP$QBEParser$result = new java_cup.runtime.Symbol(4/*qbe_notable_expression*/, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right, RESULT);
            }
          return CUP$QBEParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // qbe_notable_expression ::= wildcard_text_seq 
            {
              QBEExpression RESULT = null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right;
		QBEWildcardExpression expr = (QBEWildcardExpression)((java_cup.runtime.Symbol) CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).value;
		
	RESULT = expr;

              CUP$QBEParser$result = new java_cup.runtime.Symbol(4/*qbe_notable_expression*/, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right, RESULT);
            }
          return CUP$QBEParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // qbe_notable_expression ::= TEXT_LITERAL wildcard_text_seq wildcard_seq 
            {
              QBEExpression RESULT = null;
		int textleft = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-2)).left;
		int textright = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-2)).right;
		java.lang.String text = (java.lang.String)((java_cup.runtime.Symbol) CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-1)).right;
		QBEWildcardExpression expr = (QBEWildcardExpression)((java_cup.runtime.Symbol) CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-1)).value;
		int wildcardleft = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).left;
		int wildcardright = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right;
		QBEWildcard wildcard = (QBEWildcard)((java_cup.runtime.Symbol) CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).value;
		
	expr.addFirst(text); expr.addLast(wildcard); RESULT = expr;

              CUP$QBEParser$result = new java_cup.runtime.Symbol(4/*qbe_notable_expression*/, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right, RESULT);
            }
          return CUP$QBEParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // qbe_notable_expression ::= TEXT_LITERAL wildcard_text_seq 
            {
              QBEExpression RESULT = null;
		int textleft = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-1)).left;
		int textright = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-1)).right;
		java.lang.String text = (java.lang.String)((java_cup.runtime.Symbol) CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right;
		QBEWildcardExpression expr = (QBEWildcardExpression)((java_cup.runtime.Symbol) CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).value;
		
	expr.addFirst(text); RESULT = expr;

              CUP$QBEParser$result = new java_cup.runtime.Symbol(4/*qbe_notable_expression*/, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right, RESULT);
            }
          return CUP$QBEParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // qbe_notable_expression ::= TEXT_LITERAL wildcard_seq 
            {
              QBEExpression RESULT = null;
		int textleft = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-1)).left;
		int textright = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-1)).right;
		java.lang.String text = (java.lang.String)((java_cup.runtime.Symbol) CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-1)).value;
		int wildcardleft = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).left;
		int wildcardright = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right;
		QBEWildcard wildcard = (QBEWildcard)((java_cup.runtime.Symbol) CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).value;
		
	RESULT = new QBEWildcardExpression(text, wildcard);

              CUP$QBEParser$result = new java_cup.runtime.Symbol(4/*qbe_notable_expression*/, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right, RESULT);
            }
          return CUP$QBEParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // qbe_notable_expression ::= LEFT_ANCHOR singlewildcard_seq TEXT_LITERAL wildcard_text_seq singlewildcard_seq RIGHT_ANCHOR 
            {
              QBEExpression RESULT = null;
		int swild1left = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-4)).left;
		int swild1right = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-4)).right;
		QBEWildcard swild1 = (QBEWildcard)((java_cup.runtime.Symbol) CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-4)).value;
		int textleft = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-3)).left;
		int textright = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-3)).right;
		java.lang.String text = (java.lang.String)((java_cup.runtime.Symbol) CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-3)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-2)).right;
		QBEWildcardExpression expr = (QBEWildcardExpression)((java_cup.runtime.Symbol) CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-2)).value;
		int swild2left = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-1)).left;
		int swild2right = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-1)).right;
		QBEWildcard swild2 = (QBEWildcard)((java_cup.runtime.Symbol) CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-1)).value;
		
	expr.addFirst(text); expr.addFirst(swild1); expr.addLast(swild2); RESULT = expr;

              CUP$QBEParser$result = new java_cup.runtime.Symbol(4/*qbe_notable_expression*/, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right, RESULT);
            }
          return CUP$QBEParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // qbe_notable_expression ::= LEFT_ANCHOR singlewildcard_seq TEXT_LITERAL singlewildcard_seq RIGHT_ANCHOR 
            {
              QBEExpression RESULT = null;
		int swild1left = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-3)).left;
		int swild1right = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-3)).right;
		QBEWildcard swild1 = (QBEWildcard)((java_cup.runtime.Symbol) CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-3)).value;
		int textleft = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-2)).left;
		int textright = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-2)).right;
		java.lang.String text = (java.lang.String)((java_cup.runtime.Symbol) CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-2)).value;
		int swild2left = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-1)).left;
		int swild2right = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-1)).right;
		QBEWildcard swild2 = (QBEWildcard)((java_cup.runtime.Symbol) CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-1)).value;
		
	QBEWildcardExpression expr = new QBEWildcardExpression(swild1, text, swild2); expr.setAnchored(); RESULT = expr;

              CUP$QBEParser$result = new java_cup.runtime.Symbol(4/*qbe_notable_expression*/, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right, RESULT);
            }
          return CUP$QBEParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // qbe_notable_expression ::= LEFT_ANCHOR TEXT_LITERAL wildcard_text_seq singlewildcard_seq RIGHT_ANCHOR 
            {
              QBEExpression RESULT = null;
		int textleft = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-3)).left;
		int textright = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-3)).right;
		java.lang.String text = (java.lang.String)((java_cup.runtime.Symbol) CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-3)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-2)).right;
		QBEWildcardExpression expr = (QBEWildcardExpression)((java_cup.runtime.Symbol) CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-2)).value;
		int swild2left = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-1)).left;
		int swild2right = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-1)).right;
		QBEWildcard swild2 = (QBEWildcard)((java_cup.runtime.Symbol) CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-1)).value;
		
	expr.addFirst(text); expr.addLast(swild2); RESULT = expr;

              CUP$QBEParser$result = new java_cup.runtime.Symbol(4/*qbe_notable_expression*/, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right, RESULT);
            }
          return CUP$QBEParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // qbe_notable_expression ::= LEFT_ANCHOR TEXT_LITERAL singlewildcard_seq RIGHT_ANCHOR 
            {
              QBEExpression RESULT = null;
		int textleft = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-2)).left;
		int textright = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-2)).right;
		java.lang.String text = (java.lang.String)((java_cup.runtime.Symbol) CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-2)).value;
		int swild2left = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-1)).left;
		int swild2right = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-1)).right;
		QBEWildcard swild2 = (QBEWildcard)((java_cup.runtime.Symbol) CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-1)).value;
		
	QBEWildcardExpression expr = new QBEWildcardExpression(text, swild2); expr.setAnchored(); RESULT = expr;

              CUP$QBEParser$result = new java_cup.runtime.Symbol(4/*qbe_notable_expression*/, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right, RESULT);
            }
          return CUP$QBEParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // qbe_notable_expression ::= LEFT_ANCHOR singlewildcard_seq TEXT_LITERAL wildcard_text_seq RIGHT_ANCHOR 
            {
              QBEExpression RESULT = null;
		int swild1left = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-3)).left;
		int swild1right = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-3)).right;
		QBEWildcard swild1 = (QBEWildcard)((java_cup.runtime.Symbol) CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-3)).value;
		int textleft = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-2)).left;
		int textright = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-2)).right;
		java.lang.String text = (java.lang.String)((java_cup.runtime.Symbol) CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-1)).right;
		QBEWildcardExpression expr = (QBEWildcardExpression)((java_cup.runtime.Symbol) CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-1)).value;
		
	expr.addFirst(text); expr.addFirst(swild1); RESULT = expr;

              CUP$QBEParser$result = new java_cup.runtime.Symbol(4/*qbe_notable_expression*/, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right, RESULT);
            }
          return CUP$QBEParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // qbe_notable_expression ::= LEFT_ANCHOR singlewildcard_seq TEXT_LITERAL RIGHT_ANCHOR 
            {
              QBEExpression RESULT = null;
		int swild1left = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-2)).left;
		int swild1right = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-2)).right;
		QBEWildcard swild1 = (QBEWildcard)((java_cup.runtime.Symbol) CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-2)).value;
		int textleft = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-1)).left;
		int textright = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-1)).right;
		java.lang.String text = (java.lang.String)((java_cup.runtime.Symbol) CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-1)).value;
		
	QBEWildcardExpression expr = new QBEWildcardExpression(swild1, text); expr.setAnchored(); RESULT = expr;

              CUP$QBEParser$result = new java_cup.runtime.Symbol(4/*qbe_notable_expression*/, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right, RESULT);
            }
          return CUP$QBEParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // qbe_notable_expression ::= LEFT_ANCHOR TEXT_LITERAL wildcard_text_seq RIGHT_ANCHOR 
            {
              QBEExpression RESULT = null;
		int textleft = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-2)).left;
		int textright = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-2)).right;
		java.lang.String text = (java.lang.String)((java_cup.runtime.Symbol) CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-1)).right;
		QBEWildcardExpression expr = (QBEWildcardExpression)((java_cup.runtime.Symbol) CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-1)).value;
		
	expr.addFirst(text); expr.setAnchored(); RESULT = expr;

              CUP$QBEParser$result = new java_cup.runtime.Symbol(4/*qbe_notable_expression*/, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right, RESULT);
            }
          return CUP$QBEParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // qbe_notable_expression ::= LEFT_ANCHOR TEXT_LITERAL RIGHT_ANCHOR 
            {
              QBEExpression RESULT = null;
		int textleft = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-1)).left;
		int textright = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-1)).right;
		java.lang.String text = (java.lang.String)((java_cup.runtime.Symbol) CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-1)).value;
		
	QBEWildcardExpression expr = new QBEWildcardExpression(text); expr.setAnchored(); RESULT = expr;

              CUP$QBEParser$result = new java_cup.runtime.Symbol(4/*qbe_notable_expression*/, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right, RESULT);
            }
          return CUP$QBEParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // qbe_notable_expression ::= TEXT_LITERAL wildcard_text_seq singlewildcard_seq RIGHT_ANCHOR 
            {
              QBEExpression RESULT = null;
		int textleft = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-3)).left;
		int textright = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-3)).right;
		java.lang.String text = (java.lang.String)((java_cup.runtime.Symbol) CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-3)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-2)).right;
		QBEWildcardExpression expr = (QBEWildcardExpression)((java_cup.runtime.Symbol) CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-2)).value;
		int swildleft = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-1)).left;
		int swildright = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-1)).right;
		QBEWildcard swild = (QBEWildcard)((java_cup.runtime.Symbol) CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-1)).value;
		
	expr.addFirst(text); expr.addFirst(QBEWildcard.MULTIPLE); expr.addLast(swild); RESULT = expr;

              CUP$QBEParser$result = new java_cup.runtime.Symbol(4/*qbe_notable_expression*/, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right, RESULT);
            }
          return CUP$QBEParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // qbe_notable_expression ::= TEXT_LITERAL singlewildcard_seq RIGHT_ANCHOR 
            {
              QBEExpression RESULT = null;
		int textleft = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-2)).left;
		int textright = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-2)).right;
		java.lang.String text = (java.lang.String)((java_cup.runtime.Symbol) CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-2)).value;
		int swildleft = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-1)).left;
		int swildright = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-1)).right;
		QBEWildcard swild = (QBEWildcard)((java_cup.runtime.Symbol) CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-1)).value;
		
	RESULT = new QBEWildcardExpression(QBEWildcard.MULTIPLE, text, swild);

              CUP$QBEParser$result = new java_cup.runtime.Symbol(4/*qbe_notable_expression*/, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right, RESULT);
            }
          return CUP$QBEParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // qbe_notable_expression ::= TEXT_LITERAL wildcard_text_seq RIGHT_ANCHOR 
            {
              QBEExpression RESULT = null;
		int textleft = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-2)).left;
		int textright = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-2)).right;
		java.lang.String text = (java.lang.String)((java_cup.runtime.Symbol) CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-1)).right;
		QBEWildcardExpression expr = (QBEWildcardExpression)((java_cup.runtime.Symbol) CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-1)).value;
		
	expr.addFirst(text); expr.addFirst(QBEWildcard.MULTIPLE); RESULT = expr;

              CUP$QBEParser$result = new java_cup.runtime.Symbol(4/*qbe_notable_expression*/, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right, RESULT);
            }
          return CUP$QBEParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // qbe_notable_expression ::= TEXT_LITERAL RIGHT_ANCHOR 
            {
              QBEExpression RESULT = null;
		int textleft = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-1)).left;
		int textright = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-1)).right;
		java.lang.String text = (java.lang.String)((java_cup.runtime.Symbol) CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-1)).value;
		
	RESULT = new QBEWildcardExpression(QBEWildcard.MULTIPLE, text);

              CUP$QBEParser$result = new java_cup.runtime.Symbol(4/*qbe_notable_expression*/, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right, RESULT);
            }
          return CUP$QBEParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // qbe_notable_expression ::= LEFT_ANCHOR singlewildcard_seq TEXT_LITERAL wildcard_text_seq 
            {
              QBEExpression RESULT = null;
		int swildleft = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-2)).left;
		int swildright = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-2)).right;
		QBEWildcard swild = (QBEWildcard)((java_cup.runtime.Symbol) CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-2)).value;
		int textleft = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-1)).left;
		int textright = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-1)).right;
		java.lang.String text = (java.lang.String)((java_cup.runtime.Symbol) CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right;
		QBEWildcardExpression expr = (QBEWildcardExpression)((java_cup.runtime.Symbol) CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).value;
		
	expr.addFirst(text); expr.addFirst(swild); expr.addLast(QBEWildcard.MULTIPLE); RESULT = expr;

              CUP$QBEParser$result = new java_cup.runtime.Symbol(4/*qbe_notable_expression*/, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right, RESULT);
            }
          return CUP$QBEParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // qbe_notable_expression ::= LEFT_ANCHOR singlewildcard_seq TEXT_LITERAL 
            {
              QBEExpression RESULT = null;
		int swildleft = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-1)).left;
		int swildright = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-1)).right;
		QBEWildcard swild = (QBEWildcard)((java_cup.runtime.Symbol) CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-1)).value;
		int textleft = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).left;
		int textright = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right;
		java.lang.String text = (java.lang.String)((java_cup.runtime.Symbol) CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).value;
		
	RESULT = new QBEWildcardExpression(swild, text, QBEWildcard.MULTIPLE);

              CUP$QBEParser$result = new java_cup.runtime.Symbol(4/*qbe_notable_expression*/, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right, RESULT);
            }
          return CUP$QBEParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // qbe_notable_expression ::= LEFT_ANCHOR TEXT_LITERAL wildcard_text_seq 
            {
              QBEExpression RESULT = null;
		int textleft = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-1)).left;
		int textright = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-1)).right;
		java.lang.String text = (java.lang.String)((java_cup.runtime.Symbol) CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right;
		QBEWildcardExpression expr = (QBEWildcardExpression)((java_cup.runtime.Symbol) CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).value;
		
	expr.addFirst(text); expr.addLast(QBEWildcard.MULTIPLE); RESULT = expr;

              CUP$QBEParser$result = new java_cup.runtime.Symbol(4/*qbe_notable_expression*/, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right, RESULT);
            }
          return CUP$QBEParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // qbe_notable_expression ::= LEFT_ANCHOR TEXT_LITERAL 
            {
              QBEExpression RESULT = null;
		int textleft = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).left;
		int textright = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right;
		java.lang.String text = (java.lang.String)((java_cup.runtime.Symbol) CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).value;
		
	RESULT = new QBEWildcardExpression(text, QBEWildcard.MULTIPLE);

              CUP$QBEParser$result = new java_cup.runtime.Symbol(4/*qbe_notable_expression*/, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right, RESULT);
            }
          return CUP$QBEParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // qbe_notable_expression ::= WEEK BIGINT_LITERAL RANGE WEEK BIGINT_LITERAL 
            {
              QBEExpression RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-3)).right;
		java.lang.Long start = (java.lang.Long)((java_cup.runtime.Symbol) CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-3)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right;
		java.lang.Long end = (java.lang.Long)((java_cup.runtime.Symbol) CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).value;
		
	RESULT = new QBEWeekRangeExpression(start.intValue(), end.intValue(), 0);

              CUP$QBEParser$result = new java_cup.runtime.Symbol(4/*qbe_notable_expression*/, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right, RESULT);
            }
          return CUP$QBEParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // qbe_notable_expression ::= WEEK BIGINT_LITERAL date_time_lag_opt 
            {
              QBEExpression RESULT = null;
		int numleft = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-1)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-1)).right;
		java.lang.Long num = (java.lang.Long)((java_cup.runtime.Symbol) CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-1)).value;
		int lagleft = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).left;
		int lagright = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right;
		QBETimeLag lag = (QBETimeLag)((java_cup.runtime.Symbol) CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).value;
		
	RESULT = new QBEWeekRangeExpression(num.intValue(), lag);

              CUP$QBEParser$result = new java_cup.runtime.Symbol(4/*qbe_notable_expression*/, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right, RESULT);
            }
          return CUP$QBEParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // qbe_notable_expression ::= THISW date_time_lag_opt 
            {
              QBEExpression RESULT = null;
		int lagleft = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).left;
		int lagright = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right;
		QBETimeLag lag = (QBETimeLag)((java_cup.runtime.Symbol) CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).value;
		
	RESULT = new QBEDateRangeExpression(lag, QBEDateRangeExpression.THISW);

              CUP$QBEParser$result = new java_cup.runtime.Symbol(4/*qbe_notable_expression*/, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right, RESULT);
            }
          return CUP$QBEParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // qbe_notable_expression ::= THISM date_time_lag_opt 
            {
              QBEExpression RESULT = null;
		int lagleft = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).left;
		int lagright = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right;
		QBETimeLag lag = (QBETimeLag)((java_cup.runtime.Symbol) CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).value;
		
	RESULT = new QBEDateRangeExpression(lag, QBEDateRangeExpression.THISM);

              CUP$QBEParser$result = new java_cup.runtime.Symbol(4/*qbe_notable_expression*/, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right, RESULT);
            }
          return CUP$QBEParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // qbe_notable_expression ::= THISQ date_time_lag_opt 
            {
              QBEExpression RESULT = null;
		int lagleft = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).left;
		int lagright = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right;
		QBETimeLag lag = (QBETimeLag)((java_cup.runtime.Symbol) CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).value;
		
	RESULT = new QBEDateRangeExpression(lag, QBEDateRangeExpression.THISQ);

              CUP$QBEParser$result = new java_cup.runtime.Symbol(4/*qbe_notable_expression*/, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right, RESULT);
            }
          return CUP$QBEParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // qbe_notable_expression ::= THISY date_time_lag_opt 
            {
              QBEExpression RESULT = null;
		int lagleft = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).left;
		int lagright = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right;
		QBETimeLag lag = (QBETimeLag)((java_cup.runtime.Symbol) CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).value;
		
	RESULT = new QBEDateRangeExpression(lag, QBEDateRangeExpression.THISY);

              CUP$QBEParser$result = new java_cup.runtime.Symbol(4/*qbe_notable_expression*/, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right, RESULT);
            }
          return CUP$QBEParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // qbe_notable_expression ::= WTD date_time_lag_opt 
            {
              QBEExpression RESULT = null;
		int lagleft = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).left;
		int lagright = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right;
		QBETimeLag lag = (QBETimeLag)((java_cup.runtime.Symbol) CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).value;
		
	RESULT = new QBEDateRangeExpression(lag, QBEDateRangeExpression.WTD);

              CUP$QBEParser$result = new java_cup.runtime.Symbol(4/*qbe_notable_expression*/, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right, RESULT);
            }
          return CUP$QBEParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // qbe_notable_expression ::= MTD date_time_lag_opt 
            {
              QBEExpression RESULT = null;
		int lagleft = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).left;
		int lagright = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right;
		QBETimeLag lag = (QBETimeLag)((java_cup.runtime.Symbol) CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).value;
		
	RESULT = new QBEDateRangeExpression(lag, QBEDateRangeExpression.MTD);

              CUP$QBEParser$result = new java_cup.runtime.Symbol(4/*qbe_notable_expression*/, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right, RESULT);
            }
          return CUP$QBEParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // qbe_notable_expression ::= QTD date_time_lag_opt 
            {
              QBEExpression RESULT = null;
		int lagleft = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).left;
		int lagright = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right;
		QBETimeLag lag = (QBETimeLag)((java_cup.runtime.Symbol) CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).value;
		
	RESULT = new QBEDateRangeExpression(lag, QBEDateRangeExpression.QTD);

              CUP$QBEParser$result = new java_cup.runtime.Symbol(4/*qbe_notable_expression*/, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right, RESULT);
            }
          return CUP$QBEParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // qbe_notable_expression ::= YTD date_time_lag_opt 
            {
              QBEExpression RESULT = null;
		int lagleft = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).left;
		int lagright = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right;
		QBETimeLag lag = (QBETimeLag)((java_cup.runtime.Symbol) CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).value;
		
	RESULT = new QBEDateRangeExpression(lag, QBEDateRangeExpression.YTD);

              CUP$QBEParser$result = new java_cup.runtime.Symbol(4/*qbe_notable_expression*/, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right, RESULT);
            }
          return CUP$QBEParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // qbe_notable_expression ::= timestamp_date_literal RANGE date_literal 
            {
              QBEExpression RESULT = null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-2)).right;
		QBELiteral left = (QBELiteral)((java_cup.runtime.Symbol) CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right;
		QBEDateLiteral right = (QBEDateLiteral)((java_cup.runtime.Symbol) CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).value;
		
	// add one day to right operand
	right.increment();
	
	RESULT = new QBERangeExpression(left, right, false);

              CUP$QBEParser$result = new java_cup.runtime.Symbol(4/*qbe_notable_expression*/, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right, RESULT);
            }
          return CUP$QBEParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // qbe_notable_expression ::= timestamp_date_literal RANGE timestamp_literal 
            {
              QBEExpression RESULT = null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-2)).right;
		QBELiteral left = (QBELiteral)((java_cup.runtime.Symbol) CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right;
		QBETimestampLiteral right = (QBETimestampLiteral)((java_cup.runtime.Symbol) CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).value;
		
	RESULT = new QBERangeExpression(left, right, false);

              CUP$QBEParser$result = new java_cup.runtime.Symbol(4/*qbe_notable_expression*/, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right, RESULT);
            }
          return CUP$QBEParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // qbe_notable_expression ::= time_literal RANGE time_literal 
            {
              QBEExpression RESULT = null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-2)).right;
		QBETimeLiteral left = (QBETimeLiteral)((java_cup.runtime.Symbol) CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right;
		QBETimeLiteral right = (QBETimeLiteral)((java_cup.runtime.Symbol) CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).value;
		
	RESULT = new QBERangeExpression(left, right, false);

              CUP$QBEParser$result = new java_cup.runtime.Symbol(4/*qbe_notable_expression*/, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right, RESULT);
            }
          return CUP$QBEParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // qbe_notable_expression ::= qbe_numeric_literal RANGE qbe_numeric_literal 
            {
              QBEExpression RESULT = null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-2)).right;
		QBELiteral left = (QBELiteral)((java_cup.runtime.Symbol) CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right;
		QBELiteral right = (QBELiteral)((java_cup.runtime.Symbol) CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).value;
		
	RESULT = new QBERangeExpression(left, right, true);

              CUP$QBEParser$result = new java_cup.runtime.Symbol(4/*qbe_notable_expression*/, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right, RESULT);
            }
          return CUP$QBEParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // qbe_notable_expression ::= LESS_OR_EQUAL_THAN qbe_literal 
            {
              QBEExpression RESULT = null;
		int literalleft = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).left;
		int literalright = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right;
		QBELiteral literal = (QBELiteral)((java_cup.runtime.Symbol) CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).value;
		
	RESULT = new QBEUnaryExpression(QBEUnaryOperator.LESS_OR_EQUAL_THAN, literal);

              CUP$QBEParser$result = new java_cup.runtime.Symbol(4/*qbe_notable_expression*/, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right, RESULT);
            }
          return CUP$QBEParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // qbe_notable_expression ::= LESS_THAN qbe_literal 
            {
              QBEExpression RESULT = null;
		int literalleft = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).left;
		int literalright = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right;
		QBELiteral literal = (QBELiteral)((java_cup.runtime.Symbol) CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).value;
		
	RESULT = new QBEUnaryExpression(QBEUnaryOperator.LESS_THAN, literal);

              CUP$QBEParser$result = new java_cup.runtime.Symbol(4/*qbe_notable_expression*/, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right, RESULT);
            }
          return CUP$QBEParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // qbe_notable_expression ::= GREATER_OR_EQUAL_THAN qbe_literal 
            {
              QBEExpression RESULT = null;
		int literalleft = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).left;
		int literalright = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right;
		QBELiteral literal = (QBELiteral)((java_cup.runtime.Symbol) CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).value;
		
	RESULT = new QBEUnaryExpression(QBEUnaryOperator.GREATER_OR_EQUAL_THAN, literal);

              CUP$QBEParser$result = new java_cup.runtime.Symbol(4/*qbe_notable_expression*/, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right, RESULT);
            }
          return CUP$QBEParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // qbe_notable_expression ::= GREATER_THAN qbe_literal 
            {
              QBEExpression RESULT = null;
		int literalleft = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).left;
		int literalright = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right;
		QBELiteral literal = (QBELiteral)((java_cup.runtime.Symbol) CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).value;
		
	RESULT = new QBEUnaryExpression(QBEUnaryOperator.GREATER_THAN, literal);

              CUP$QBEParser$result = new java_cup.runtime.Symbol(4/*qbe_notable_expression*/, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right, RESULT);
            }
          return CUP$QBEParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // qbe_notable_expression ::= EXACT_MATCH TEXT_LITERAL 
            {
              QBEExpression RESULT = null;
		int textleft = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).left;
		int textright = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right;
		java.lang.String text = (java.lang.String)((java_cup.runtime.Symbol) CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).value;
		
	RESULT = new QBEUnaryExpression(QBEUnaryOperator.EQUALS, new QBETextLiteral(text));

              CUP$QBEParser$result = new java_cup.runtime.Symbol(4/*qbe_notable_expression*/, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right, RESULT);
            }
          return CUP$QBEParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // qbe_notable_expression ::= ENUM_LITERAL 
            {
              QBEExpression RESULT = null;
		int textleft = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).left;
		int textright = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right;
		java.lang.String text = (java.lang.String)((java_cup.runtime.Symbol) CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).value;
		
	RESULT = new QBEUnaryExpression(QBEUnaryOperator.EQUALS, new QBETextLiteral(text));

              CUP$QBEParser$result = new java_cup.runtime.Symbol(4/*qbe_notable_expression*/, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right, RESULT);
            }
          return CUP$QBEParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // qbe_notable_expression ::= TEXT_LITERAL 
            {
              QBEExpression RESULT = null;
		int textleft = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).left;
		int textright = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right;
		java.lang.String text = (java.lang.String)((java_cup.runtime.Symbol) CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).value;
		
	RESULT = new QBETextExpression(text);

              CUP$QBEParser$result = new java_cup.runtime.Symbol(4/*qbe_notable_expression*/, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right, RESULT);
            }
          return CUP$QBEParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // qbe_notable_expression ::= qbe_datetime_literal 
            {
              QBEExpression RESULT = null;
		int literalleft = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).left;
		int literalright = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right;
		QBELiteral literal = (QBELiteral)((java_cup.runtime.Symbol) CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).value;
		
	RESULT = new QBELiteralExpression(literal);

              CUP$QBEParser$result = new java_cup.runtime.Symbol(4/*qbe_notable_expression*/, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right, RESULT);
            }
          return CUP$QBEParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // qbe_notable_expression ::= qbe_boolean_literal 
            {
              QBEExpression RESULT = null;
		int literalleft = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).left;
		int literalright = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right;
		QBELiteral literal = (QBELiteral)((java_cup.runtime.Symbol) CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).value;
		
	RESULT = new QBELiteralExpression(literal);

              CUP$QBEParser$result = new java_cup.runtime.Symbol(4/*qbe_notable_expression*/, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right, RESULT);
            }
          return CUP$QBEParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // qbe_notable_expression ::= qbe_numeric_literal 
            {
              QBEExpression RESULT = null;
		int literalleft = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).left;
		int literalright = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right;
		QBELiteral literal = (QBELiteral)((java_cup.runtime.Symbol) CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).value;
		
	RESULT = new QBELiteralExpression(literal);

              CUP$QBEParser$result = new java_cup.runtime.Symbol(4/*qbe_notable_expression*/, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right, RESULT);
            }
          return CUP$QBEParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // qbe_notable_expression ::= NULL 
            {
              QBEExpression RESULT = null;
		
	RESULT = new QBENullExpression();

              CUP$QBEParser$result = new java_cup.runtime.Symbol(4/*qbe_notable_expression*/, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right, RESULT);
            }
          return CUP$QBEParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // qbe_logical_operator ::= OR 
            {
              QBEDualOperator RESULT = null;
		
	RESULT = QBEDualOperator.OR;

              CUP$QBEParser$result = new java_cup.runtime.Symbol(3/*qbe_logical_operator*/, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right, RESULT);
            }
          return CUP$QBEParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // qbe_logical_operator ::= AND 
            {
              QBEDualOperator RESULT = null;
		
	RESULT = QBEDualOperator.AND;

              CUP$QBEParser$result = new java_cup.runtime.Symbol(3/*qbe_logical_operator*/, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right, RESULT);
            }
          return CUP$QBEParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // qbe_expression ::= WILDCARD 
            {
              QBEExpression RESULT = null;
		
	/* handle '*' as '!null' */
	RESULT = new QBEUnaryExpression(QBEUnaryOperator.NOT, new QBENullExpression());

              CUP$QBEParser$result = new java_cup.runtime.Symbol(2/*qbe_expression*/, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right, RESULT);
            }
          return CUP$QBEParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // qbe_expression ::= qbe_expression qbe_logical_operator qbe_expression 
            {
              QBEExpression RESULT = null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-2)).right;
		QBEExpression left = (QBEExpression)((java_cup.runtime.Symbol) CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-1)).right;
		QBEDualOperator op = (QBEDualOperator)((java_cup.runtime.Symbol) CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-1)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right;
		QBEExpression right = (QBEExpression)((java_cup.runtime.Symbol) CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).value;
		
	RESULT = new QBEDualExpression(left, op, right);

              CUP$QBEParser$result = new java_cup.runtime.Symbol(2/*qbe_expression*/, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right, RESULT);
            }
          return CUP$QBEParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // qbe_expression ::= NOT qbe_notable_expression 
            {
              QBEExpression RESULT = null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right;
		QBEExpression expr = (QBEExpression)((java_cup.runtime.Symbol) CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).value;
		
	RESULT = new QBEUnaryExpression(QBEUnaryOperator.NOT, expr);

              CUP$QBEParser$result = new java_cup.runtime.Symbol(2/*qbe_expression*/, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right, RESULT);
            }
          return CUP$QBEParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // qbe_expression ::= qbe_notable_expression 
            {
              QBEExpression RESULT = null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right;
		QBEExpression expr = (QBEExpression)((java_cup.runtime.Symbol) CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).value;
		
	RESULT = expr;

              CUP$QBEParser$result = new java_cup.runtime.Symbol(2/*qbe_expression*/, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right, RESULT);
            }
          return CUP$QBEParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // qbe_start ::= OR qbe_expression 
            {
              QBEExpression RESULT = null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right;
		QBEExpression expr = (QBEExpression)((java_cup.runtime.Symbol) CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).value;
		
	/* currently we support only one OR group */
	expr.incrementOrGroupNumber();
	RESULT = expr;

              CUP$QBEParser$result = new java_cup.runtime.Symbol(1/*qbe_start*/, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right, RESULT);
            }
          return CUP$QBEParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // qbe_start ::= qbe_expression 
            {
              QBEExpression RESULT = null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right;
		QBEExpression expr = (QBEExpression)((java_cup.runtime.Symbol) CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).value;
		
	RESULT = expr;

              CUP$QBEParser$result = new java_cup.runtime.Symbol(1/*qbe_start*/, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right, RESULT);
            }
          return CUP$QBEParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // qbe_start ::= 
            {
              QBEExpression RESULT = null;
		
	RESULT = null;

              CUP$QBEParser$result = new java_cup.runtime.Symbol(1/*qbe_start*/, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right, RESULT);
            }
          return CUP$QBEParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= qbe_start EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-1)).right;
		QBEExpression start_val = (QBEExpression)((java_cup.runtime.Symbol) CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-1)).value;
		RESULT = start_val;
              CUP$QBEParser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$QBEParser$stack.elementAt(CUP$QBEParser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$QBEParser$parser.done_parsing();
          return CUP$QBEParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

