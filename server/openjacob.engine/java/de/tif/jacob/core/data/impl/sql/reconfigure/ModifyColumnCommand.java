/*******************************************************************************
 *    This file is part of Open-jACOB
 *    Copyright (C) 2005-2006 Tarragon GmbH
 * 
 *    This program is free software; you can redistribute it and/or modify
 *    it under the terms of the GNU General Public License as published by
 *    the Free Software Foundation; version 2 of the License.
 * 
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    GNU General Public License for more details.
 * 
 *    You should have received a copy of the GNU General Public License     
 *    along with this program; if not, write to the Free Software
 *    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  
 *    USA
 *******************************************************************************/
/*
 * Created on 11.01.2005
 *
 * To change the template for this generated file go to
 * Window - Preferences - Java - Code Generation - Code and Comments
 */
package de.tif.jacob.core.data.impl.sql.reconfigure;

import de.tif.jacob.core.data.impl.sql.SQLDataSource;
import de.tif.jacob.core.schema.ISchemaColumnDefinition;

/**
 * @author Andreas
 *
 * To change the template for this generated type comment go to
 * Window - Preferences - Java - Code Generation - Code and Comments
 */
public class ModifyColumnCommand extends AlterTableSubCommand
{
  protected final ISchemaColumnDefinition desiredColumn;
  protected final ISchemaColumnDefinition currentColumn;
  protected final boolean modifyType;
  protected final boolean modifyDefault;
  protected final boolean modifyRequired;
  protected final boolean modifyAutoGenerated;

  /**
   * @param desiredColumn
   * @param modifyType
   * @param modifyDefault
   * @param modifyRequired
   */
  public ModifyColumnCommand(ISchemaColumnDefinition desiredColumn, ISchemaColumnDefinition currentColumn, boolean modifyType, boolean modifyDefault, boolean modifyRequired, boolean modifyAutoGenerated)
  {
    this.desiredColumn = desiredColumn;
    this.currentColumn = currentColumn;
    this.modifyType = modifyType; 
    this.modifyDefault = modifyDefault; 
    this.modifyRequired = modifyRequired;
    this.modifyAutoGenerated = modifyAutoGenerated;
  }

  /* (non-Javadoc)
   * @see de.tif.jacob.core.data.impl.schema.Command#getAlterTableModifyFragment(de.tif.jacob.core.data.impl.sql.SQLDataSource)
   */
  public String getAlterTableModifyFragment(SQLDataSource dataSource)
  {
    StringBuffer buffer = new StringBuffer("COLUMN ");
    dataSource.appendDBName(buffer, this.desiredColumn.getDBName());
    if (this.modifyType)
    {
      String dataType = dataSource.getSqlColumnType(
          this.desiredColumn.getSQLType(dataSource), 
          this.desiredColumn.getSQLSize(dataSource), 
          this.desiredColumn.getSQLDecimalDigits(dataSource));
      buffer.append(" ").append(dataType);
    }
    if (this.modifyRequired)
    {
      buffer.append(this.desiredColumn.isRequired() ? " NOT NULL" : " NULL");
    }
    if (this.modifyDefault)
    {
      String def = this.desiredColumn.getDBDefaultValue(dataSource);
      // IBIS: bitte überprüfen, ob dies mit NULL ok ist!
      buffer.append(" DEFAULT ").append(def == null ? "NULL" : escapeDefaultValue(dataSource, this.desiredColumn.getSQLType(dataSource), def));
    }
    return buffer.toString();
  }
  
  /* (non-Javadoc)
   * @see de.tif.jacob.core.data.impl.sql.reconfigure.Command#getSQLStatements(de.tif.jacob.core.data.impl.sql.SQLDataSource)
   */
//  public List getSQLStatements(SQLDataSource dataSource)
//  {
//    // just for Quintus!
//    if (dataSource.isQuintusAdjustment())
//    {
//      if (this.desiredColumn.isEnumeration())
//      {
//        List statements = new ArrayList();
//        statements.addAll(super.getSQLStatements(dataSource));
//
//        boolean diffsFound = true; 
//        if (this.currentColumn.isEnumeration())
//        {
//          diffsFound = checkQuintusEnumLabels(dataSource, this.desiredColumn, this.currentColumn, statements);
//        }
//
//        if (diffsFound)
//          AddColumnCommand.addQuintusEnumerationStatements(statements, this.currentColumn);
//
//        return statements;
//      }
//    }
//
//    return super.getSQLStatements(dataSource);
//  }
  
  /* (non-Javadoc)
   * @see java.lang.Object#toString()
   */
  public String toString()
  {
    StringBuffer buffer = new StringBuffer();
    buffer.append("MODIFY COLUMN ").append(this.desiredColumn.getDBName());
    if (this.modifyType)
      buffer.append(" NEW TYPE ").append(this.desiredColumn.getSQLType(SQLDataSource.TEST_INSTANCE));
    if (this.modifyDefault)
      buffer.append(" NEW DEFAULT ").append(this.desiredColumn.getDBDefaultValue(SQLDataSource.TEST_INSTANCE));
    if (this.modifyRequired)
      buffer.append(this.desiredColumn.isRequired() ? " NOT NULL" : " NULL");
    return buffer.toString();
  }
}
