/*******************************************************************************
 *    This file is part of Open-jACOB
 *    Copyright (C) 2005-2006 Tarragon GmbH
 * 
 *    This program is free software; you can redistribute it and/or modify
 *    it under the terms of the GNU General Public License as published by
 *    the Free Software Foundation; version 2 of the License.
 * 
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    GNU General Public License for more details.
 * 
 *    You should have received a copy of the GNU General Public License     
 *    along with this program; if not, write to the Free Software
 *    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  
 *    USA
 *******************************************************************************/

package de.tif.jacob.license.impl;

import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import de.tif.jacob.core.Bootstrap;
import de.tif.jacob.core.data.IDataAccessor;
import de.tif.jacob.core.data.IDataTable;
import de.tif.jacob.core.data.IDataTableRecord;
import de.tif.jacob.core.data.IDataTransaction;
import de.tif.jacob.core.data.impl.DataAccessor;
import de.tif.jacob.core.definition.impl.admin.AdminApplicationProvider;
import de.tif.jacob.deployment.DeployManager;
import de.tif.jacob.license.License;
import de.tif.jacob.license.LicenseException;
import de.tif.jacob.license.LicenseManager;

/**
 * @author andreas
 *
 */
public class DatabaseLicenseManager extends LicenseManager
{
  static public final transient String RCS_ID = "$Id: DatabaseLicenseManager.java,v 1.2 2007-05-02 16:23:27 sonntag Exp $";
  static public final transient String RCS_REV = "$Revision: 1.2 $";

  static private final Log logger = LogFactory.getLog(Bootstrap.class);
  
  private License license;
  private long lastFetchTime = 0;
  
  // fetch license key every minute from database
  private static final long FETCH_INTERVAL = 60*1000;

  public boolean hasValidLicense()
  {
    try
    {
      License license = getLicense();
      return license != null && !license.isExpired();
    }
    catch (LicenseException ex)
    {
      return false;
    }
  }

  /* (non-Javadoc)
   * @see de.tif.jacob.license.LicenseManager#fetchLicense()
   */
  public synchronized License fetchLicense() throws LicenseException
  {
    logger.debug("Fetching license key");
    
    String licenseString;
    try
    {
      licenseString = fetchLicenseKey();
    }
    catch (Exception e)
    {
      logger.warn("Error fetching license key", e);
      
      // return already cached license, if existing
      return this.license;
    }

    // invalidate license
    this.license = null;
    
    // verify license
    if (null != licenseString)
      this.license = LicenseVerifier.validateLicense(licenseString, Bootstrap.getWebInfConfPath() + "public.key");
    return this.license;
  }
  
  public synchronized License getLicense() throws LicenseException
  {
    long now = System.currentTimeMillis();
    
    // check whether we already have an license object and what the license object is actual (not older
    // than FETCH_INTERVAL millis), because a new license key might have been installed on a different
    // node of a jACOB cluster!
    if (this.license != null && now < this.lastFetchTime + FETCH_INTERVAL)
      return this.license;
    
    this.lastFetchTime = now;
    
    return fetchLicense();
  }
  
  private static String fetchLicenseKey() throws Exception
  {
    IDataAccessor accessor = new DataAccessor(AdminApplicationProvider.getApplication());
    
    // Note: license key for engine will be stored behind entry for admin application
    //       (which always comes with engine)
    IDataTable table = accessor.getTable("japplication");
    table.qbeSetKeyValue("name", DeployManager.ADMIN_APPLICATION_NAME);
    table.search();
    IDataTableRecord record = table.getSelectedRecord();
    return record.getStringValue("licensekey");
  }

  /**
   * The licenseKey should be passed in as generated by the Registration Server
   * 
   * @see de.tif.jacob.license.LicenseManager#setLicense(java.lang.String)
   */
  public synchronized void setLicense(String licenseKey) throws LicenseException
  {
    if(licenseKey==null)
      throw new RuntimeException("[null] is not a valid license key.");
    
    // In der derzeitigen Implementierung darf der Key vorne und hinten keine Leerzeichen haben
    //
    licenseKey = licenseKey.trim();
    
    // er darf auch keine Zeilenumbrüche enthalten. Dies kann vorkommen, wenn dieser per eMail
    // versendet wird und in das Eingabefeld mit copy&paste eingefügt wird
    // unix/windows/mac Clients können ein newLine unterschiedlich handhaben...
    Pattern CRLF = Pattern.compile("(\r\n|\r|\n|\n\r)");
    Matcher m = CRLF.matcher(licenseKey);
     
    if (m.find())
      licenseKey = m.replaceAll("");

    // validate license to make sure to only write valid licenses in database!
    validateLicense(licenseKey);
    
    IDataAccessor accessor = new DataAccessor(AdminApplicationProvider.getApplication());
    IDataTransaction transaction = accessor.newTransaction();
    try
    {
      // Note: license key for engine will be stored behind entry for admin application
      //       (which always comes with engine)
      IDataTable table = accessor.getTable("japplication");
      table.qbeSetKeyValue("name", DeployManager.ADMIN_APPLICATION_NAME);
      table.search();

      IDataTableRecord record = table.getSelectedRecord();
      record.setStringValue(transaction, "licensekey", licenseKey);

      transaction.commit();
      
      // enforce to create license object
      this.license = null;
    }
    catch (Exception e)
    {
      throw new RuntimeException("Unable to save license key", e);
    }
    finally
    {
      transaction.close();
    }
  }
  
  public License validateLicense(String licenseKey) throws LicenseException
  {
    return LicenseVerifier.validateLicense(licenseKey, Bootstrap.getWebInfConfPath() + "public.key");
  }

  public static void main(String[] args)
  {
    String licenseKey ="asdfasdf2q9p38r5zesd8ouvq f4\"§$%\"$%&%(//()435624764543q45++**##'" +
    		"\nund hier geht es weiter\rasdfasdf";
    System.out.println(licenseKey);
    Pattern CRLF = Pattern.compile("(\r\n|\r|\n|\n\r)");
    Matcher m = CRLF.matcher(licenseKey);
     
    if (m.find())
      licenseKey = m.replaceAll("");
    
    System.out.println("=========================================================");
    System.out.println(licenseKey);
  }
}
