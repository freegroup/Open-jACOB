/* The following code was generated by JFlex 1.3.5 on 23.02.11 12:46 */

/*
     This file is part of Open-jACOB
     Copyright (C) 2005-2006 Tarragon GmbH
  
     This program is free software; you can redistribute it and/or modify
     it under the terms of the GNU General Public License as published by
     the Free Software Foundation; version 2 of the License.
  
     This program is distributed in the hope that it will be useful,
     but WITHOUT ANY WARRANTY; without even the implied warranty of
     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     GNU General Public License for more details.
  
     You should have received a copy of the GNU General Public License     
     along with this program; if not, write to the Free Software
     Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  
     USA
*/

package de.tif.qes.adl;

import java_cup.runtime.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.3.5
 * on 23.02.11 12:46 from the specification file
 * <tt>file:/Users/andherz/Documents/workspace/jacob.engine/JFlex/adl.flex</tt>
 */
public class ADLScanner implements ADLSym, java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  final public static int YYEOF = -1;

  /** initial size of the lookahead buffer */
  final private static int YY_BUFFERSIZE = 16384;

  /** lexical states */
  final public static int STRINGLITERAL = 1;
  final public static int YYINITIAL = 0;

  /** 
   * Translates characters to character classes
   */
  final private static String yycmap_packed = 
    "\11\7\1\3\1\2\1\0\1\3\1\1\16\7\4\0\1\3\1\0"+
    "\1\65\1\0\1\6\3\0\1\56\1\57\1\5\1\11\1\63\1\11"+
    "\1\22\1\4\1\10\1\17\2\16\4\20\2\12\1\0\1\62\1\0"+
    "\1\64\3\0\1\34\1\41\1\46\1\37\1\26\1\40\1\53\1\44"+
    "\1\31\1\6\1\51\1\42\1\50\1\33\1\32\1\35\1\55\1\27"+
    "\1\30\1\36\1\45\1\25\1\43\1\54\1\47\1\52\1\0\1\24"+
    "\2\0\1\6\1\0\3\15\1\21\1\23\1\21\5\6\1\13\1\6"+
    "\1\67\3\6\1\70\1\6\1\66\3\6\1\14\2\6\1\60\1\0"+
    "\1\61\1\0\41\7\2\0\4\6\4\0\1\6\2\0\1\7\7\0"+
    "\1\6\4\0\1\6\5\0\27\6\1\0\37\6\1\0\u013f\6\31\0"+
    "\162\6\4\0\14\6\16\0\5\6\11\0\1\6\21\0\130\7\5\0"+
    "\23\7\12\0\1\6\13\0\1\6\1\0\3\6\1\0\1\6\1\0"+
    "\24\6\1\0\54\6\1\0\46\6\1\0\5\6\4\0\202\6\1\0"+
    "\4\7\3\0\105\6\1\0\46\6\2\0\2\6\6\0\20\6\41\0"+
    "\46\6\2\0\1\6\7\0\47\6\11\0\21\7\1\0\27\7\1\0"+
    "\3\7\1\0\1\7\1\0\2\7\1\0\1\7\13\0\33\6\5\0"+
    "\3\6\15\0\4\7\14\0\6\7\13\0\32\6\5\0\13\6\16\7"+
    "\7\0\12\7\4\0\2\6\1\7\143\6\1\0\1\6\10\7\1\0"+
    "\6\7\2\6\2\7\1\0\4\7\2\6\12\7\3\6\2\0\1\6"+
    "\17\0\1\7\1\6\1\7\36\6\33\7\2\0\3\6\60\0\46\6"+
    "\13\7\1\6\u014f\0\3\7\66\6\2\0\1\7\1\6\20\7\2\0"+
    "\1\6\4\7\3\0\12\6\2\7\2\0\12\7\21\0\3\7\1\0"+
    "\10\6\2\0\2\6\2\0\26\6\1\0\7\6\1\0\1\6\3\0"+
    "\4\6\2\0\1\7\1\6\7\7\2\0\2\7\2\0\3\7\11\0"+
    "\1\7\4\0\2\6\1\0\3\6\2\7\2\0\12\7\4\6\15\0"+
    "\3\7\1\0\6\6\4\0\2\6\2\0\26\6\1\0\7\6\1\0"+
    "\2\6\1\0\2\6\1\0\2\6\2\0\1\7\1\0\5\7\4\0"+
    "\2\7\2\0\3\7\13\0\4\6\1\0\1\6\7\0\14\7\3\6"+
    "\14\0\3\7\1\0\11\6\1\0\3\6\1\0\26\6\1\0\7\6"+
    "\1\0\2\6\1\0\5\6\2\0\1\7\1\6\10\7\1\0\3\7"+
    "\1\0\3\7\2\0\1\6\17\0\2\6\2\7\2\0\12\7\1\0"+
    "\1\6\17\0\3\7\1\0\10\6\2\0\2\6\2\0\26\6\1\0"+
    "\7\6\1\0\2\6\1\0\5\6\2\0\1\7\1\6\6\7\3\0"+
    "\2\7\2\0\3\7\10\0\2\7\4\0\2\6\1\0\3\6\4\0"+
    "\12\7\1\0\1\6\20\0\1\7\1\6\1\0\6\6\3\0\3\6"+
    "\1\0\4\6\3\0\2\6\1\0\1\6\1\0\2\6\3\0\2\6"+
    "\3\0\3\6\3\0\10\6\1\0\3\6\4\0\5\7\3\0\3\7"+
    "\1\0\4\7\11\0\1\7\17\0\11\7\11\0\1\6\7\0\3\7"+
    "\1\0\10\6\1\0\3\6\1\0\27\6\1\0\12\6\1\0\5\6"+
    "\4\0\7\7\1\0\3\7\1\0\4\7\7\0\2\7\11\0\2\6"+
    "\4\0\12\7\22\0\2\7\1\0\10\6\1\0\3\6\1\0\27\6"+
    "\1\0\12\6\1\0\5\6\2\0\1\7\1\6\7\7\1\0\3\7"+
    "\1\0\4\7\7\0\2\7\7\0\1\6\1\0\2\6\4\0\12\7"+
    "\22\0\2\7\1\0\10\6\1\0\3\6\1\0\27\6\1\0\20\6"+
    "\4\0\6\7\2\0\3\7\1\0\4\7\11\0\1\7\10\0\2\6"+
    "\4\0\12\7\22\0\2\7\1\0\22\6\3\0\30\6\1\0\11\6"+
    "\1\0\1\6\2\0\7\6\3\0\1\7\4\0\6\7\1\0\1\7"+
    "\1\0\10\7\22\0\2\7\15\0\60\6\1\7\2\6\7\7\4\0"+
    "\10\6\10\7\1\0\12\7\47\0\2\6\1\0\1\6\2\0\2\6"+
    "\1\0\1\6\2\0\1\6\6\0\4\6\1\0\7\6\1\0\3\6"+
    "\1\0\1\6\1\0\1\6\2\0\2\6\1\0\4\6\1\7\2\6"+
    "\6\7\1\0\2\7\1\6\2\0\5\6\1\0\1\6\1\0\6\7"+
    "\2\0\12\7\2\0\2\6\42\0\1\6\27\0\2\7\6\0\12\7"+
    "\13\0\1\7\1\0\1\7\1\0\1\7\4\0\2\7\10\6\1\0"+
    "\42\6\6\0\24\7\1\0\2\7\4\6\4\0\10\7\1\0\44\7"+
    "\11\0\1\7\71\0\42\6\1\0\5\6\1\0\2\6\1\0\7\7"+
    "\3\0\4\7\6\0\12\7\6\0\6\6\4\7\106\0\46\6\12\0"+
    "\51\6\7\0\132\6\5\0\104\6\5\0\122\6\6\0\7\6\1\0"+
    "\77\6\1\0\1\6\1\0\4\6\2\0\7\6\1\0\1\6\1\0"+
    "\4\6\2\0\47\6\1\0\1\6\1\0\4\6\2\0\37\6\1\0"+
    "\1\6\1\0\4\6\2\0\7\6\1\0\1\6\1\0\4\6\2\0"+
    "\7\6\1\0\7\6\1\0\27\6\1\0\37\6\1\0\1\6\1\0"+
    "\4\6\2\0\7\6\1\0\47\6\1\0\23\6\16\0\11\7\56\0"+
    "\125\6\14\0\u026c\6\2\0\10\6\12\0\32\6\5\0\113\6\3\0"+
    "\3\6\17\0\15\6\1\0\4\6\3\7\13\0\22\6\3\7\13\0"+
    "\22\6\2\7\14\0\15\6\1\0\3\6\1\0\2\7\14\0\64\6"+
    "\40\7\3\0\1\6\3\0\2\6\1\7\2\0\12\7\41\0\3\7"+
    "\2\0\12\7\6\0\130\6\10\0\51\6\1\7\126\0\35\6\3\0"+
    "\14\7\4\0\14\7\12\0\12\7\36\6\2\0\5\6\u038b\0\154\6"+
    "\224\0\234\6\4\0\132\6\6\0\26\6\2\0\6\6\2\0\46\6"+
    "\2\0\6\6\2\0\10\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\37\6\2\0\65\6\1\0\7\6\1\0\1\6\3\0\3\6"+
    "\1\0\7\6\3\0\4\6\2\0\6\6\4\0\15\6\5\0\3\6"+
    "\1\0\7\6\17\0\4\7\32\0\5\7\20\0\2\6\23\0\1\6"+
    "\13\0\4\7\6\0\6\7\1\0\1\6\15\0\1\6\40\0\22\6"+
    "\36\0\15\7\4\0\1\7\3\0\6\7\27\0\1\6\4\0\1\6"+
    "\2\0\12\6\1\0\1\6\3\0\5\6\6\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\4\6\1\0\3\6\1\0\7\6\3\0\3\6"+
    "\5\0\5\6\26\0\44\6\u0e81\0\3\6\31\0\11\6\6\7\1\0"+
    "\5\6\2\0\5\6\4\0\126\6\2\0\2\7\2\0\3\6\1\0"+
    "\137\6\5\0\50\6\4\0\136\6\21\0\30\6\70\0\20\6\u0200\0"+
    "\u19b6\6\112\0\u51a6\6\132\0\u048d\6\u0773\0\u2ba4\6\u215c\0\u012e\6\2\0"+
    "\73\6\225\0\7\6\14\0\5\6\5\0\1\6\1\7\12\6\1\0"+
    "\15\6\1\0\5\6\1\0\1\6\1\0\2\6\1\0\2\6\1\0"+
    "\154\6\41\0\u016b\6\22\0\100\6\2\0\66\6\50\0\15\6\3\0"+
    "\20\7\20\0\4\7\17\0\2\6\30\0\3\6\31\0\1\6\6\0"+
    "\5\6\1\0\207\6\2\0\1\7\4\0\1\6\13\0\12\7\7\0"+
    "\32\6\4\0\1\6\1\0\32\6\12\0\132\6\3\0\6\6\2\0"+
    "\6\6\2\0\6\6\2\0\3\6\3\0\2\6\3\0\2\6\22\0"+
    "\3\7\4\0";

  /** 
   * Translates characters to character classes
   */
  final private static char [] yycmap = yy_unpack_cmap(yycmap_packed);

  /** 
   * Translates a state to a row index in the transition table
   */
  final private static int yy_rowMap [] = { 
        0,    57,   114,   171,   114,   228,   285,   342,   399,   456, 
      513,   570,   627,   684,   741,   798,   855,   912,   969,  1026, 
     1083,  1140,  1197,  1254,  1311,  1368,  1425,  1482,  1539,  1596, 
     1653,  1710,   114,   114,   114,   114,   114,   114,   114,   114, 
     1767,  1824,   114,  1881,   114,  1938,  1995,  2052,  2109,   114, 
     2166,  2223,  2280,  2337,   114,  2394,  2451,  2508,  2565,  2622, 
     2679,  2736,  2793,  2850,  2907,  2964,  3021,  3078,  3135,  3192, 
     3249,  3306,  3363,  3420,  3477,   285,  3534,  3591,  3648,  3705, 
     3762,  3819,  3876,  3933,  3990,  4047,  4104,  4161,   285,  4218, 
     4275,  4332,  4389,  4446,  4503,  4560,  4617,  4674,  4731,  4788, 
     4845,  4902,  4959,  5016,  5073,  5130,  5187,  5244,  5301,  5358, 
     5415,  5472,  5529,  5586,  5643,  5700,  5757,  5814,  5871,  5928, 
     5985,  6042,   114,   114,   114,  6099,   114,  6156,  6213,  6270, 
     6327,  6384,  6441,  6498,  6555,  6612,  6669,  6726,  6783,  6840, 
     6897,  6954,  7011,  7068,   285,  7125,  7182,  7239,  7296,  7353, 
     7410,  7467,  7524,  7581,  7638,  7695,  7752,  7809,  7866,  7923, 
     7980,  8037,   285,  8094,   285,  8151,  8208,  8265,  8322,  8379, 
     8436,  8493,   285,  8550,  8607,  8664,  8721,  8778,  8835,  8892, 
     8949,  9006,  9063,  9120,  9177,  9234,  9291,  9348,  9405,  9462, 
     9519,  9576,  9633,  9690,  9747,  9804,  9861,  9918,  9975, 10032, 
    10089, 10146, 10203,   285, 10260, 10317, 10374, 10431, 10488, 10545, 
    10602,   285, 10659, 10716,   285, 10773,   285, 10830, 10887,   114, 
    10944, 11001, 11058, 11115, 11172,   285, 11229, 11286, 11343, 11400, 
    11457, 11514, 11571, 11628,   285,   285, 11685, 11742, 11799, 11856, 
    11913, 11970, 12027, 12084, 12141, 12198, 12255, 12312, 12369, 12426, 
    12483, 12540,   285, 12597,   285, 12654, 12711, 12768, 12825, 12882, 
    12939, 12996, 13053,   285, 13110, 13167,   285, 13224, 13281, 13338, 
    13395, 13452, 13509, 13566, 13623, 13680, 13737,   285,   285, 13794, 
    13851, 13908, 13965, 14022, 14079, 14136, 14193, 14250,   285, 14307, 
    14364, 14421,   285, 14478,   285, 14535, 14592, 14649, 14706, 14763, 
    14820, 14877, 14934, 14991, 15048,   285, 15105, 15162, 15219, 15276, 
    15333, 15390,   285, 15447, 15504, 15561, 15618, 15675, 15732, 15789, 
    15846, 15903,   285, 15960, 16017,   285, 16074, 16131, 16188, 16245, 
    16302,   285, 16359, 16416, 16473,   285, 16530,   285, 16587, 16644, 
    16701, 16758, 16815,   285, 16872, 16929,   285, 16986, 17043, 17100, 
    17157, 17214, 17271, 17328, 17385, 17442, 17499, 17556, 17613, 17670, 
    17727,   285, 17784, 17841,   285, 17898, 17955, 18012, 18069, 18126, 
    18183,   285,   285, 18240,   285, 18297, 18354, 18411, 18468, 18525, 
      285,   285, 18582, 18639, 18696, 18753, 18810, 18867, 18924, 18981, 
      285, 19038,   285, 19095, 19152,   285,   285,   285, 19209,   285, 
    19266,   285, 19323, 19380, 19437, 19494, 19551, 19608,   285, 19665, 
    19722, 19779, 19836, 19893, 19950, 20007, 20064, 20121, 20178, 20235, 
      285, 20292,   285,   285, 20349,   285, 20406, 20463, 20520, 20577, 
    20634, 20691, 20748, 20805, 20862, 20919,   285, 20976,   285,   285, 
    21033,   285, 21090, 21147, 21204, 21261, 21318, 21375, 21432, 21489, 
    21546,   285,   285, 21603, 21660, 21717, 21774, 21831, 21888, 21945, 
    22002, 22059,   285,   285, 22116,   285, 22173, 22230, 22287, 22344, 
    22401, 22458, 22515,   285, 22572, 22629, 22686,   285, 22743, 22800, 
    22857,   285, 22914,   285,   285, 22971,   285, 23028, 23085, 23142, 
    23199, 23256, 23313, 23370, 23427, 23484,   285, 23541, 23598, 23655, 
    23712,   285, 23769,   285, 23826, 23883, 23940, 23997, 24054,   285, 
    24111, 24168, 24225, 24282, 24339, 24396, 24453, 24510, 24567, 24624, 
    24681,   285,   285, 24738, 24795, 24852, 24909, 24966,   285,   285, 
    25023, 25080, 25137, 25194,   285,   285, 25251, 25308, 25365, 25422, 
    25479, 25536, 25593, 25650,   285,   285,   285, 25707, 25764, 25821, 
    25878, 25935, 25992,   285,   285, 26049, 26106, 26163,   285, 26220, 
    26277, 26334,   285, 26391, 26448, 26505, 26562, 26619, 26676,   285, 
      285, 26733, 26790,   285,   285, 26847, 26904, 26961,   285,   285, 
      285, 27018, 27075, 27132, 27189,   285, 27246, 27303, 27360, 27417, 
      285, 27474,   285,   285, 27531,   285, 27588, 27645, 27702, 27759, 
    27816, 27873, 27930, 27987, 28044, 28101, 28158, 28215,   285,   285, 
      285, 28272, 28329, 28386, 28443, 28500, 28557, 28614,   285,   285, 
    28671, 28728, 28785,   285,   285,   285, 28842, 28899, 28956, 29013, 
    29070, 29127, 29184, 29241, 29241, 29298, 29355, 29412, 29469, 29526, 
    29583
  };

  /** 
   * The packed transition table of the DFA (part 0)
   */
  final private static String yy_packed0 = 
    "\1\3\1\4\2\5\1\6\1\3\1\7\1\3\1\10"+
    "\1\11\1\12\3\7\3\12\1\7\1\13\1\7\1\3"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\7\1\36\1\37\2\7\1\40\1\7"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\3\7\1\51\1\52\1\53\21\51\1\54\40\51\1\55"+
    "\3\51\73\0\1\5\72\0\1\56\1\57\71\0\3\7"+
    "\1\0\10\7\1\0\1\7\1\0\31\7\10\0\3\7"+
    "\10\0\1\60\1\0\1\61\1\62\1\63\1\0\1\64"+
    "\1\65\1\66\1\67\1\70\1\71\2\0\1\71\10\0"+
    "\2\67\1\0\1\62\11\0\1\63\26\0\1\72\3\0"+
    "\3\72\60\0\1\12\1\0\1\12\1\62\2\0\3\12"+
    "\1\67\1\70\1\71\2\0\1\71\10\0\2\67\1\0"+
    "\1\62\36\0\1\70\1\0\1\70\3\0\3\70\56\0"+
    "\3\7\1\0\10\7\1\0\1\7\1\0\1\7\1\73"+
    "\1\7\1\74\25\7\10\0\3\7\6\0\3\7\1\0"+
    "\10\7\1\0\1\7\1\0\6\7\1\75\3\7\1\76"+
    "\16\7\10\0\3\7\6\0\3\7\1\0\10\7\1\0"+
    "\1\7\1\0\1\7\1\77\16\7\1\100\10\7\10\0"+
    "\3\7\6\0\3\7\1\0\10\7\1\0\1\7\1\0"+
    "\1\7\1\101\2\7\1\102\2\7\1\103\1\7\1\104"+
    "\5\7\1\105\1\106\1\107\1\110\6\7\10\0\3\7"+
    "\6\0\3\7\1\0\10\7\1\0\1\7\1\0\6\7"+
    "\1\111\22\7\10\0\3\7\6\0\3\7\1\0\10\7"+
    "\1\0\1\7\1\0\2\7\1\112\3\7\1\113\4\7"+
    "\1\114\15\7\10\0\3\7\6\0\3\7\1\0\10\7"+
    "\1\0\1\7\1\0\1\7\1\115\3\7\1\116\12\7"+
    "\1\117\10\7\10\0\3\7\6\0\3\7\1\0\10\7"+
    "\1\0\1\7\1\0\3\7\1\120\2\7\1\121\1\7"+
    "\1\122\2\7\1\123\1\7\1\124\13\7\10\0\3\7"+
    "\6\0\3\7\1\0\10\7\1\0\1\7\1\0\1\7"+
    "\1\125\1\126\26\7\10\0\3\7\6\0\3\7\1\0"+
    "\10\7\1\0\1\7\1\0\1\7\1\127\2\7\1\130"+
    "\1\131\1\7\1\132\12\7\1\133\6\7\10\0\3\7"+
    "\6\0\3\7\1\0\10\7\1\0\1\7\1\0\1\7"+
    "\1\134\2\7\1\135\1\136\1\7\1\137\12\7\1\140"+
    "\6\7\10\0\3\7\6\0\3\7\1\0\10\7\1\0"+
    "\1\7\1\0\2\7\1\141\1\7\1\142\1\143\7\7"+
    "\1\144\13\7\10\0\3\7\6\0\3\7\1\0\10\7"+
    "\1\0\1\7\1\0\1\7\1\145\1\146\1\7\1\147"+
    "\2\7\1\150\12\7\1\151\6\7\10\0\3\7\6\0"+
    "\3\7\1\0\10\7\1\0\1\7\1\0\1\7\1\152"+
    "\3\7\1\153\1\7\1\154\21\7\10\0\3\7\6\0"+
    "\3\7\1\0\10\7\1\0\1\7\1\0\1\7\1\155"+
    "\1\156\1\7\1\157\24\7\10\0\3\7\6\0\3\7"+
    "\1\0\10\7\1\0\1\7\1\0\4\7\1\160\24\7"+
    "\10\0\3\7\6\0\3\7\1\0\10\7\1\0\1\7"+
    "\1\0\3\7\1\161\2\7\1\162\22\7\10\0\3\7"+
    "\6\0\3\7\1\0\10\7\1\0\1\7\1\0\5\7"+
    "\1\163\1\7\1\164\21\7\10\0\3\7\6\0\3\7"+
    "\1\0\10\7\1\0\1\7\1\0\4\7\1\165\1\166"+
    "\1\7\1\167\1\7\1\170\17\7\10\0\3\7\6\0"+
    "\3\7\1\0\10\7\1\0\1\7\1\0\1\7\1\171"+
    "\27\7\10\0\3\7\6\0\3\7\1\0\10\7\1\0"+
    "\1\7\1\0\23\7\1\172\5\7\10\0\3\7\1\51"+
    "\2\0\21\51\1\0\40\51\1\0\3\51\2\0\1\53"+
    "\154\0\1\173\1\174\1\175\1\56\1\4\1\5\66\56"+
    "\71\176\10\0\1\60\1\0\1\61\1\177\2\0\1\64"+
    "\1\65\1\66\1\67\1\70\1\71\2\0\1\71\10\0"+
    "\2\67\1\0\1\177\36\0\1\61\1\0\1\61\3\0"+
    "\3\61\1\67\1\70\1\71\2\0\1\71\10\0\2\67"+
    "\40\0\1\200\1\0\1\201\2\0\5\201\1\0\1\201"+
    "\2\0\1\201\5\0\1\201\2\0\3\201\4\0\1\201"+
    "\32\0\1\202\1\0\1\61\1\177\2\0\3\202\1\67"+
    "\1\70\1\71\2\0\1\71\10\0\2\67\1\0\1\177"+
    "\36\0\1\66\1\0\1\61\1\177\2\0\3\66\1\67"+
    "\1\70\1\71\2\0\1\71\10\0\2\67\1\0\1\177"+
    "\36\0\1\203\1\0\1\61\1\177\2\0\3\203\1\67"+
    "\1\70\1\71\2\0\1\71\10\0\2\67\1\0\1\177"+
    "\36\0\1\70\1\0\1\70\3\0\3\70\1\67\1\0"+
    "\1\71\2\0\1\71\10\0\2\67\40\0\1\204\1\205"+
    "\1\204\3\0\3\204\60\0\1\72\1\0\1\72\1\62"+
    "\2\0\3\72\21\0\1\62\34\0\3\7\1\0\10\7"+
    "\1\0\1\7\1\0\2\7\1\206\26\7\10\0\3\7"+
    "\6\0\3\7\1\0\10\7\1\0\1\7\1\0\11\7"+
    "\1\207\17\7\10\0\3\7\6\0\3\7\1\0\10\7"+
    "\1\0\1\7\1\0\20\7\1\210\10\7\10\0\3\7"+
    "\6\0\3\7\1\0\10\7\1\0\1\7\1\0\26\7"+
    "\1\211\2\7\10\0\3\7\6\0\3\7\1\0\10\7"+
    "\1\0\1\7\1\0\7\7\1\212\1\213\4\7\1\214"+
    "\5\7\1\215\4\7\1\216\10\0\3\7\6\0\3\7"+
    "\1\0\10\7\1\0\1\7\1\0\15\7\1\217\13\7"+
    "\10\0\3\7\6\0\3\7\1\0\10\7\1\0\1\7"+
    "\1\0\2\7\1\220\6\7\1\221\17\7\10\0\3\7"+
    "\6\0\3\7\1\0\10\7\1\0\1\7\1\0\25\7"+
    "\1\222\3\7\10\0\3\7\6\0\3\7\1\0\10\7"+
    "\1\0\1\7\1\0\23\7\1\223\5\7\10\0\3\7"+
    "\6\0\3\7\1\0\10\7\1\0\1\7\1\0\2\7"+
    "\1\224\4\7\1\225\21\7\10\0\3\7\6\0\3\7"+
    "\1\0\10\7\1\0\1\7\1\0\5\7\1\226\23\7"+
    "\10\0\3\7\6\0\3\7\1\0\10\7\1\0\1\7"+
    "\1\0\23\7\1\227\5\7\10\0\3\7\6\0\3\7"+
    "\1\0\10\7\1\0\1\7\1\0\2\7\1\230\4\7"+
    "\1\231\21\7\10\0\3\7\6\0\3\7\1\0\10\7"+
    "\1\0\1\7\1\0\3\7\1\232\17\7\1\233\5\7"+
    "\10\0\3\7\6\0\3\7\1\0\10\7\1\0\1\7"+
    "\1\0\1\234\10\7\1\235\1\236\1\237\5\7\1\240"+
    "\7\7\10\0\3\7\6\0\3\7\1\0\10\7\1\0"+
    "\1\7\1\0\12\7\1\241\16\7\10\0\3\7\6\0"+
    "\3\7\1\0\10\7\1\0\1\7\1\0\1\7\1\242"+
    "\27\7\10\0\3\7\6\0\3\7\1\0\10\7\1\0"+
    "\1\7\1\0\16\7\1\243\12\7\10\0\3\7\6\0"+
    "\3\7\1\0\10\7\1\0\1\7\1\0\6\7\1\244"+
    "\2\7\1\245\1\246\16\7\10\0\3\7\6\0\3\7"+
    "\1\0\10\7\1\0\1\7\1\0\15\7\1\247\13\7"+
    "\10\0\3\7\6\0\3\7\1\0\10\7\1\0\1\7"+
    "\1\0\21\7\1\250\7\7\10\0\3\7\6\0\3\7"+
    "\1\0\10\7\1\0\1\7\1\0\21\7\1\251\7\7"+
    "\10\0\3\7\6\0\3\7\1\0\10\7\1\0\1\7"+
    "\1\0\10\7\1\252\20\7\10\0\3\7\6\0\3\7"+
    "\1\0\10\7\1\0\1\7\1\0\11\7\1\253\17\7"+
    "\10\0\3\7\6\0\3\7\1\0\10\7\1\0\1\7"+
    "\1\0\4\7\1\254\10\7\1\255\13\7\10\0\3\7"+
    "\6\0\3\7\1\0\10\7\1\0\1\7\1\0\2\7"+
    "\1\256\26\7\10\0\3\7\6\0\3\7\1\0\10\7"+
    "\1\0\1\7\1\0\4\7\1\257\24\7\10\0\3\7"+
    "\6\0\3\7\1\0\10\7\1\0\1\7\1\0\27\7"+
    "\1\260\1\7\10\0\3\7\6\0\3\7\1\0\10\7"+
    "\1\0\1\7\1\0\11\7\1\261\17\7\10\0\3\7"+
    "\6\0\3\7\1\0\10\7\1\0\1\7\1\0\14\7"+
    "\1\262\14\7\10\0\3\7\6\0\3\7\1\0\10\7"+
    "\1\0\1\7\1\0\10\7\1\263\20\7\10\0\3\7"+
    "\6\0\3\7\1\0\10\7\1\0\1\7\1\0\3\7"+
    "\1\264\7\7\1\265\1\7\1\266\13\7\10\0\3\7"+
    "\6\0\3\7\1\0\10\7\1\0\1\7\1\0\2\7"+
    "\1\267\1\270\25\7\10\0\3\7\6\0\3\7\1\0"+
    "\10\7\1\0\1\7\1\0\20\7\1\271\10\7\10\0"+
    "\3\7\6\0\3\7\1\0\10\7\1\0\1\7\1\0"+
    "\11\7\1\272\17\7\10\0\3\7\6\0\3\7\1\0"+
    "\10\7\1\0\1\7\1\0\6\7\1\273\22\7\10\0"+
    "\3\7\6\0\3\7\1\0\10\7\1\0\1\7\1\0"+
    "\5\7\1\274\23\7\10\0\3\7\6\0\3\7\1\0"+
    "\10\7\1\0\1\7\1\0\15\7\1\275\13\7\10\0"+
    "\3\7\6\0\3\7\1\0\10\7\1\0\1\7\1\0"+
    "\2\7\1\276\26\7\10\0\3\7\6\0\3\7\1\0"+
    "\10\7\1\0\1\7\1\0\5\7\1\277\23\7\10\0"+
    "\3\7\6\0\3\7\1\0\10\7\1\0\1\7\1\0"+
    "\13\7\1\300\15\7\10\0\3\7\6\0\3\7\1\0"+
    "\10\7\1\0\1\7\1\0\5\7\1\301\23\7\10\0"+
    "\3\7\6\0\3\7\1\0\10\7\1\0\1\7\1\0"+
    "\6\7\1\302\22\7\10\0\3\7\6\0\3\7\1\0"+
    "\10\7\1\0\1\7\1\0\21\7\1\303\7\7\10\0"+
    "\3\7\6\0\3\7\1\0\10\7\1\0\1\7\1\0"+
    "\11\7\1\304\17\7\10\0\3\7\6\0\3\7\1\0"+
    "\10\7\1\0\1\7\1\0\6\7\1\305\22\7\10\0"+
    "\3\7\6\0\3\7\1\0\10\7\1\0\1\7\1\0"+
    "\21\7\1\306\7\7\10\0\3\7\6\0\3\7\1\0"+
    "\10\7\1\0\1\7\1\0\14\7\1\307\14\7\10\0"+
    "\3\7\6\0\3\7\1\0\10\7\1\0\1\7\1\0"+
    "\14\7\1\310\14\7\10\0\3\7\6\0\3\7\1\0"+
    "\10\7\1\0\1\7\1\0\4\7\1\311\24\7\10\0"+
    "\3\7\6\0\3\7\1\0\10\7\1\0\1\7\1\0"+
    "\11\7\1\312\17\7\10\0\3\7\6\0\3\7\1\0"+
    "\10\7\1\0\1\7\1\0\3\7\1\313\25\7\10\0"+
    "\3\7\6\0\3\7\1\0\10\7\1\0\1\7\1\0"+
    "\1\7\1\314\2\7\1\315\24\7\10\0\3\7\6\0"+
    "\3\7\1\0\10\7\1\0\1\7\1\0\4\7\1\316"+
    "\24\7\10\0\3\7\6\0\3\7\1\0\10\7\1\0"+
    "\1\7\1\0\6\7\1\317\6\7\1\320\13\7\10\0"+
    "\3\7\6\0\3\7\1\0\10\7\1\0\1\7\1\0"+
    "\3\7\1\321\5\7\1\322\7\7\1\323\7\7\10\0"+
    "\3\7\6\0\3\7\1\0\10\7\1\0\1\7\1\0"+
    "\6\7\1\324\22\7\10\0\3\7\6\0\3\7\1\0"+
    "\10\7\1\0\1\7\1\0\6\7\1\325\3\7\1\326"+
    "\16\7\10\0\3\7\6\0\3\7\1\0\10\7\1\0"+
    "\1\7\1\0\27\7\1\327\1\7\10\0\3\7\6\0"+
    "\3\7\1\0\10\7\1\0\1\7\1\0\5\7\1\330"+
    "\23\7\10\0\3\7\6\0\3\7\1\0\10\7\1\0"+
    "\1\7\1\0\22\7\1\331\6\7\10\0\3\7\6\0"+
    "\3\7\1\0\10\7\1\0\1\7\1\0\15\7\1\332"+
    "\13\7\10\0\3\7\5\176\1\333\63\176\10\0\1\200"+
    "\1\0\1\201\1\334\1\0\5\201\1\0\1\201\2\0"+
    "\1\201\5\0\1\201\2\0\3\201\1\334\3\0\1\201"+
    "\32\0\1\335\1\0\1\335\1\334\1\0\5\335\1\0"+
    "\1\335\2\0\1\335\5\0\1\335\2\0\3\335\1\334"+
    "\3\0\1\335\32\0\1\336\1\0\1\61\1\177\2\0"+
    "\3\336\1\67\1\70\1\71\2\0\1\71\10\0\2\67"+
    "\1\0\1\177\36\0\1\337\1\0\1\61\1\177\2\0"+
    "\3\337\1\67\1\70\1\71\2\0\1\71\10\0\2\67"+
    "\1\0\1\177\36\0\1\204\1\0\1\204\3\0\3\204"+
    "\1\67\15\0\2\67\40\0\1\204\1\0\1\204\3\0"+
    "\3\204\56\0\3\7\1\0\10\7\1\0\1\7\1\0"+
    "\3\7\1\340\25\7\10\0\3\7\6\0\3\7\1\0"+
    "\10\7\1\0\1\7\1\0\2\7\1\341\26\7\10\0"+
    "\3\7\6\0\3\7\1\0\10\7\1\0\1\7\1\0"+
    "\23\7\1\342\5\7\10\0\3\7\6\0\3\7\1\0"+
    "\10\7\1\0\1\7\1\0\1\7\1\343\27\7\10\0"+
    "\3\7\6\0\3\7\1\0\10\7\1\0\1\7\1\0"+
    "\12\7\1\344\16\7\10\0\3\7\6\0\3\7\1\0"+
    "\10\7\1\0\1\7\1\0\1\7\1\345\27\7\10\0"+
    "\3\7\6\0\3\7\1\0\10\7\1\0\1\7\1\0"+
    "\7\7\1\346\21\7\10\0\3\7\6\0\3\7\1\0"+
    "\10\7\1\0\1\7\1\0\5\7\1\347\23\7\10\0"+
    "\3\7\6\0\3\7\1\0\10\7\1\0\1\7\1\0"+
    "\20\7\1\350\10\7\10\0\3\7\6\0\3\7\1\0"+
    "\10\7\1\0\1\7\1\0\1\7\1\351\27\7\10\0"+
    "\3\7\6\0\3\7\1\0\10\7\1\0\1\7\1\0"+
    "\4\7\1\352\24\7\10\0\3\7\6\0\3\7\1\0"+
    "\10\7\1\0\1\7\1\0\1\7\1\353\27\7\10\0"+
    "\3\7\6\0\3\7\1\0\10\7\1\0\1\7\1\0"+
    "\1\7\1\354\27\7\10\0\3\7\6\0\3\7\1\0"+
    "\10\7\1\0\1\7\1\0\4\7\1\355\24\7\10\0"+
    "\3\7\6\0\3\7\1\0\10\7\1\0\1\7\1\0"+
    "\11\7\1\356\17\7\10\0\3\7\6\0\3\7\1\0"+
    "\10\7\1\0\1\7\1\0\2\7\1\357\26\7\10\0"+
    "\3\7\6\0\3\7\1\0\10\7\1\0\1\7\1\0"+
    "\23\7\1\360\5\7\10\0\3\7\6\0\3\7\1\0"+
    "\10\7\1\0\1\7\1\0\4\7\1\361\24\7\10\0"+
    "\3\7\6\0\3\7\1\0\10\7\1\0\1\7\1\0"+
    "\15\7\1\362\13\7\10\0\3\7\6\0\3\7\1\0"+
    "\10\7\1\0\1\7\1\0\11\7\1\363\17\7\10\0"+
    "\3\7\6\0\3\7\1\0\10\7\1\0\1\7\1\0"+
    "\14\7\1\364\14\7\10\0\3\7\6\0\3\7\1\0"+
    "\10\7\1\0\1\7\1\0\4\7\1\365\24\7\10\0"+
    "\3\7\6\0\3\7\1\0\10\7\1\0\1\7\1\0"+
    "\1\7\1\366\27\7\10\0\3\7\6\0\3\7\1\0"+
    "\10\7\1\0\1\7\1\0\1\7\1\367\27\7\10\0"+
    "\3\7\6\0\3\7\1\0\10\7\1\0\1\7\1\0"+
    "\2\7\1\370\2\7\1\371\23\7\10\0\3\7\6\0"+
    "\3\7\1\0\10\7\1\0\1\7\1\0\15\7\1\372"+
    "\13\7\10\0\3\7\6\0\3\7\1\0\10\7\1\0"+
    "\1\7\1\0\1\7\1\373\27\7\10\0\3\7\6\0"+
    "\3\7\1\0\10\7\1\0\1\7\1\0\11\7\1\374"+
    "\17\7\10\0\3\7\6\0\3\7\1\0\10\7\1\0"+
    "\1\7\1\0\1\7\1\375\27\7\10\0\3\7\6\0"+
    "\3\7\1\0\10\7\1\0\1\7\1\0\1\7\1\376"+
    "\27\7\10\0\3\7\6\0\3\7\1\0\10\7\1\0"+
    "\1\7\1\0\15\7\1\377\13\7\10\0\3\7\6\0"+
    "\3\7\1\0\10\7\1\0\1\7\1\0\1\7\1\u0100"+
    "\27\7\10\0\3\7\6\0\3\7\1\0\10\7\1\0"+
    "\1\7\1\0\17\7\1\u0101\11\7\10\0\3\7\6\0"+
    "\3\7\1\0\10\7\1\0\1\7\1\0\1\u0102\14\7"+
    "\1\u0103\13\7\10\0\3\7\6\0\3\7\1\0\10\7"+
    "\1\0\1\7\1\0\1\7\1\u0104\27\7\10\0\3\7"+
    "\6\0\3\7\1\0\10\7\1\0\1\7\1\0\7\7"+
    "\1\u0105\21\7\10\0\3\7\6\0\3\7\1\0\10\7"+
    "\1\0\1\7\1\0\23\7\1\u0106\5\7\10\0\3\7"+
    "\6\0\3\7\1\0\10\7\1\0\1\7\1\0\23\7"+
    "\1\u0107\5\7\10\0\3\7\6\0\3\7\1\0\10\7"+
    "\1\0\1\7\1\0\11\7\1\u0108\17\7\10\0\3\7"+
    "\6\0\3\7\1\0\10\7\1\0\1\7\1\0\15\7"+
    "\1\u0109\13\7\10\0\3\7\6\0\3\7\1\0\10\7"+
    "\1\0\1\7\1\0\15\7\1\u010a\13\7\10\0\3\7"+
    "\6\0\3\7\1\0\10\7\1\0\1\7\1\0\1\7"+
    "\1\u010b\27\7\10\0\3\7\6\0\3\7\1\0\10\7"+
    "\1\0\1\7\1\0\21\7\1\u010c\7\7\10\0\3\7"+
    "\6\0\3\7\1\0\10\7\1\0\1\7\1\0\4\7"+
    "\1\u010d\2\7\1\u010e\21\7\10\0\3\7\6\0\3\7"+
    "\1\0\10\7\1\0\1\7\1\0\1\7\1\u010f\27\7"+
    "\10\0\3\7\6\0\3\7\1\0\10\7\1\0\1\7"+
    "\1\0\1\7\1\u0110\27\7\10\0\3\7\6\0\3\7"+
    "\1\0\10\7\1\0\1\7\1\0\7\7\1\u0111\21\7"+
    "\10\0\3\7\6\0\3\7\1\0\10\7\1\0\1\7"+
    "\1\0\14\7\1\u0112\14\7\10\0\3\7\6\0\3\7"+
    "\1\0\10\7\1\0\1\7\1\0\1\7\1\u0113\5\7"+
    "\1\u0114\21\7\10\0\3\7\6\0\3\7\1\0\10\7"+
    "\1\0\1\7\1\0\7\7\1\u0115\21\7\10\0\3\7"+
    "\6\0\3\7\1\0\10\7\1\0\1\7\1\0\23\7"+
    "\1\u0116\5\7\10\0\3\7\6\0\3\7\1\0\10\7"+
    "\1\0\1\7\1\0\1\7\1\u0117\13\7\1\u0118\13\7"+
    "\10\0\3\7\6\0\3\7\1\0\10\7\1\0\1\7"+
    "\1\0\1\7\1\u0119\14\7\1\u011a\4\7\1\u011b\5\7"+
    "\10\0\3\7\6\0\3\7\1\0\10\7\1\0\1\7"+
    "\1\0\7\7\1\u011c\21\7\10\0\3\7\6\0\3\7"+
    "\1\0\10\7\1\0\1\7\1\0\5\7\1\u011d\23\7"+
    "\10\0\3\7\6\0\3\7\1\0\10\7\1\0\1\7"+
    "\1\0\16\7\1\u011e\12\7\10\0\3\7\6\0\3\7"+
    "\1\0\10\7\1\0\1\7\1\0\7\7\1\u011f\21\7"+
    "\10\0\3\7\6\0\3\7\1\0\10\7\1\0\1\7"+
    "\1\0\24\7\1\u0120\4\7\10\0\3\7\6\0\3\7"+
    "\1\0\10\7\1\0\1\7\1\0\1\7\1\u0121\27\7"+
    "\10\0\3\7\6\0\3\7\1\0\10\7\1\0\1\7"+
    "\1\0\26\7\1\u0122\2\7\10\0\3\7\6\0\3\7"+
    "\1\0\10\7\1\0\1\7\1\0\24\7\1\u0123\4\7"+
    "\10\0\3\7\6\0\3\7\1\0\10\7\1\0\1\7"+
    "\1\0\1\7\1\u0124\27\7\10\0\3\7\6\0\3\7"+
    "\1\0\10\7\1\0\1\7\1\0\30\7\1\u0125\10\0"+
    "\3\7\6\0\3\7\1\0\10\7\1\0\1\7\1\0"+
    "\11\7\1\u0126\17\7\10\0\3\7\6\0\3\7\1\0"+
    "\10\7\1\0\1\7\1\0\17\7\1\u0127\11\7\10\0"+
    "\3\7\6\0\3\7\1\0\10\7\1\0\1\7\1\0"+
    "\11\7\1\u0128\17\7\10\0\3\7\6\0\3\7\1\0"+
    "\10\7\1\0\1\7\1\0\6\7\1\u0129\22\7\10\0"+
    "\3\7\6\0\3\7\1\0\10\7\1\0\1\7\1\0"+
    "\30\7\1\u012a\10\0\3\7\6\0\3\7\1\0\10\7"+
    "\1\0\1\7\1\0\12\7\1\u012b\16\7\10\0\3\7"+
    "\6\0\3\7\1\0\10\7\1\0\1\7\1\0\3\7"+
    "\1\u012c\25\7\10\0\3\7\6\0\3\7\1\0\10\7"+
    "\1\0\1\7\1\0\1\7\1\u012d\27\7\10\0\3\7"+
    "\6\0\3\7\1\0\10\7\1\0\1\7\1\0\1\7"+
    "\1\u012e\27\7\10\0\3\7\6\0\3\7\1\0\10\7"+
    "\1\0\1\7\1\0\17\7\1\u012f\11\7\10\0\3\7"+
    "\6\0\3\7\1\0\10\7\1\0\1\7\1\0\1\7"+
    "\1\u0130\27\7\10\0\3\7\6\0\3\7\1\0\10\7"+
    "\1\0\1\7\1\0\20\7\1\u0131\10\7\10\0\3\7"+
    "\6\0\3\7\1\0\10\7\1\0\1\7\1\0\6\7"+
    "\1\u0132\22\7\10\0\3\7\6\0\3\7\1\0\10\7"+
    "\1\0\1\7\1\0\13\7\1\u0133\15\7\10\0\3\7"+
    "\4\176\1\5\1\333\63\176\10\0\1\u0134\1\0\1\u0134"+
    "\1\334\1\0\5\u0134\1\0\1\u0134\2\0\1\u0134\5\0"+
    "\1\u0134\2\0\3\u0134\1\334\3\0\1\u0134\32\0\1\u0135"+
    "\1\0\1\61\1\177\2\0\3\u0135\1\67\1\70\1\71"+
    "\2\0\1\71\10\0\2\67\1\0\1\177\36\0\1\u0136"+
    "\1\0\1\61\1\177\2\0\3\u0136\1\67\1\70\1\71"+
    "\2\0\1\71\10\0\2\67\1\0\1\177\34\0\3\7"+
    "\1\0\10\7\1\0\1\7\1\0\4\7\1\u0137\24\7"+
    "\10\0\3\7\6\0\3\7\1\0\10\7\1\0\1\7"+
    "\1\0\4\7\1\u0138\24\7\10\0\3\7\6\0\3\7"+
    "\1\0\10\7\1\0\1\7\1\0\3\7\1\u0139\25\7"+
    "\10\0\3\7\6\0\3\7\1\0\10\7\1\0\1\7"+
    "\1\0\5\7\1\u013a\23\7\10\0\3\7\6\0\3\7"+
    "\1\0\10\7\1\0\1\7\1\0\7\7\1\u013b\21\7"+
    "\10\0\3\7\6\0\3\7\1\0\10\7\1\0\1\7"+
    "\1\0\11\7\1\u013c\17\7\10\0\3\7\6\0\3\7"+
    "\1\0\10\7\1\0\1\7\1\0\1\u013d\30\7\10\0"+
    "\3\7\6\0\3\7\1\0\10\7\1\0\1\7\1\0"+
    "\4\7\1\u013e\24\7\10\0\3\7\6\0\3\7\1\0"+
    "\10\7\1\0\1\7\1\0\3\7\1\u013f\25\7\10\0"+
    "\3\7\6\0\3\7\1\0\10\7\1\0\1\7\1\0"+
    "\7\7\1\u0140\21\7\10\0\3\7\6\0\3\7\1\0"+
    "\10\7\1\0\1\7\1\0\6\7\1\u0141\22\7\10\0"+
    "\3\7\6\0\3\7\1\0\10\7\1\0\1\7\1\0"+
    "\4\7\1\u0142\24\7\10\0\3\7\6\0\3\7\1\0"+
    "\10\7\1\0\1\7\1\0\11\7\1\u0143\17\7\10\0"+
    "\3\7\6\0\3\7\1\0\10\7\1\0\1\7\1\0"+
    "\7\7\1\u0144\21\7\10\0\3\7\6\0\3\7\1\0"+
    "\10\7\1\0\1\7\1\0\10\7\1\u0145\20\7\10\0"+
    "\3\7\6\0\3\7\1\0\10\7\1\0\1\7\1\0"+
    "\1\7\1\u0146\27\7\10\0\3\7\6\0\3\7\1\0"+
    "\10\7\1\0\1\7\1\0\1\7\1\u0147\27\7\10\0"+
    "\3\7\6\0\3\7\1\0\10\7\1\0\1\7\1\0"+
    "\5\7\1\u0148\23\7\10\0\3\7\6\0\3\7\1\0"+
    "\10\7\1\0\1\7\1\0\3\7\1\u0149\25\7\10\0"+
    "\3\7\6\0\3\7\1\0\10\7\1\0\1\7\1\0"+
    "\2\7\1\u014a\23\7\1\u014b\2\7\10\0\3\7\6\0"+
    "\3\7\1\0\10\7\1\0\1\7\1\0\27\7\1\u014c"+
    "\1\7\10\0\3\7\6\0\3\7\1\0\10\7\1\0"+
    "\1\7\1\0\7\7\1\u014d\21\7\10\0\3\7\6\0"+
    "\3\7\1\0\10\7\1\0\1\7\1\0\13\7\1\u014e"+
    "\15\7\10\0\3\7\6\0\3\7\1\0\10\7\1\0"+
    "\1\7\1\0\20\7\1\u014f\10\7\10\0\3\7\6\0"+
    "\3\7\1\0\10\7\1\0\1\7\1\0\2\7\1\u0150"+
    "\26\7\10\0\3\7\6\0\3\7\1\0\10\7\1\0"+
    "\1\7\1\0\5\7\1\u0151\23\7\10\0\3\7\6\0"+
    "\3\7\1\0\10\7\1\0\1\7\1\0\3\7\1\u0152"+
    "\25\7\10\0\3\7\6\0\3\7\1\0\10\7\1\0"+
    "\1\7\1\0\6\7\1\u0153\22\7\10\0\3\7\6\0"+
    "\3\7\1\0\10\7\1\0\1\7\1\0\5\7\1\u0154"+
    "\23\7\10\0\3\7\6\0\3\7\1\0\10\7\1\0"+
    "\1\7\1\0\1\7\1\u0155\27\7\10\0\3\7\6\0"+
    "\3\7\1\0\10\7\1\0\1\7\1\0\4\7\1\u0156"+
    "\24\7\10\0\3\7\6\0\3\7\1\0\10\7\1\0"+
    "\1\7\1\0\2\7\1\u0157\26\7\10\0\3\7\6\0"+
    "\3\7\1\0\10\7\1\0\1\7\1\0\3\7\1\u0158"+
    "\25\7\10\0\3\7\6\0\3\7\1\0\10\7\1\0"+
    "\1\7\1\0\4\7\1\u0159\24\7\10\0\3\7\6\0"+
    "\3\7\1\0\10\7\1\0\1\7\1\0\7\7\1\u015a"+
    "\21\7\10\0\3\7\6\0\3\7\1\0\10\7\1\0"+
    "\1\7\1\0\1\7\1\u015b\27\7\10\0\3\7\6\0"+
    "\3\7\1\0\10\7\1\0\1\7\1\0\1\7\1\u015c"+
    "\27\7\10\0\3\7\6\0\3\7\1\0\10\7\1\0"+
    "\1\7\1\0\1\7\1\u015d\27\7\10\0\3\7\6\0"+
    "\3\7\1\0\10\7\1\0\1\7\1\0\6\7\1\u015e"+
    "\22\7\10\0\3\7\6\0\3\7\1\0\10\7\1\0"+
    "\1\7\1\0\20\7\1\u015f\10\7\10\0\3\7\6\0"+
    "\3\7\1\0\10\7\1\0\1\7\1\0\11\7\1\u0160"+
    "\17\7\10\0\3\7\6\0\3\7\1\0\10\7\1\0"+
    "\1\7\1\0\21\7\1\u0161\7\7\10\0\3\7\6\0"+
    "\3\7\1\0\10\7\1\0\1\7\1\0\14\7\1\u0162"+
    "\14\7\10\0\3\7\6\0\3\7\1\0\10\7\1\0"+
    "\1\7\1\0\15\7\1\u0163\13\7\10\0\3\7\6\0"+
    "\3\7\1\0\10\7\1\0\1\7\1\0\11\7\1\u0164"+
    "\17\7\10\0\3\7\6\0\3\7\1\0\10\7\1\0"+
    "\1\7\1\0\3\7\1\u0165\25\7\10\0\3\7\6\0"+
    "\3\7\1\0\10\7\1\0\1\7\1\0\23\7\1\u0166"+
    "\5\7\10\0\3\7\6\0\3\7\1\0\10\7\1\0"+
    "\1\7\1\0\12\7\1\u0167\16\7\10\0\3\7\6\0"+
    "\3\7\1\0\10\7\1\0\1\7\1\0\4\7\1\u0168"+
    "\24\7\10\0\3\7\6\0\3\7\1\0\10\7\1\0"+
    "\1\7\1\0\7\7\1\u0169\21\7\10\0\3\7\6\0"+
    "\3\7\1\0\10\7\1\0\1\7\1\0\3\7\1\u016a"+
    "\1\7\1\u016b\12\7\1\u016c\10\7\10\0\3\7\6\0"+
    "\3\7\1\0\10\7\1\0\1\7\1\0\11\7\1\u016d"+
    "\17\7\10\0\3\7\6\0\3\7\1\0\10\7\1\0"+
    "\1\7\1\0\2\7\1\u016e\26\7\10\0\3\7\6\0"+
    "\3\7\1\0\10\7\1\0\1\7\1\0\3\7\1\u016f"+
    "\25\7\10\0\3\7\6\0\3\7\1\0\10\7\1\0"+
    "\1\7\1\0\2\7\1\u0170\26\7\10\0\3\7\6\0"+
    "\3\7\1\0\10\7\1\0\1\7\1\0\16\7\1\u0171"+
    "\12\7\10\0\3\7\6\0\3\7\1\0\10\7\1\0"+
    "\1\7\1\0\11\7\1\u0172\17\7\10\0\3\7\6\0"+
    "\3\7\1\0\10\7\1\0\1\7\1\0\1\7\1\u0173"+
    "\27\7\10\0\3\7\6\0\3\7\1\0\10\7\1\0"+
    "\1\7\1\0\15\7\1\u0174\13\7\10\0\3\7\6\0"+
    "\3\7\1\0\10\7\1\0\1\7\1\0\1\7\1\u0175"+
    "\27\7\10\0\3\7\6\0\3\7\1\0\10\7\1\0"+
    "\1\7\1\0\5\7\1\u0176\23\7\10\0\3\7\6\0"+
    "\3\7\1\0\10\7\1\0\1\7\1\0\26\7\1\u0177"+
    "\2\7\10\0\3\7\6\0\3\7\1\0\10\7\1\0"+
    "\1\7\1\0\20\7\1\u0178\10\7\10\0\3\7\6\0"+
    "\3\7\1\0\10\7\1\0\1\7\1\0\4\7\1\u0179"+
    "\24\7\10\0\3\7\6\0\3\7\1\0\10\7\1\0"+
    "\1\7\1\0\20\7\1\u017a\10\7\10\0\3\7\6\0"+
    "\3\7\1\0\10\7\1\0\1\7\1\0\3\7\1\u017b"+
    "\25\7\10\0\3\7\6\0\3\7\1\0\10\7\1\0"+
    "\1\7\1\0\26\7\1\u017c\2\7\10\0\3\7\6\0"+
    "\3\7\1\0\10\7\1\0\1\7\1\0\1\7\1\u017d"+
    "\27\7\10\0\3\7\6\0\3\7\1\0\10\7\1\0"+
    "\1\7\1\0\22\7\1\u017e\6\7\10\0\3\7\6\0"+
    "\3\7\1\0\10\7\1\0\1\7\1\0\15\7\1\u017f"+
    "\13\7\10\0\3\7\6\0\3\7\1\0\10\7\1\0"+
    "\1\7\1\0\5\7\1\u0180\23\7\10\0\3\7\10\0"+
    "\1\u0181\1\0\1\u0181\1\334\1\0\5\u0181\1\0\1\u0181"+
    "\2\0\1\u0181\5\0\1\u0181\2\0\3\u0181\1\334\3\0"+
    "\1\u0181\32\0\1\u0182\1\0\1\61\1\177\2\0\3\u0182"+
    "\1\67\1\70\1\71\2\0\1\71\10\0\2\67\1\0"+
    "\1\177\36\0\1\u0183\1\0\1\61\1\177\2\0\3\u0183"+
    "\1\67\1\70\1\71\2\0\1\71\10\0\2\67\1\0"+
    "\1\177\34\0\3\7\1\0\10\7\1\0\1\7\1\0"+
    "\5\7\1\u0184\23\7\10\0\3\7\6\0\3\7\1\0"+
    "\10\7\1\0\1\7\1\0\6\7\1\u0185\22\7\10\0"+
    "\3\7\6\0\3\7\1\0\10\7\1\0\1\7\1\0"+
    "\6\7\1\u0186\22\7\10\0\3\7\6\0\3\7\1\0"+
    "\10\7\1\0\1\7\1\0\11\7\1\u0187\17\7\10\0"+
    "\3\7\6\0\3\7\1\0\10\7\1\0\1\7\1\0"+
    "\4\7\1\u0188\24\7\10\0\3\7\6\0\3\7\1\0"+
    "\10\7\1\0\1\7\1\0\1\7\1\u0189\27\7\10\0"+
    "\3\7\6\0\3\7\1\0\10\7\1\0\1\7\1\0"+
    "\2\7\1\u018a\26\7\10\0\3\7\6\0\3\7\1\0"+
    "\10\7\1\0\1\7\1\0\1\7\1\u018b\27\7\10\0"+
    "\3\7\6\0\3\7\1\0\10\7\1\0\1\7\1\0"+
    "\15\7\1\u018c\13\7\10\0\3\7\6\0\3\7\1\0"+
    "\10\7\1\0\1\7\1\0\26\7\1\u018d\2\7\10\0"+
    "\3\7\6\0\3\7\1\0\10\7\1\0\1\7\1\0"+
    "\21\7\1\u018e\7\7\10\0\3\7\6\0\3\7\1\0"+
    "\10\7\1\0\1\7\1\0\2\7\1\u018f\26\7\10\0"+
    "\3\7\6\0\3\7\1\0\10\7\1\0\1\7\1\0"+
    "\11\7\1\u0190\17\7\10\0\3\7\6\0\3\7\1\0"+
    "\10\7\1\0\1\7\1\0\23\7\1\u0191\5\7\10\0"+
    "\3\7\6\0\3\7\1\0\10\7\1\0\1\7\1\0"+
    "\15\7\1\u0192\13\7\10\0\3\7\6\0\3\7\1\0"+
    "\10\7\1\0\1\7\1\0\4\7\1\u0193\24\7\10\0"+
    "\3\7\6\0\3\7\1\0\10\7\1\0\1\7\1\0"+
    "\1\u0194\30\7\10\0\3\7\6\0\3\7\1\0\10\7"+
    "\1\0\1\7\1\0\1\7\1\u0195\27\7\10\0\3\7"+
    "\6\0\3\7\1\0\10\7\1\0\1\7\1\0\23\7"+
    "\1\u0196\5\7\10\0\3\7\6\0\3\7\1\0\10\7"+
    "\1\0\1\7\1\0\4\7\1\u0197\24\7\10\0\3\7"+
    "\6\0\3\7\1\0\10\7\1\0\1\7\1\0\12\7"+
    "\1\u0198\16\7\10\0\3\7\6\0\3\7\1\0\10\7"+
    "\1\0\1\7\1\0\6\7\1\u0199\22\7\10\0\3\7"+
    "\6\0\3\7\1\0\10\7\1\0\1\7\1\0\12\7"+
    "\1\u019a\16\7\10\0\3\7\6\0\3\7\1\0\10\7"+
    "\1\0\1\7\1\0\2\7\1\u019b\26\7\10\0\3\7"+
    "\6\0\3\7\1\0\10\7\1\0\1\7\1\0\2\7"+
    "\1\u019c\26\7\10\0\3\7\6\0\3\7\1\0\10\7"+
    "\1\0\1\7\1\0\21\7\1\u019d\7\7\10\0\3\7"+
    "\6\0\3\7\1\0\10\7\1\0\1\7\1\0\6\7"+
    "\1\u019e\11\7\1\u019f\10\7\10\0\3\7\6\0\3\7"+
    "\1\0\10\7\1\0\1\7\1\0\3\7\1\u01a0\25\7"+
    "\10\0\3\7\6\0\3\7\1\0\10\7\1\0\1\7"+
    "\1\0\2\7\1\u01a1\26\7\10\0\3\7\6\0\3\7"+
    "\1\0\10\7\1\0\1\7\1\0\2\7\1\u01a2\1\u01a3"+
    "\25\7\10\0\3\7\6\0\3\7\1\0\10\7\1\0"+
    "\1\7\1\0\6\7\1\u01a4\22\7\10\0\3\7\6\0"+
    "\3\7\1\0\10\7\1\0\1\7\1\0\1\7\1\u01a5"+
    "\27\7\10\0\3\7\6\0\3\7\1\0\10\7\1\0"+
    "\1\7\1\0\15\7\1\u01a6\13\7\10\0\3\7\6\0"+
    "\3\7\1\0\10\7\1\0\1\7\1\0\1\7\1\u01a7"+
    "\27\7\10\0\3\7\6\0\3\7\1\0\10\7\1\0"+
    "\1\7\1\0\11\7\1\u01a8\17\7\10\0\3\7\6\0"+
    "\3\7\1\0\10\7\1\0\1\7\1\0\15\7\1\u01a9"+
    "\13\7\10\0\3\7\6\0\3\7\1\0\10\7\1\0"+
    "\1\7\1\0\1\7\1\u01aa\27\7\10\0\3\7\6\0"+
    "\3\7\1\0\10\7\1\0\1\7\1\0\4\7\1\u01ab"+
    "\24\7\10\0\3\7\6\0\3\7\1\0\10\7\1\0"+
    "\1\7\1\0\5\7\1\u01ac\23\7\10\0\3\7\6\0"+
    "\3\7\1\0\10\7\1\0\1\7\1\0\4\7\1\u01ad"+
    "\24\7\10\0\3\7\6\0\3\7\1\0\10\7\1\0"+
    "\1\7\1\0\4\7\1\u01ae\24\7\10\0\3\7\6\0"+
    "\3\7\1\0\10\7\1\0\1\7\1\0\26\7\1\u01af"+
    "\2\7\10\0\3\7\6\0\3\7\1\0\10\7\1\0"+
    "\1\7\1\0\2\7\1\u01b0\26\7\10\0\3\7\6\0"+
    "\3\7\1\0\10\7\1\0\1\7\1\0\2\7\1\u01b1"+
    "\26\7\10\0\3\7\6\0\3\7\1\0\10\7\1\0"+
    "\1\7\1\0\15\7\1\u01b2\13\7\10\0\3\7\6\0"+
    "\3\7\1\0\10\7\1\0\1\7\1\0\1\7\1\u01b3"+
    "\27\7\10\0\3\7\6\0\3\7\1\0\10\7\1\0"+
    "\1\7\1\0\1\7\1\u01b4\27\7\10\0\3\7\6\0"+
    "\3\7\1\0\10\7\1\0\1\7\1\0\22\7\1\u01b5"+
    "\6\7\10\0\3\7\6\0\3\7\1\0\10\7\1\0"+
    "\1\7\1\0\7\7\1\u01b6\21\7\10\0\3\7\6\0"+
    "\3\7\1\0\10\7\1\0\1\7\1\0\17\7\1\u01b7"+
    "\11\7\10\0\3\7\6\0\3\7\1\0\10\7\1\0"+
    "\1\7\1\0\12\7\1\u01b8\16\7\10\0\3\7\6\0"+
    "\3\7\1\0\10\7\1\0\1\7\1\0\2\7\1\u01b9"+
    "\26\7\10\0\3\7\6\0\3\7\1\0\10\7\1\0"+
    "\1\7\1\0\1\7\1\u01ba\27\7\10\0\3\7\6\0"+
    "\3\7\1\0\10\7\1\0\1\7\1\0\11\7\1\u01bb"+
    "\17\7\10\0\3\7\6\0\3\7\1\0\10\7\1\0"+
    "\1\7\1\0\23\7\1\u01bc\5\7\10\0\3\7\6\0"+
    "\3\7\1\0\10\7\1\0\1\7\1\0\1\7\1\u01bd"+
    "\27\7\10\0\3\7\6\0\3\7\1\0\10\7\1\0"+
    "\1\7\1\0\5\7\1\u01be\23\7\10\0\3\7\6\0"+
    "\3\7\1\0\10\7\1\0\1\7\1\0\1\7\1\u01bf"+
    "\27\7\10\0\3\7\6\0\3\7\1\0\10\7\1\0"+
    "\1\7\1\0\2\7\1\u01c0\26\7\10\0\3\7\10\0"+
    "\1\u01c1\1\0\1\u01c1\1\334\1\0\5\u01c1\1\0\1\u01c1"+
    "\2\0\1\u01c1\5\0\1\u01c1\2\0\3\u01c1\1\334\3\0"+
    "\1\u01c1\32\0\1\u01c2\1\0\1\61\1\177\2\0\3\u01c2"+
    "\1\67\1\70\1\71\2\0\1\71\10\0\2\67\1\0"+
    "\1\177\36\0\1\u01c3\1\0\1\61\1\177\2\0\3\u01c3"+
    "\1\67\1\70\1\71\2\0\1\71\10\0\2\67\1\0"+
    "\1\177\34\0\3\7\1\0\10\7\1\0\1\7\1\0"+
    "\6\7\1\u01c4\22\7\10\0\3\7\6\0\3\7\1\0"+
    "\10\7\1\0\1\7\1\0\26\7\1\u01c5\2\7\10\0"+
    "\3\7\6\0\3\7\1\0\10\7\1\0\1\7\1\0"+
    "\15\7\1\u01c6\13\7\10\0\3\7\6\0\3\7\1\0"+
    "\10\7\1\0\1\7\1\0\5\7\1\u01c7\23\7\10\0"+
    "\3\7\6\0\3\7\1\0\10\7\1\0\1\7\1\0"+
    "\1\7\1\u01c8\27\7\10\0\3\7\6\0\3\7\1\0"+
    "\10\7\1\0\1\7\1\0\2\7\1\u01c9\26\7\10\0"+
    "\3\7\6\0\3\7\1\0\10\7\1\0\1\7\1\0"+
    "\22\7\1\u01ca\6\7\10\0\3\7\6\0\3\7\1\0"+
    "\10\7\1\0\1\7\1\0\11\7\1\u01cb\1\7\1\u01cc"+
    "\15\7\10\0\3\7\6\0\3\7\1\0\10\7\1\0"+
    "\1\7\1\0\14\7\1\u01cd\14\7\10\0\3\7\6\0"+
    "\3\7\1\0\10\7\1\0\1\7\1\0\7\7\1\u01ce"+
    "\21\7\10\0\3\7\6\0\3\7\1\0\10\7\1\0"+
    "\1\7\1\0\2\7\1\u01cf\26\7\10\0\3\7\6\0"+
    "\3\7\1\0\10\7\1\0\1\7\1\0\1\7\1\u01d0"+
    "\27\7\10\0\3\7\6\0\3\7\1\0\10\7\1\0"+
    "\1\7\1\0\1\7\1\u01d1\27\7\10\0\3\7\6\0"+
    "\3\7\1\0\10\7\1\0\1\7\1\0\1\7\1\u01d2"+
    "\27\7\10\0\3\7\6\0\3\7\1\0\10\7\1\0"+
    "\1\7\1\0\4\7\1\u01d3\24\7\10\0\3\7\6\0"+
    "\3\7\1\0\10\7\1\0\1\7\1\0\15\7\1\u01d4"+
    "\13\7\10\0\3\7\6\0\3\7\1\0\10\7\1\0"+
    "\1\7\1\0\3\7\1\u01d5\25\7\10\0\3\7\6\0"+
    "\3\7\1\0\10\7\1\0\1\7\1\0\7\7\1\u01d6"+
    "\21\7\10\0\3\7\6\0\3\7\1\0\10\7\1\0"+
    "\1\7\1\0\1\7\1\u01d7\27\7\10\0\3\7\6\0"+
    "\3\7\1\0\10\7\1\0\1\7\1\0\10\7\1\u01d8"+
    "\20\7\10\0\3\7\6\0\3\7\1\0\10\7\1\0"+
    "\1\7\1\0\3\7\1\u01d9\25\7\10\0\3\7\6\0"+
    "\3\7\1\0\10\7\1\0\1\7\1\0\22\7\1\u01da"+
    "\6\7\10\0\3\7\6\0\3\7\1\0\10\7\1\0"+
    "\1\7\1\0\20\7\1\u01db\10\7\10\0\3\7\6\0"+
    "\3\7\1\0\10\7\1\0\1\7\1\0\1\7\1\u01dc"+
    "\27\7\10\0\3\7\6\0\3\7\1\0\10\7\1\0"+
    "\1\7\1\0\12\7\1\u01dd\16\7\10\0\3\7\6\0"+
    "\3\7\1\0\10\7\1\0\1\7\1\0\11\7\1\u01de"+
    "\17\7\10\0\3\7\6\0\3\7\1\0\10\7\1\0"+
    "\1\7\1\0\1\7\1\u01df\27\7\10\0\3\7\6\0"+
    "\3\7\1\0\10\7\1\0\1\7\1\0\23\7\1\u01e0"+
    "\5\7\10\0\3\7\6\0\3\7\1\0\10\7\1\0"+
    "\1\7\1\0\20\7\1\u01e1\10\7\10\0\3\7\6\0"+
    "\3\7\1\0\10\7\1\0\1\7\1\0\21\7\1\u01e2"+
    "\7\7\10\0\3\7\6\0\3\7\1\0\10\7\1\0"+
    "\1\7\1\0\2\7\1\u01e3\26\7\10\0\3\7\6\0"+
    "\3\7\1\0\10\7\1\0\1\7\1\0\6\7\1\u01e4"+
    "\22\7\10\0\3\7\6\0\3\7\1\0\10\7\1\0"+
    "\1\7\1\0\12\7\1\u01e5\16\7\10\0\3\7\6\0"+
    "\3\7\1\0\10\7\1\0\1\7\1\0\12\7\1\u01e6"+
    "\16\7\10\0\3\7\6\0\3\7\1\0\10\7\1\0"+
    "\1\7\1\0\7\7\1\u01e7\21\7\10\0\3\7\6\0"+
    "\3\7\1\0\10\7\1\0\1\7\1\0\3\7\1\u01e8"+
    "\14\7\1\u01e9\10\7\10\0\3\7\6\0\3\7\1\0"+
    "\10\7\1\0\1\7\1\0\2\7\1\u01ea\26\7\10\0"+
    "\3\7\6\0\3\7\1\0\10\7\1\0\1\7\1\0"+
    "\2\7\1\u01eb\26\7\10\0\3\7\6\0\3\7\1\0"+
    "\10\7\1\0\1\7\1\0\22\7\1\u01ec\6\7\10\0"+
    "\3\7\6\0\3\7\1\0\10\7\1\0\1\7\1\0"+
    "\4\7\1\u01ed\24\7\10\0\3\7\6\0\3\7\1\0"+
    "\10\7\1\0\1\7\1\0\23\7\1\u01ee\5\7\10\0"+
    "\3\7\6\0\3\7\1\0\10\7\1\0\1\7\1\0"+
    "\6\7\1\u01ef\22\7\10\0\3\7\6\0\3\7\1\0"+
    "\10\7\1\0\1\7\1\0\2\7\1\u01f0\26\7\10\0"+
    "\3\7\6\0\3\7\1\0\10\7\1\0\1\7\1\0"+
    "\3\7\1\u01f1\25\7\10\0\3\7\6\0\3\7\1\0"+
    "\10\7\1\0\1\7\1\0\23\7\1\u01f2\5\7\10\0"+
    "\3\7\10\0\1\u01f3\1\0\1\u01f3\1\334\1\0\5\u01f3"+
    "\1\0\1\u01f3\2\0\1\u01f3\5\0\1\u01f3\2\0\3\u01f3"+
    "\1\334\3\0\1\u01f3\32\0\1\u01f4\1\0\1\61\1\177"+
    "\2\0\3\u01f4\1\67\1\70\1\71\2\0\1\71\10\0"+
    "\2\67\1\0\1\177\36\0\1\u01f5\1\0\1\61\1\177"+
    "\2\0\3\u01f5\1\67\1\70\1\71\2\0\1\71\10\0"+
    "\2\67\1\0\1\177\34\0\3\7\1\0\10\7\1\0"+
    "\1\7\1\0\22\7\1\u01f6\6\7\10\0\3\7\6\0"+
    "\3\7\1\0\10\7\1\0\1\7\1\0\6\7\1\u01f7"+
    "\22\7\10\0\3\7\6\0\3\7\1\0\10\7\1\0"+
    "\1\7\1\0\12\7\1\u01f8\16\7\10\0\3\7\6\0"+
    "\3\7\1\0\10\7\1\0\1\7\1\0\1\u01f9\30\7"+
    "\10\0\3\7\6\0\3\7\1\0\10\7\1\0\1\7"+
    "\1\0\2\7\1\u01fa\26\7\10\0\3\7\6\0\3\7"+
    "\1\0\10\7\1\0\1\7\1\0\7\7\1\u01fb\21\7"+
    "\10\0\3\7\6\0\3\7\1\0\10\7\1\0\1\7"+
    "\1\0\4\7\1\u01fc\24\7\10\0\3\7\6\0\3\7"+
    "\1\0\10\7\1\0\1\7\1\0\15\7\1\u01fd\13\7"+
    "\10\0\3\7\6\0\3\7\1\0\10\7\1\0\1\7"+
    "\1\0\15\7\1\u01fe\13\7\10\0\3\7\6\0\3\7"+
    "\1\0\10\7\1\0\1\7\1\0\15\7\1\u01ff\13\7"+
    "\10\0\3\7\6\0\3\7\1\0\10\7\1\0\1\7"+
    "\1\0\6\7\1\u0200\22\7\10\0\3\7\6\0\3\7"+
    "\1\0\10\7\1\0\1\7\1\0\1\7\1\u0201\27\7"+
    "\10\0\3\7\6\0\3\7\1\0\10\7\1\0\1\7"+
    "\1\0\4\7\1\u0202\24\7\10\0\3\7\6\0\3\7"+
    "\1\0\10\7\1\0\1\7\1\0\11\7\1\u0203\17\7"+
    "\10\0\3\7\6\0\3\7\1\0\10\7\1\0\1\7"+
    "\1\0\11\7\1\u0204\17\7\10\0\3\7\6\0\3\7"+
    "\1\0\10\7\1\0\1\7\1\0\12\7\1\u0205\16\7"+
    "\10\0\3\7\6\0\3\7\1\0\10\7\1\0\1\7"+
    "\1\0\4\7\1\u0206\24\7\10\0\3\7\6\0\3\7"+
    "\1\0\10\7\1\0\1\7\1\0\15\7\1\u0207\13\7"+
    "\10\0\3\7\6\0\3\7\1\0\10\7\1\0\1\7"+
    "\1\0\11\7\1\u0208\17\7\10\0\3\7\6\0\3\7"+
    "\1\0\10\7\1\0\1\7\1\0\4\7\1\u0209\24\7"+
    "\10\0\3\7\6\0\3\7\1\0\10\7\1\0\1\7"+
    "\1\0\12\7\1\u020a\16\7\10\0\3\7\6\0\3\7"+
    "\1\0\10\7\1\0\1\7\1\0\1\7\1\u020b\27\7"+
    "\10\0\3\7\6\0\3\7\1\0\10\7\1\0\1\7"+
    "\1\0\2\7\1\u020c\26\7\10\0\3\7\6\0\3\7"+
    "\1\0\10\7\1\0\1\7\1\0\1\7\1\u020d\27\7"+
    "\10\0\3\7\6\0\3\7\1\0\10\7\1\0\1\7"+
    "\1\0\1\7\1\u020e\27\7\10\0\3\7\6\0\3\7"+
    "\1\0\10\7\1\0\1\7\1\0\1\7\1\u020f\27\7"+
    "\10\0\3\7\6\0\3\7\1\0\10\7\1\0\1\7"+
    "\1\0\10\7\1\u0210\20\7\10\0\3\7\6\0\3\7"+
    "\1\0\10\7\1\0\1\7\1\0\3\7\1\u0211\25\7"+
    "\10\0\3\7\6\0\3\7\1\0\10\7\1\0\1\7"+
    "\1\0\12\7\1\u0212\16\7\10\0\3\7\6\0\3\7"+
    "\1\0\10\7\1\0\1\7\1\0\13\7\1\u0213\15\7"+
    "\10\0\3\7\6\0\3\7\1\0\10\7\1\0\1\7"+
    "\1\0\5\7\1\u0214\23\7\10\0\3\7\6\0\3\7"+
    "\1\0\10\7\1\0\1\7\1\0\7\7\1\u0215\21\7"+
    "\10\0\3\7\6\0\3\7\1\0\10\7\1\0\1\7"+
    "\1\0\3\7\1\u0216\25\7\10\0\3\7\6\0\3\7"+
    "\1\0\10\7\1\0\1\7\1\0\22\7\1\u0217\6\7"+
    "\10\0\3\7\6\0\3\7\1\0\10\7\1\0\1\7"+
    "\1\0\3\7\1\u0218\25\7\10\0\3\7\10\0\1\u0219"+
    "\1\0\1\u0219\1\334\1\0\5\u0219\1\0\1\u0219\2\0"+
    "\1\u0219\5\0\1\u0219\2\0\3\u0219\1\334\3\0\1\u0219"+
    "\32\0\1\u021a\1\0\1\61\1\177\2\0\3\u021a\1\67"+
    "\1\70\1\71\2\0\1\71\10\0\2\67\1\0\1\177"+
    "\36\0\1\u021b\1\0\1\61\1\177\2\0\3\u021b\1\67"+
    "\1\70\1\71\2\0\1\71\10\0\2\67\1\0\1\177"+
    "\34\0\3\7\1\0\10\7\1\0\1\7\1\0\3\7"+
    "\1\u021c\25\7\10\0\3\7\6\0\3\7\1\0\10\7"+
    "\1\0\1\7\1\0\1\7\1\u021d\27\7\10\0\3\7"+
    "\6\0\3\7\1\0\10\7\1\0\1\7\1\0\5\7"+
    "\1\u021e\23\7\10\0\3\7\6\0\3\7\1\0\10\7"+
    "\1\0\1\7\1\0\14\7\1\u021f\14\7\10\0\3\7"+
    "\6\0\3\7\1\0\10\7\1\0\1\7\1\0\1\7"+
    "\1\u0220\27\7\10\0\3\7\6\0\3\7\1\0\10\7"+
    "\1\0\1\7\1\0\1\7\1\u0221\27\7\10\0\3\7"+
    "\6\0\3\7\1\0\10\7\1\0\1\7\1\0\12\7"+
    "\1\u0222\16\7\10\0\3\7\6\0\3\7\1\0\10\7"+
    "\1\0\1\7\1\0\26\7\1\u0223\2\7\10\0\3\7"+
    "\6\0\3\7\1\0\10\7\1\0\1\7\1\0\13\7"+
    "\1\u0224\15\7\10\0\3\7\6\0\3\7\1\0\10\7"+
    "\1\0\1\7\1\0\5\7\1\u0225\23\7\10\0\3\7"+
    "\6\0\3\7\1\0\10\7\1\0\1\7\1\0\4\7"+
    "\1\u0226\24\7\10\0\3\7\6\0\3\7\1\0\10\7"+
    "\1\0\1\7\1\0\21\7\1\u0227\7\7\10\0\3\7"+
    "\6\0\3\7\1\0\10\7\1\0\1\7\1\0\7\7"+
    "\1\u0228\21\7\10\0\3\7\6\0\3\7\1\0\10\7"+
    "\1\0\1\7\1\0\5\7\1\u0229\23\7\10\0\3\7"+
    "\6\0\3\7\1\0\10\7\1\0\1\7\1\0\1\7"+
    "\1\u022a\27\7\10\0\3\7\6\0\3\7\1\0\10\7"+
    "\1\0\1\7\1\0\3\7\1\u022b\25\7\10\0\3\7"+
    "\6\0\3\7\1\0\10\7\1\0\1\7\1\0\6\7"+
    "\1\u022c\22\7\10\0\3\7\6\0\3\7\1\0\10\7"+
    "\1\0\1\7\1\0\21\7\1\u022d\7\7\10\0\3\7"+
    "\6\0\3\7\1\0\10\7\1\0\1\7\1\0\21\7"+
    "\1\u022e\7\7\10\0\3\7\6\0\3\7\1\0\10\7"+
    "\1\0\1\7\1\0\2\7\1\u022f\26\7\10\0\3\7"+
    "\6\0\3\7\1\0\10\7\1\0\1\7\1\0\7\7"+
    "\1\u0230\21\7\10\0\3\7\6\0\3\7\1\0\10\7"+
    "\1\0\1\7\1\0\12\7\1\u0231\16\7\10\0\3\7"+
    "\6\0\3\7\1\0\10\7\1\0\1\7\1\0\4\7"+
    "\1\u0232\24\7\10\0\3\7\6\0\3\7\1\0\10\7"+
    "\1\0\1\7\1\0\6\7\1\u0233\22\7\10\0\3\7"+
    "\6\0\3\7\1\0\10\7\1\0\1\7\1\0\2\7"+
    "\1\u0234\26\7\10\0\3\7\6\0\3\7\1\0\10\7"+
    "\1\0\1\7\1\0\4\7\1\u0235\24\7\10\0\3\7"+
    "\10\0\1\u0236\1\0\1\u0236\1\334\1\0\5\u0236\1\0"+
    "\1\u0236\2\0\1\u0236\5\0\1\u0236\2\0\3\u0236\1\334"+
    "\3\0\1\u0236\32\0\1\u0237\1\0\1\61\1\177\2\0"+
    "\3\u0237\1\67\1\70\1\71\2\0\1\71\10\0\2\67"+
    "\1\0\1\177\36\0\1\u0238\1\0\1\61\1\177\2\0"+
    "\3\u0238\1\67\1\70\1\71\2\0\1\71\10\0\2\67"+
    "\1\0\1\177\34\0\3\7\1\0\10\7\1\0\1\7"+
    "\1\0\1\7\1\u0239\27\7\10\0\3\7\6\0\3\7"+
    "\1\0\10\7\1\0\1\7\1\0\2\7\1\u023a\26\7"+
    "\10\0\3\7\6\0\3\7\1\0\10\7\1\0\1\7"+
    "\1\0\16\7\1\u023b\12\7\10\0\3\7\6\0\3\7"+
    "\1\0\10\7\1\0\1\7\1\0\15\7\1\u023c\13\7"+
    "\10\0\3\7\6\0\3\7\1\0\10\7\1\0\1\7"+
    "\1\0\15\7\1\u023d\13\7\10\0\3\7\6\0\3\7"+
    "\1\0\10\7\1\0\1\7\1\0\11\7\1\u023e\17\7"+
    "\10\0\3\7\6\0\3\7\1\0\10\7\1\0\1\7"+
    "\1\0\6\7\1\u023f\22\7\10\0\3\7\6\0\3\7"+
    "\1\0\10\7\1\0\1\7\1\0\5\7\1\u0240\23\7"+
    "\10\0\3\7\6\0\3\7\1\0\10\7\1\0\1\7"+
    "\1\0\2\7\1\u0241\26\7\10\0\3\7\6\0\3\7"+
    "\1\0\10\7\1\0\1\7\1\0\11\7\1\u0242\17\7"+
    "\10\0\3\7\6\0\3\7\1\0\10\7\1\0\1\7"+
    "\1\0\6\7\1\u0243\22\7\10\0\3\7\6\0\3\7"+
    "\1\0\10\7\1\0\1\7\1\0\26\7\1\u0244\2\7"+
    "\10\0\3\7\6\0\3\7\1\0\10\7\1\0\1\7"+
    "\1\0\1\7\1\u0245\27\7\10\0\3\7\6\0\3\7"+
    "\1\0\10\7\1\0\1\7\1\0\11\7\1\u0246\17\7"+
    "\10\0\3\7\6\0\3\7\1\0\10\7\1\0\1\7"+
    "\1\0\2\7\1\u0247\26\7\10\0\3\7\6\0\3\7"+
    "\1\0\10\7\1\0\1\7\1\0\7\7\1\u0248\21\7"+
    "\10\0\3\7\6\0\3\7\1\0\10\7\1\0\1\7"+
    "\1\0\1\7\1\u0249\27\7\10\0\3\7\6\0\3\7"+
    "\1\0\10\7\1\0\1\7\1\0\22\7\1\u024a\6\7"+
    "\10\0\3\7\6\0\3\7\1\0\10\7\1\0\1\7"+
    "\1\0\11\7\1\u024b\17\7\10\0\3\7\10\0\1\u024c"+
    "\1\0\1\u024c\1\334\1\0\5\u024c\1\0\1\u024c\2\0"+
    "\1\u024c\5\0\1\u024c\2\0\3\u024c\1\334\3\0\1\u024c"+
    "\32\0\1\u024d\1\0\1\61\1\177\2\0\3\u024d\1\67"+
    "\1\70\1\71\2\0\1\71\10\0\2\67\1\0\1\177"+
    "\36\0\1\u024e\1\0\1\61\1\177\2\0\3\u024e\1\67"+
    "\1\70\1\71\2\0\1\71\10\0\2\67\1\0\1\177"+
    "\34\0\3\7\1\0\10\7\1\0\1\7\1\0\11\7"+
    "\1\u024f\17\7\10\0\3\7\6\0\3\7\1\0\10\7"+
    "\1\0\1\7\1\0\1\7\1\u0250\27\7\10\0\3\7"+
    "\6\0\3\7\1\0\10\7\1\0\1\7\1\0\12\7"+
    "\1\u0251\16\7\10\0\3\7\6\0\3\7\1\0\10\7"+
    "\1\0\1\7\1\0\6\7\1\u0252\22\7\10\0\3\7"+
    "\6\0\3\7\1\0\10\7\1\0\1\7\1\0\1\7"+
    "\1\u0253\27\7\10\0\3\7\6\0\3\7\1\0\10\7"+
    "\1\0\1\7\1\0\1\7\1\u0254\27\7\10\0\3\7"+
    "\6\0\3\7\1\0\10\7\1\0\1\7\1\0\4\7"+
    "\1\u0255\24\7\10\0\3\7\6\0\3\7\1\0\10\7"+
    "\1\0\1\7\1\0\21\7\1\u0256\7\7\10\0\3\7"+
    "\6\0\3\7\1\0\10\7\1\0\1\7\1\0\11\7"+
    "\1\u0257\17\7\10\0\3\7\6\0\3\7\1\0\10\7"+
    "\1\0\1\7\1\0\15\7\1\u0258\13\7\10\0\3\7"+
    "\6\0\3\7\1\0\10\7\1\0\1\7\1\0\4\7"+
    "\1\u0259\24\7\10\0\3\7\10\0\1\u025a\1\0\1\u025a"+
    "\1\334\1\0\5\u025a\1\0\1\u025a\2\0\1\u025a\5\0"+
    "\1\u025a\2\0\3\u025a\1\334\3\0\1\u025a\32\0\1\u025b"+
    "\1\0\1\61\1\177\2\0\3\u025b\1\67\1\70\1\71"+
    "\2\0\1\71\10\0\2\67\1\0\1\177\36\0\1\u025c"+
    "\1\0\1\61\1\177\2\0\3\u025c\1\67\1\70\1\71"+
    "\2\0\1\71\10\0\2\67\1\0\1\177\34\0\3\7"+
    "\1\0\10\7\1\0\1\7\1\0\3\7\1\u025d\20\7"+
    "\1\u025e\4\7\10\0\3\7\6\0\3\7\1\0\10\7"+
    "\1\0\1\7\1\0\7\7\1\u025f\21\7\10\0\3\7"+
    "\6\0\3\7\1\0\10\7\1\0\1\7\1\0\5\7"+
    "\1\u0260\23\7\10\0\3\7\6\0\3\7\1\0\10\7"+
    "\1\0\1\7\1\0\17\7\1\u0261\11\7\10\0\3\7"+
    "\6\0\3\7\1\0\10\7\1\0\1\7\1\0\1\7"+
    "\1\u0262\27\7\10\0\3\7\6\0\3\7\1\0\10\7"+
    "\1\0\1\7\1\0\12\7\1\u0263\16\7\10\0\3\7"+
    "\6\0\3\7\1\0\10\7\1\0\1\7\1\0\1\u0264"+
    "\30\7\10\0\3\7\10\0\1\u0265\1\0\1\u0265\1\334"+
    "\1\0\5\u0265\1\0\1\u0265\2\0\1\u0265\5\0\1\u0265"+
    "\2\0\3\u0265\1\334\3\0\1\u0265\32\0\1\u0266\1\0"+
    "\1\61\1\177\2\0\3\u0266\1\67\1\70\1\71\2\0"+
    "\1\71\10\0\2\67\1\0\1\177\36\0\1\u0267\1\0"+
    "\1\61\1\177\2\0\3\u0267\1\67\1\70\1\71\2\0"+
    "\1\71\10\0\2\67\1\0\1\177\34\0\3\7\1\0"+
    "\10\7\1\0\1\7\1\0\1\7\1\u0268\27\7\10\0"+
    "\3\7\6\0\3\7\1\0\10\7\1\0\1\7\1\0"+
    "\1\7\1\u0269\27\7\10\0\3\7\6\0\3\7\1\0"+
    "\10\7\1\0\1\7\1\0\11\7\1\u026a\17\7\10\0"+
    "\3\7\6\0\3\7\1\0\10\7\1\0\1\7\1\0"+
    "\6\7\1\u026b\22\7\10\0\3\7\6\0\3\7\1\0"+
    "\10\7\1\0\1\7\1\0\1\7\1\u026c\27\7\10\0"+
    "\3\7\10\0\1\u026d\1\0\1\u026d\1\334\1\0\5\u026d"+
    "\1\0\1\u026d\2\0\1\u026d\5\0\1\u026d\2\0\3\u026d"+
    "\1\334\3\0\1\u026d\32\0\1\u026e\1\0\1\61\1\177"+
    "\2\0\3\u026e\1\67\1\70\1\71\2\0\1\71\10\0"+
    "\2\67\1\0\1\177\36\0\1\u026f\1\0\1\61\1\177"+
    "\2\0\3\u026f\1\67\1\70\1\71\2\0\1\71\10\0"+
    "\2\67\1\0\1\177\34\0\3\7\1\0\10\7\1\0"+
    "\1\7\1\0\11\7\1\u0270\17\7\10\0\3\7\6\0"+
    "\3\7\1\0\10\7\1\0\1\7\1\0\22\7\1\u0271"+
    "\6\7\10\0\3\7\6\0\3\7\1\0\10\7\1\0"+
    "\1\7\1\0\1\7\1\u0272\27\7\10\0\3\7\10\0"+
    "\1\u0273\1\0\1\u0273\1\334\1\0\5\u0273\1\0\1\u0273"+
    "\2\0\1\u0273\5\0\1\u0273\2\0\3\u0273\1\334\3\0"+
    "\1\u0273\32\0\1\u0274\1\0\1\61\1\177\2\0\3\u0274"+
    "\1\67\1\70\1\71\2\0\1\71\10\0\2\67\1\0"+
    "\1\177\36\0\1\u0275\1\0\1\61\1\177\2\0\3\u0275"+
    "\1\67\1\70\1\71\2\0\1\71\10\0\2\67\1\0"+
    "\1\177\36\0\1\u0276\1\0\1\u0276\1\334\1\0\5\u0276"+
    "\1\0\1\u0276\2\0\1\u0276\5\0\1\u0276\2\0\3\u0276"+
    "\1\334\3\0\1\u0276\32\0\1\u0277\1\0\1\61\1\177"+
    "\2\0\3\u0277\1\67\1\70\1\71\2\0\1\71\10\0"+
    "\2\67\1\0\1\177\36\0\1\u0278\1\0\1\61\1\177"+
    "\2\0\3\u0278\1\67\1\70\1\71\2\0\1\71\10\0"+
    "\2\67\1\0\1\177\36\0\1\u0279\1\0\1\u0279\1\334"+
    "\1\0\5\u0279\1\0\1\u0279\2\0\1\u0279\5\0\1\u0279"+
    "\2\0\3\u0279\1\334\3\0\1\u0279\32\0\1\u027a\1\0"+
    "\1\61\1\177\2\0\3\u027a\1\67\1\70\1\71\2\0"+
    "\1\71\10\0\2\67\1\0\1\177\36\0\1\u027b\1\0"+
    "\1\61\1\177\2\0\3\u027b\1\67\1\70\1\71\2\0"+
    "\1\71\10\0\2\67\1\0\1\177\36\0\1\u027c\1\0"+
    "\1\u027c\1\334\1\0\5\u027c\1\0\1\u027c\2\0\1\u027c"+
    "\5\0\1\u027c\2\0\3\u027c\1\334\3\0\1\u027c\32\0"+
    "\1\u027d\1\0\1\61\1\177\2\0\3\u027d\1\67\1\70"+
    "\1\71\2\0\1\71\10\0\2\67\1\0\1\177\41\0"+
    "\1\334\26\0\1\334\36\0\1\u027e\1\0\1\61\1\177"+
    "\2\0\3\u027e\1\67\1\70\1\71\2\0\1\71\10\0"+
    "\2\67\1\0\1\177\36\0\1\u027f\1\0\1\61\1\177"+
    "\2\0\3\u027f\1\67\1\70\1\71\2\0\1\71\10\0"+
    "\2\67\1\0\1\177\36\0\1\u0280\1\0\1\61\1\177"+
    "\2\0\3\u0280\1\67\1\70\1\71\2\0\1\71\10\0"+
    "\2\67\1\0\1\177\36\0\1\u0281\1\0\1\61\1\177"+
    "\2\0\3\u0281\1\67\1\70\1\71\2\0\1\71\10\0"+
    "\2\67\1\0\1\177\36\0\1\61\1\0\1\61\1\177"+
    "\2\0\3\61\1\67\1\70\1\71\2\0\1\71\10\0"+
    "\2\67\1\0\1\177\26\0";

  /** 
   * The transition table of the DFA
   */
  final private static int yytrans [] = yy_unpack();


  /* error codes */
  final private static int YY_UNKNOWN_ERROR = 0;
  final private static int YY_ILLEGAL_STATE = 1;
  final private static int YY_NO_MATCH = 2;
  final private static int YY_PUSHBACK_2BIG = 3;

  /* error messages for the codes above */
  final private static String YY_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Internal error: unknown state",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * YY_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private final static byte YY_ATTRIBUTE[] = {
     0,  0,  9,  1,  9,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     9,  9,  9,  9,  9,  9,  9,  9,  1,  1,  9,  1,  9,  1,  0,  1, 
     1,  9,  0,  1,  1,  1,  9,  1,  0,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  9,  9,  9,  0,  9,  1, 
     1,  1,  1,  1,  0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0,  9,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  0,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  0,  1,  1,  1,  1,  1,  1,  1,  0,  1,  1,  1, 
     1,  1,  0,  1,  1,  0,  1,  1,  0,  1,  1,  0,  1,  1,  1,  1,  1
  };

  /** the input device */
  private java.io.Reader yy_reader;

  /** the current state of the DFA */
  private int yy_state;

  /** the current lexical state */
  private int yy_lexical_state = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char yy_buffer[] = new char[YY_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int yy_markedPos;

  /** the textposition at the last state to be included in yytext */
  private int yy_pushbackPos;

  /** the current text position in the buffer */
  private int yy_currentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int yy_startRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int yy_endRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn; 

  /** 
   * yy_atBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean yy_atBOL = true;

  /** yy_atEOF == true <=> the scanner is at the EOF */
  private boolean yy_atEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean yy_eof_done;

  /* user code: */
  static public final transient String RCS_ID = "$Id: adl.flex,v 1.1 2006-12-21 11:35:34 sonntag Exp $";
  static public final transient String RCS_REV = "$Revision: 1.1 $";
  
  private final StringBuffer string = new StringBuffer();
  
  private boolean multiline = false;
  
  private Symbol symbol(int type) {
    return new ADLSymbol(type, yyline+1, yycolumn+1);
  }

  private Symbol symbol(int type, Object value) {
    return new ADLSymbol(type, yyline+1, yycolumn+1, value);
  }

  /* assumes correct representation of a long value for 
     specified radix in String s */
  private long parseLong(String s, int radix) {
    int  max = s.length();
    long result = 0;
    long digit;

    for (int i = 0; i < max; i++) {
      digit  = Character.digit(yy_buffer[i],radix);
      result*= radix;
      result+= digit;
    }

    return result;
  }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public ADLScanner(java.io.Reader in) {
    this.yy_reader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public ADLScanner(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the split, compressed DFA transition table.
   *
   * @return the unpacked transition table
   */
  private static int [] yy_unpack() {
    int [] trans = new int[29640];
    int offset = 0;
    offset = yy_unpack(yy_packed0, offset, trans);
    return trans;
  }

  /** 
   * Unpacks the compressed DFA transition table.
   *
   * @param packed   the packed transition table
   * @return         the index of the last entry
   */
  private static int yy_unpack(String packed, int offset, int [] trans) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do trans[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] yy_unpack_cmap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1784) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   IOException  if any I/O-Error occurs
   */
  private boolean yy_refill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (yy_startRead > 0) {
      System.arraycopy(yy_buffer, yy_startRead, 
                       yy_buffer, 0, 
                       yy_endRead-yy_startRead);

      /* translate stored positions */
      yy_endRead-= yy_startRead;
      yy_currentPos-= yy_startRead;
      yy_markedPos-= yy_startRead;
      yy_pushbackPos-= yy_startRead;
      yy_startRead = 0;
    }

    /* is the buffer big enough? */
    if (yy_currentPos >= yy_buffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[yy_currentPos*2];
      System.arraycopy(yy_buffer, 0, newBuffer, 0, yy_buffer.length);
      yy_buffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = yy_reader.read(yy_buffer, yy_endRead, 
                                            yy_buffer.length-yy_endRead);

    if (numRead < 0) {
      return true;
    }
    else {
      yy_endRead+= numRead;  
      return false;
    }
  }


  /**
   * Closes the input stream.
   */
  final public void yyclose() throws java.io.IOException {
    yy_atEOF = true;            /* indicate end of file */
    yy_endRead = yy_startRead;  /* invalidate buffer    */

    if (yy_reader != null)
      yy_reader.close();
  }


  /**
   * Closes the current stream, and resets the
   * scanner to read from a new input stream.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>YY_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  final public void yyreset(java.io.Reader reader) throws java.io.IOException {
    yyclose();
    yy_reader = reader;
    yy_atBOL  = true;
    yy_atEOF  = false;
    yy_endRead = yy_startRead = 0;
    yy_currentPos = yy_markedPos = yy_pushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    yy_lexical_state = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  final public int yystate() {
    return yy_lexical_state;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  final public void yybegin(int newState) {
    yy_lexical_state = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  final public String yytext() {
    return new String( yy_buffer, yy_startRead, yy_markedPos-yy_startRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  final public char yycharat(int pos) {
    return yy_buffer[yy_startRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  final public int yylength() {
    return yy_markedPos-yy_startRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void yy_ScanError(int errorCode) {
    String message;
    try {
      message = YY_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = YY_ERROR_MSG[YY_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  private void yypushback(int number)  {
    if ( number > yylength() )
      yy_ScanError(YY_PUSHBACK_2BIG);

    yy_markedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void yy_do_eof() throws java.io.IOException {
    if (!yy_eof_done) {
      yy_eof_done = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int yy_input;
    int yy_action;

    // cached fields:
    int yy_currentPos_l;
    int yy_startRead_l;
    int yy_markedPos_l;
    int yy_endRead_l = yy_endRead;
    char [] yy_buffer_l = yy_buffer;
    char [] yycmap_l = yycmap;

    int [] yytrans_l = yytrans;
    int [] yy_rowMap_l = yy_rowMap;
    byte [] yy_attr_l = YY_ATTRIBUTE;

    while (true) {
      yy_markedPos_l = yy_markedPos;

      boolean yy_r = false;
      for (yy_currentPos_l = yy_startRead; yy_currentPos_l < yy_markedPos_l;
                                                             yy_currentPos_l++) {
        switch (yy_buffer_l[yy_currentPos_l]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          yy_r = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          yy_r = true;
          break;
        case '\n':
          if (yy_r)
            yy_r = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          yy_r = false;
          yycolumn++;
        }
      }

      if (yy_r) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean yy_peek;
        if (yy_markedPos_l < yy_endRead_l)
          yy_peek = yy_buffer_l[yy_markedPos_l] == '\n';
        else if (yy_atEOF)
          yy_peek = false;
        else {
          boolean eof = yy_refill();
          yy_markedPos_l = yy_markedPos;
          yy_buffer_l = yy_buffer;
          if (eof) 
            yy_peek = false;
          else 
            yy_peek = yy_buffer_l[yy_markedPos_l] == '\n';
        }
        if (yy_peek) yyline--;
      }
      yy_action = -1;

      yy_startRead_l = yy_currentPos_l = yy_currentPos = 
                       yy_startRead = yy_markedPos_l;

      yy_state = yy_lexical_state;


      yy_forAction: {
        while (true) {

          if (yy_currentPos_l < yy_endRead_l)
            yy_input = yy_buffer_l[yy_currentPos_l++];
          else if (yy_atEOF) {
            yy_input = YYEOF;
            break yy_forAction;
          }
          else {
            // store back cached positions
            yy_currentPos  = yy_currentPos_l;
            yy_markedPos   = yy_markedPos_l;
            boolean eof = yy_refill();
            // get translated positions and possibly new buffer
            yy_currentPos_l  = yy_currentPos;
            yy_markedPos_l   = yy_markedPos;
            yy_buffer_l      = yy_buffer;
            yy_endRead_l     = yy_endRead;
            if (eof) {
              yy_input = YYEOF;
              break yy_forAction;
            }
            else {
              yy_input = yy_buffer_l[yy_currentPos_l++];
            }
          }
          int yy_next = yytrans_l[ yy_rowMap_l[yy_state] + yycmap_l[yy_input] ];
          if (yy_next == -1) break yy_forAction;
          yy_state = yy_next;

          int yy_attributes = yy_attr_l[yy_state];
          if ( (yy_attributes & 1) == 1 ) {
            yy_action = yy_state; 
            yy_markedPos_l = yy_currentPos_l; 
            if ( (yy_attributes & 8) == 8 ) break yy_forAction;
          }

        }
      }

      // store back cached position
      yy_markedPos = yy_markedPos_l;

      switch (yy_action) {

        case 35: 
          {  return symbol(RBRACE);  }
        case 642: break;
        case 3: 
        case 4: 
          {  /* ignore */  }
        case 643: break;
        case 32: 
          {  return symbol(LPAREN);  }
        case 644: break;
        case 33: 
          {  return symbol(RPAREN);  }
        case 645: break;
        case 34: 
          {  return symbol(LBRACE);  }
        case 646: break;
        case 45: 
          {  /* ignore */  }
        case 647: break;
        case 54: 
          {  return symbol(FLOATING_POINT_LITERAL, new Double(yytext().substring(0,yylength()-1)));  }
        case 648: break;
        case 390: 
          {  return symbol(REPEAT);  }
        case 649: break;
        case 392: 
          {  return symbol(REMOVE);  }
        case 650: break;
        case 395: 
          {  return symbol(SERIAL);  }
        case 651: break;
        case 396: 
          {  return symbol(STRING);  }
        case 652: break;
        case 397: 
          {  return symbol(STATIC);  }
        case 653: break;
        case 399: 
          {  return symbol(SCRIPT);  }
        case 654: break;
        case 401: 
          {  return symbol(SYMBOL);  }
        case 655: break;
        case 408: 
          {  return symbol(ONETON);  }
        case 656: break;
        case 418: 
          {  return symbol(TABLES);  }
        case 657: break;
        case 420: 
          {  return symbol(DEFINE);  }
        case 658: break;
        case 422: 
          {  return symbol(DELETE);  }
        case 659: break;
        case 423: 
          {  return symbol(DIRECT);  }
        case 660: break;
        case 425: 
          {  return symbol(DOUBLE);  }
        case 661: break;
        case 436: 
          {  return symbol(BINARY);  }
        case 662: break;
        case 438: 
          {  return symbol(LENGTH);  }
        case 663: break;
        case 439: 
          {  return symbol(LOCKED);  }
        case 664: break;
        case 441: 
          {  return symbol(UNIQUE);  }
        case 665: break;
        case 446: 
          {  return symbol(MODULE);  }
        case 666: break;
        case 451: 
          {  return symbol(VERSION);  }
        case 667: break;
        case 452: 
          {  return symbol(VSTRING);  }
        case 668: break;
        case 462: 
          {  return symbol(INTEGER);  }
        case 669: break;
        case 463: 
          {  return symbol(INFRAME);  }
        case 670: break;
        case 465: 
          {  return symbol(INCLUDE);  }
        case 671: break;
        case 473: 
          {  return symbol(PRIMARY);  }
        case 672: break;
        case 477: 
          {  return symbol(DEFAULT);  }
        case 673: break;
        case 481: 
          {  return symbol(DYNAMIC);  }
        case 674: break;
        case 483: 
          {  return symbol(FOREIGN);  }
        case 675: break;
        case 484: 
          {  return symbol(FORWARD);  }
        case 676: break;
        case 486: 
          {  return symbol(FORMULA);  }
        case 677: break;
        case 489: 
          {  return symbol(BROWSER);  }
        case 678: break;
        case 491: 
          {  return symbol(HISTORY);  }
        case 679: break;
        case 496: 
          {  return symbol(MODULES);  }
        case 680: break;
        case 43: 
          {  string.append( '\\' );  }
        case 681: break;
        case 41: 
        case 42: 
          {  multiline = true; string.append( yytext() );  }
        case 682: break;
        case 39: 
          {  yybegin(STRINGLITERAL); multiline = false; string.setLength(0);  }
        case 683: break;
        case 47: 
        case 51: 
        case 52: 
        case 53: 
        case 129: 
        case 130: 
        case 221: 
        case 222: 
        case 308: 
        case 309: 
        case 385: 
        case 386: 
        case 449: 
        case 450: 
        case 499: 
        case 500: 
        case 537: 
        case 538: 
        case 566: 
        case 567: 
        case 588: 
        case 589: 
        case 602: 
        case 603: 
        case 613: 
        case 614: 
        case 621: 
        case 622: 
        case 627: 
        case 628: 
        case 630: 
        case 631: 
        case 633: 
          {  return symbol(INTEGER_LITERAL, new Integer((int) parseLong(yytext(),8)));  }
        case 684: break;
        case 122: 
          {  string.append( '\t' );  }
        case 685: break;
        case 123: 
          {  string.append( '\n' );  }
        case 686: break;
        case 124: 
          {  string.append( '\r' );  }
        case 687: break;
        case 216: 
          {  return symbol(KEY);  }
        case 688: break;
        case 214: 
          {  return symbol(MAX);  }
        case 689: break;
        case 211: 
          {  return symbol(MIN);  }
        case 690: break;
        case 203: 
          {  return symbol(USE);  }
        case 691: break;
        case 189: 
          {  return symbol(FOR);  }
        case 692: break;
        case 179: 
          {  return symbol(DES);  }
        case 693: break;
        case 38: 
          {  return symbol(EQ);  }
        case 694: break;
        case 10: 
          {  return symbol(DOT);  }
        case 695: break;
        case 75: 
          {  return symbol(OF);  }
        case 696: break;
        case 79: 
          {  return symbol(AS);  }
        case 697: break;
        case 88: 
          {  return symbol(TO);  }
        case 698: break;
        case 104: 
          {  return symbol(BY);  }
        case 699: break;
        case 144: 
          {  return symbol(SET);  }
        case 700: break;
        case 162: 
          {  return symbol(NEW);  }
        case 701: break;
        case 164: 
          {  return symbol(NOT);  }
        case 702: break;
        case 172: 
          {  return symbol(ALL);  }
        case 703: break;
        case 36: 
          {  return symbol(SEMICOLON);  }
        case 704: break;
        case 501: 
          {  return symbol(READONLY);  }
        case 705: break;
        case 502: 
          {  return symbol(RELATION);  }
        case 706: break;
        case 503: 
          {  return symbol(REQUIRED);  }
        case 707: break;
        case 509: 
          {  return symbol(INTERVAL);  }
        case 708: break;
        case 519: 
          {  return symbol(TABLESET);  }
        case 709: break;
        case 521: 
          {  return symbol(DISABLED);  }
        case 710: break;
        case 522: 
          {  return symbol(DATETIME);  }
        case 711: break;
        case 528: 
          {  return symbol(BROWSERS);  }
        case 712: break;
        case 529: 
          {  return symbol(BACKWARD);  }
        case 713: break;
        case 534: 
          {  return symbol(CATEGORY);  }
        case 714: break;
        case 535: 
          {  return symbol(XMLFORMS);  }
        case 715: break;
        case 544: 
          {  return symbol(INVISIBLE);  }
        case 716: break;
        case 545: 
          {  return symbol(INFOFIELD);  }
        case 717: break;
        case 546: 
          {  return symbol(ASCENDING);  }
        case 718: break;
        case 553: 
          {  return symbol(TABLERULE);  }
        case 719: break;
        case 554: 
          {  return symbol(TABLESETS);  }
        case 720: break;
        case 558: 
          {  return symbol(FORMORDER);  }
        case 721: break;
        case 562: 
          {  return symbol(CONDITION);  }
        case 722: break;
        case 49: 
          {  return symbol(INTEGER_LITERAL, new Long(yytext().substring(0,yylength()-1)));  }
        case 723: break;
        case 371: 
          {  return symbol(LABEL);  }
        case 724: break;
        case 364: 
          {  return symbol(FLOAT);  }
        case 725: break;
        case 361: 
          {  return symbol(FORMS);  }
        case 726: break;
        case 347: 
          {  return symbol(TABLE);  }
        case 727: break;
        case 346: 
          {  return symbol(TITLE);  }
        case 728: break;
        case 343: 
          {  return symbol(ALIAS);  }
        case 729: break;
        case 337: 
          {  return symbol(NODES);  }
        case 730: break;
        case 335: 
          {  return symbol(ORDER);  }
        case 731: break;
        case 331: 
          {  return symbol(INDEX);  }
        case 732: break;
        case 325: 
          {  return symbol(SCALE);  }
        case 733: break;
        case 322: 
          {  return symbol(SHORT);  }
        case 734: break;
        case 312: 
          {  return symbol(EDGES);  }
        case 735: break;
        case 305: 
          {  return symbol(MTON);  }
        case 736: break;
        case 294: 
          {  return symbol(WITH);  }
        case 737: break;
        case 292: 
          {  return symbol(WEBQ);  }
        case 738: break;
        case 288: 
          {  return symbol(BYTE);  }
        case 739: break;
        case 278: 
          {  return symbol(FILE);  }
        case 740: break;
        case 277: 
          {  return symbol(FROM);  }
        case 741: break;
        case 274: 
          {  return symbol(DATE);  }
        case 742: break;
        case 267: 
          {  return symbol(DESC);  }
        case 743: break;
        case 266: 
          {  return symbol(TYPE);  }
        case 744: break;
        case 263: 
          {  return symbol(TEXT);  }
        case 745: break;
        case 254: 
          {  return symbol(NULL);  }
        case 746: break;
        case 252: 
          {  return symbol(NONE);  }
        case 747: break;
        case 235: 
          {  return symbol(SAME);  }
        case 748: break;
        case 234: 
          {  return symbol(SIZE);  }
        case 749: break;
        case 232: 
          {  return symbol(RULE);  }
        case 750: break;
        case 227: 
          {  return symbol(READ);  }
        case 751: break;
        case 225: 
          {  return symbol(ENUM);  }
        case 752: break;
        case 37: 
          {  return symbol(COMMA);  }
        case 753: break;
        case 372: 
          {  return symbol(WRITE);  }
        case 754: break;
        case 374: 
          {  return symbol(USING);  }
        case 755: break;
        case 380: 
          {  return symbol(CACHE);  }
        case 756: break;
        case 381: 
          {  return symbol(MONEY);  }
        case 757: break;
        case 624: 
          {  return symbol(SYSTEMTABLEKEY);  }
        case 758: break;
        case 623: 
          {  return symbol(SYSTEMTABLESET);  }
        case 759: break;
        case 6: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
        case 16: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
        case 24: 
        case 25: 
        case 26: 
        case 27: 
        case 28: 
        case 29: 
        case 30: 
        case 31: 
        case 58: 
        case 59: 
        case 60: 
        case 61: 
        case 62: 
        case 63: 
        case 64: 
        case 65: 
        case 66: 
        case 67: 
        case 68: 
        case 69: 
        case 70: 
        case 71: 
        case 72: 
        case 73: 
        case 74: 
        case 76: 
        case 77: 
        case 78: 
        case 80: 
        case 81: 
        case 82: 
        case 83: 
        case 84: 
        case 85: 
        case 86: 
        case 87: 
        case 89: 
        case 90: 
        case 91: 
        case 92: 
        case 93: 
        case 94: 
        case 95: 
        case 96: 
        case 97: 
        case 98: 
        case 99: 
        case 100: 
        case 101: 
        case 102: 
        case 103: 
        case 105: 
        case 106: 
        case 107: 
        case 108: 
        case 109: 
        case 110: 
        case 111: 
        case 112: 
        case 113: 
        case 114: 
        case 115: 
        case 116: 
        case 117: 
        case 118: 
        case 119: 
        case 120: 
        case 121: 
        case 133: 
        case 134: 
        case 135: 
        case 136: 
        case 137: 
        case 138: 
        case 139: 
        case 140: 
        case 141: 
        case 142: 
        case 143: 
        case 145: 
        case 146: 
        case 147: 
        case 148: 
        case 149: 
        case 150: 
        case 151: 
        case 152: 
        case 153: 
        case 154: 
        case 155: 
        case 156: 
        case 157: 
        case 158: 
        case 159: 
        case 160: 
        case 161: 
        case 163: 
        case 165: 
        case 166: 
        case 167: 
        case 168: 
        case 169: 
        case 170: 
        case 171: 
        case 173: 
        case 174: 
        case 175: 
        case 176: 
        case 177: 
        case 178: 
        case 180: 
        case 181: 
        case 182: 
        case 183: 
        case 184: 
        case 185: 
        case 186: 
        case 187: 
        case 188: 
        case 190: 
        case 191: 
        case 192: 
        case 193: 
        case 194: 
        case 195: 
        case 196: 
        case 197: 
        case 198: 
        case 199: 
        case 200: 
        case 201: 
        case 202: 
        case 204: 
        case 205: 
        case 206: 
        case 207: 
        case 208: 
        case 209: 
        case 210: 
        case 212: 
        case 213: 
        case 215: 
        case 217: 
        case 223: 
        case 224: 
        case 226: 
        case 228: 
        case 229: 
        case 230: 
        case 231: 
        case 233: 
        case 236: 
        case 237: 
        case 238: 
        case 239: 
        case 240: 
        case 241: 
        case 242: 
        case 243: 
        case 244: 
        case 245: 
        case 246: 
        case 247: 
        case 248: 
        case 249: 
        case 250: 
        case 251: 
        case 253: 
        case 255: 
        case 256: 
        case 257: 
        case 258: 
        case 259: 
        case 260: 
        case 261: 
        case 262: 
        case 264: 
        case 265: 
        case 268: 
        case 269: 
        case 270: 
        case 271: 
        case 272: 
        case 273: 
        case 275: 
        case 276: 
        case 279: 
        case 280: 
        case 281: 
        case 282: 
        case 283: 
        case 284: 
        case 285: 
        case 286: 
        case 287: 
        case 289: 
        case 290: 
        case 291: 
        case 293: 
        case 295: 
        case 296: 
        case 297: 
        case 298: 
        case 299: 
        case 300: 
        case 301: 
        case 302: 
        case 303: 
        case 304: 
        case 306: 
        case 310: 
        case 311: 
        case 313: 
        case 314: 
        case 315: 
        case 316: 
        case 317: 
        case 318: 
        case 319: 
        case 320: 
        case 321: 
        case 323: 
        case 324: 
        case 326: 
        case 327: 
        case 328: 
        case 329: 
        case 330: 
        case 332: 
        case 333: 
        case 334: 
        case 336: 
        case 338: 
        case 339: 
        case 340: 
        case 341: 
        case 342: 
        case 344: 
        case 345: 
        case 348: 
        case 349: 
        case 350: 
        case 351: 
        case 352: 
        case 353: 
        case 354: 
        case 355: 
        case 356: 
        case 357: 
        case 358: 
        case 359: 
        case 360: 
        case 362: 
        case 363: 
        case 365: 
        case 366: 
        case 367: 
        case 368: 
        case 369: 
        case 370: 
        case 373: 
        case 375: 
        case 376: 
        case 377: 
        case 378: 
        case 379: 
        case 382: 
        case 383: 
        case 387: 
        case 388: 
        case 389: 
        case 391: 
        case 393: 
        case 394: 
        case 398: 
        case 400: 
        case 402: 
        case 403: 
        case 404: 
        case 405: 
        case 406: 
        case 407: 
        case 409: 
        case 410: 
        case 411: 
        case 412: 
        case 413: 
        case 414: 
        case 415: 
        case 416: 
        case 417: 
        case 419: 
        case 421: 
        case 424: 
        case 426: 
        case 427: 
        case 428: 
        case 429: 
        case 430: 
        case 431: 
        case 432: 
        case 433: 
        case 434: 
        case 435: 
        case 437: 
        case 440: 
        case 442: 
        case 443: 
        case 444: 
        case 445: 
        case 447: 
        case 453: 
        case 454: 
        case 455: 
        case 456: 
        case 457: 
        case 458: 
        case 459: 
        case 460: 
        case 461: 
        case 464: 
        case 466: 
        case 467: 
        case 468: 
        case 469: 
        case 470: 
        case 471: 
        case 472: 
        case 474: 
        case 475: 
        case 476: 
        case 478: 
        case 479: 
        case 480: 
        case 482: 
        case 485: 
        case 487: 
        case 488: 
        case 490: 
        case 492: 
        case 493: 
        case 494: 
        case 495: 
        case 497: 
        case 504: 
        case 505: 
        case 506: 
        case 507: 
        case 508: 
        case 510: 
        case 511: 
        case 512: 
        case 513: 
        case 514: 
        case 515: 
        case 516: 
        case 517: 
        case 518: 
        case 520: 
        case 523: 
        case 524: 
        case 525: 
        case 526: 
        case 527: 
        case 530: 
        case 531: 
        case 532: 
        case 533: 
        case 539: 
        case 540: 
        case 541: 
        case 542: 
        case 543: 
        case 547: 
        case 548: 
        case 549: 
        case 550: 
        case 551: 
        case 552: 
        case 555: 
        case 556: 
        case 557: 
        case 559: 
        case 560: 
        case 561: 
        case 563: 
        case 564: 
        case 568: 
        case 571: 
        case 572: 
        case 575: 
        case 576: 
        case 577: 
        case 581: 
        case 582: 
        case 583: 
        case 584: 
        case 586: 
        case 594: 
        case 596: 
        case 597: 
        case 598: 
        case 599: 
        case 600: 
        case 604: 
        case 605: 
        case 606: 
        case 607: 
        case 611: 
        case 615: 
        case 616: 
        case 617: 
          {  return symbol(IDENTIFIER, yytext());  }
        case 760: break;
        case 219: 
          {  return symbol(INTEGER_LITERAL, new Long(parseLong(yytext().substring(2,yylength()-1),16)));  }
        case 761: break;
        case 126: 
          {  return symbol(INTEGER_LITERAL, new Long(parseLong(yytext().substring(0,yylength()-1),8)));  }
        case 762: break;
        case 48: 
        case 55: 
        case 131: 
        case 634: 
        case 636: 
        case 637: 
        case 638: 
        case 639: 
        case 640: 
          {  return symbol(FLOATING_POINT_LITERAL, new Double(yytext()));  }
        case 763: break;
        case 610: 
          {  return symbol(HISTORYFIELD);  }
        case 764: break;
        case 625: 
          {  return symbol(AFTERNETCREATE);  }
        case 765: break;
        case 618: 
          {  return symbol(FILLDIRECTION);  }
        case 766: break;
        case 44: 
          {  yybegin(YYINITIAL); return symbol(multiline ? MULTILINE_STRING_LITERAL : STRING_LITERAL, string.toString());  }
        case 767: break;
        case 619: 
          {  return symbol(CASESENSITIVE);  }
        case 768: break;
        case 608: 
          {  return symbol(BEFORESEARCH);  }
        case 769: break;
        case 609: 
          {  return symbol(BEFOREUPDATE);  }
        case 770: break;
        case 7: 
        case 9: 
        case 57: 
          {  return symbol(INTEGER_LITERAL, new Integer(yytext()));  }
        case 771: break;
        case 40: 
          {  string.append( yytext() );  }
        case 772: break;
        case 127: 
        case 128: 
        case 220: 
        case 307: 
        case 384: 
        case 448: 
        case 498: 
        case 536: 
        case 565: 
          {  return symbol(INTEGER_LITERAL, new Integer((int) parseLong(yytext().substring(2),16)));  }
        case 773: break;
        case 569: 
          {  return symbol(RULESERVER);  }
        case 774: break;
        case 570: 
          {  return symbol(SUMMARYROW);  }
        case 775: break;
        case 573: 
          {  return symbol(ANCHORLEFT);  }
        case 776: break;
        case 574: 
          {  return symbol(APPVERSION);  }
        case 777: break;
        case 578: 
          {  return symbol(PERMISSION);  }
        case 778: break;
        case 579: 
          {  return symbol(DESCENDING);  }
        case 779: break;
        case 580: 
          {  return symbol(DATASOURCE);  }
        case 780: break;
        case 585: 
          {  return symbol(COLSUMMARY);  }
        case 781: break;
        case 590: 
          {  return symbol(RELATIONSET);  }
        case 782: break;
        case 591: 
          {  return symbol(SYSTEMTABLE);  }
        case 783: break;
        case 592: 
          {  return symbol(SYSTEMFIELD);  }
        case 784: break;
        case 593: 
          {  return symbol(APPLICATION);  }
        case 785: break;
        case 595: 
          {  return symbol(AFTERUPDATE);  }
        case 786: break;
        case 2: 
        case 5: 
        case 8: 
          {  throw new RuntimeException("Illegal character \""+yytext()+
                                                              "\" at line "+(yyline+1)+", column "+(yycolumn+1));  }
        case 787: break;
        default: 
          if (yy_input == YYEOF && yy_startRead == yy_currentPos) {
            yy_atEOF = true;
            yy_do_eof();
              {  return symbol(EOF);  }
          } 
          else {
            yy_ScanError(YY_NO_MATCH);
          }
      }
    }
  }


}
