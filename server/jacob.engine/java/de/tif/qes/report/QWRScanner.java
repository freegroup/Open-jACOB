/* The following code was generated by JFlex 1.3.5 on 23.02.11 12:46 */

/*
     This file is part of jACOB
     Copyright (C) 2005-2009 Tarragon GmbH
  
     This program is free software; you can redistribute it and/or modify
     it under the terms of the GNU General Public License as published by
     the Free Software Foundation; version 2 of the License.
  
     This program is distributed in the hope that it will be useful,
     but WITHOUT ANY WARRANTY; without even the implied warranty of
     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     GNU General Public License for more details.
  
     You should have received a copy of the GNU General Public License     
     along with this program; if not, write to the Free Software
     Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  
     USA
*/

package de.tif.qes.report;

import java_cup.runtime.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.3.5
 * on 23.02.11 12:46 from the specification file
 * <tt>file:/Users/andherz/Documents/workspace/jacob.engine/JFlex/qwr.flex</tt>
 */
public class QWRScanner implements QWRSym, java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  final public static int YYEOF = -1;

  /** initial size of the lookahead buffer */
  final private static int YY_BUFFERSIZE = 16384;

  /** lexical states */
  final public static int STRINGLITERAL = 1;
  final public static int YYINITIAL = 0;

  /** 
   * Translates characters to character classes
   */
  final private static String yycmap_packed = 
    "\11\7\1\3\1\2\1\0\1\3\1\1\16\7\4\0\1\3\1\0"+
    "\1\63\1\0\1\6\3\0\1\55\1\56\1\5\1\11\1\62\1\11"+
    "\1\22\1\4\1\10\1\17\2\16\4\20\2\12\1\0\1\61\5\0"+
    "\1\25\1\44\1\27\1\35\1\34\1\45\1\37\1\30\1\36\1\47"+
    "\1\50\1\41\1\43\1\26\1\31\1\46\1\6\1\32\1\33\1\40"+
    "\1\42\1\53\1\54\1\14\1\51\1\6\1\0\1\24\2\0\1\52"+
    "\1\0\3\15\1\21\1\23\1\21\5\6\1\13\1\6\1\65\3\6"+
    "\1\66\1\6\1\64\3\6\1\14\2\6\1\57\1\0\1\60\1\0"+
    "\41\7\2\0\4\6\4\0\1\6\2\0\1\7\7\0\1\6\4\0"+
    "\1\6\5\0\27\6\1\0\37\6\1\0\u013f\6\31\0\162\6\4\0"+
    "\14\6\16\0\5\6\11\0\1\6\21\0\130\7\5\0\23\7\12\0"+
    "\1\6\13\0\1\6\1\0\3\6\1\0\1\6\1\0\24\6\1\0"+
    "\54\6\1\0\46\6\1\0\5\6\4\0\202\6\1\0\4\7\3\0"+
    "\105\6\1\0\46\6\2\0\2\6\6\0\20\6\41\0\46\6\2\0"+
    "\1\6\7\0\47\6\11\0\21\7\1\0\27\7\1\0\3\7\1\0"+
    "\1\7\1\0\2\7\1\0\1\7\13\0\33\6\5\0\3\6\15\0"+
    "\4\7\14\0\6\7\13\0\32\6\5\0\13\6\16\7\7\0\12\7"+
    "\4\0\2\6\1\7\143\6\1\0\1\6\10\7\1\0\6\7\2\6"+
    "\2\7\1\0\4\7\2\6\12\7\3\6\2\0\1\6\17\0\1\7"+
    "\1\6\1\7\36\6\33\7\2\0\3\6\60\0\46\6\13\7\1\6"+
    "\u014f\0\3\7\66\6\2\0\1\7\1\6\20\7\2\0\1\6\4\7"+
    "\3\0\12\6\2\7\2\0\12\7\21\0\3\7\1\0\10\6\2\0"+
    "\2\6\2\0\26\6\1\0\7\6\1\0\1\6\3\0\4\6\2\0"+
    "\1\7\1\6\7\7\2\0\2\7\2\0\3\7\11\0\1\7\4\0"+
    "\2\6\1\0\3\6\2\7\2\0\12\7\4\6\15\0\3\7\1\0"+
    "\6\6\4\0\2\6\2\0\26\6\1\0\7\6\1\0\2\6\1\0"+
    "\2\6\1\0\2\6\2\0\1\7\1\0\5\7\4\0\2\7\2\0"+
    "\3\7\13\0\4\6\1\0\1\6\7\0\14\7\3\6\14\0\3\7"+
    "\1\0\11\6\1\0\3\6\1\0\26\6\1\0\7\6\1\0\2\6"+
    "\1\0\5\6\2\0\1\7\1\6\10\7\1\0\3\7\1\0\3\7"+
    "\2\0\1\6\17\0\2\6\2\7\2\0\12\7\1\0\1\6\17\0"+
    "\3\7\1\0\10\6\2\0\2\6\2\0\26\6\1\0\7\6\1\0"+
    "\2\6\1\0\5\6\2\0\1\7\1\6\6\7\3\0\2\7\2\0"+
    "\3\7\10\0\2\7\4\0\2\6\1\0\3\6\4\0\12\7\1\0"+
    "\1\6\20\0\1\7\1\6\1\0\6\6\3\0\3\6\1\0\4\6"+
    "\3\0\2\6\1\0\1\6\1\0\2\6\3\0\2\6\3\0\3\6"+
    "\3\0\10\6\1\0\3\6\4\0\5\7\3\0\3\7\1\0\4\7"+
    "\11\0\1\7\17\0\11\7\11\0\1\6\7\0\3\7\1\0\10\6"+
    "\1\0\3\6\1\0\27\6\1\0\12\6\1\0\5\6\4\0\7\7"+
    "\1\0\3\7\1\0\4\7\7\0\2\7\11\0\2\6\4\0\12\7"+
    "\22\0\2\7\1\0\10\6\1\0\3\6\1\0\27\6\1\0\12\6"+
    "\1\0\5\6\2\0\1\7\1\6\7\7\1\0\3\7\1\0\4\7"+
    "\7\0\2\7\7\0\1\6\1\0\2\6\4\0\12\7\22\0\2\7"+
    "\1\0\10\6\1\0\3\6\1\0\27\6\1\0\20\6\4\0\6\7"+
    "\2\0\3\7\1\0\4\7\11\0\1\7\10\0\2\6\4\0\12\7"+
    "\22\0\2\7\1\0\22\6\3\0\30\6\1\0\11\6\1\0\1\6"+
    "\2\0\7\6\3\0\1\7\4\0\6\7\1\0\1\7\1\0\10\7"+
    "\22\0\2\7\15\0\60\6\1\7\2\6\7\7\4\0\10\6\10\7"+
    "\1\0\12\7\47\0\2\6\1\0\1\6\2\0\2\6\1\0\1\6"+
    "\2\0\1\6\6\0\4\6\1\0\7\6\1\0\3\6\1\0\1\6"+
    "\1\0\1\6\2\0\2\6\1\0\4\6\1\7\2\6\6\7\1\0"+
    "\2\7\1\6\2\0\5\6\1\0\1\6\1\0\6\7\2\0\12\7"+
    "\2\0\2\6\42\0\1\6\27\0\2\7\6\0\12\7\13\0\1\7"+
    "\1\0\1\7\1\0\1\7\4\0\2\7\10\6\1\0\42\6\6\0"+
    "\24\7\1\0\2\7\4\6\4\0\10\7\1\0\44\7\11\0\1\7"+
    "\71\0\42\6\1\0\5\6\1\0\2\6\1\0\7\7\3\0\4\7"+
    "\6\0\12\7\6\0\6\6\4\7\106\0\46\6\12\0\51\6\7\0"+
    "\132\6\5\0\104\6\5\0\122\6\6\0\7\6\1\0\77\6\1\0"+
    "\1\6\1\0\4\6\2\0\7\6\1\0\1\6\1\0\4\6\2\0"+
    "\47\6\1\0\1\6\1\0\4\6\2\0\37\6\1\0\1\6\1\0"+
    "\4\6\2\0\7\6\1\0\1\6\1\0\4\6\2\0\7\6\1\0"+
    "\7\6\1\0\27\6\1\0\37\6\1\0\1\6\1\0\4\6\2\0"+
    "\7\6\1\0\47\6\1\0\23\6\16\0\11\7\56\0\125\6\14\0"+
    "\u026c\6\2\0\10\6\12\0\32\6\5\0\113\6\3\0\3\6\17\0"+
    "\15\6\1\0\4\6\3\7\13\0\22\6\3\7\13\0\22\6\2\7"+
    "\14\0\15\6\1\0\3\6\1\0\2\7\14\0\64\6\40\7\3\0"+
    "\1\6\3\0\2\6\1\7\2\0\12\7\41\0\3\7\2\0\12\7"+
    "\6\0\130\6\10\0\51\6\1\7\126\0\35\6\3\0\14\7\4\0"+
    "\14\7\12\0\12\7\36\6\2\0\5\6\u038b\0\154\6\224\0\234\6"+
    "\4\0\132\6\6\0\26\6\2\0\6\6\2\0\46\6\2\0\6\6"+
    "\2\0\10\6\1\0\1\6\1\0\1\6\1\0\1\6\1\0\37\6"+
    "\2\0\65\6\1\0\7\6\1\0\1\6\3\0\3\6\1\0\7\6"+
    "\3\0\4\6\2\0\6\6\4\0\15\6\5\0\3\6\1\0\7\6"+
    "\17\0\4\7\32\0\5\7\20\0\2\6\23\0\1\6\13\0\4\7"+
    "\6\0\6\7\1\0\1\6\15\0\1\6\40\0\22\6\36\0\15\7"+
    "\4\0\1\7\3\0\6\7\27\0\1\6\4\0\1\6\2\0\12\6"+
    "\1\0\1\6\3\0\5\6\6\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\4\6\1\0\3\6\1\0\7\6\3\0\3\6\5\0\5\6"+
    "\26\0\44\6\u0e81\0\3\6\31\0\11\6\6\7\1\0\5\6\2\0"+
    "\5\6\4\0\126\6\2\0\2\7\2\0\3\6\1\0\137\6\5\0"+
    "\50\6\4\0\136\6\21\0\30\6\70\0\20\6\u0200\0\u19b6\6\112\0"+
    "\u51a6\6\132\0\u048d\6\u0773\0\u2ba4\6\u215c\0\u012e\6\2\0\73\6\225\0"+
    "\7\6\14\0\5\6\5\0\1\6\1\7\12\6\1\0\15\6\1\0"+
    "\5\6\1\0\1\6\1\0\2\6\1\0\2\6\1\0\154\6\41\0"+
    "\u016b\6\22\0\100\6\2\0\66\6\50\0\15\6\3\0\20\7\20\0"+
    "\4\7\17\0\2\6\30\0\3\6\31\0\1\6\6\0\5\6\1\0"+
    "\207\6\2\0\1\7\4\0\1\6\13\0\12\7\7\0\32\6\4\0"+
    "\1\6\1\0\32\6\12\0\132\6\3\0\6\6\2\0\6\6\2\0"+
    "\6\6\2\0\3\6\3\0\2\6\3\0\2\6\22\0\3\7\4\0";

  /** 
   * Translates characters to character classes
   */
  final private static char [] yycmap = yy_unpack_cmap(yycmap_packed);

  /** 
   * Translates a state to a row index in the transition table
   */
  final private static int yy_rowMap [] = { 
        0,    55,   110,   165,   110,   220,   275,   330,   385,   440, 
      495,   550,   605,   660,   715,   770,   825,   880,   935,   990, 
     1045,  1100,  1155,  1210,  1265,  1320,  1375,  1430,  1485,  1540, 
      110,   110,   110,   110,   110,   110,   110,  1595,  1650,   110, 
     1705,   110,  1760,  1815,  1870,  1925,   110,  1980,  2035,  2090, 
     2145,   110,  2200,  2255,  2310,  2365,  2420,  2475,  2530,  2585, 
     2640,  2695,  2750,   275,  2805,  2860,  2915,  2970,  3025,  3080, 
     3135,  3190,  3245,  3300,  3355,  3410,  3465,  3520,  3575,  3630, 
     3685,  3740,  3795,  3850,  3905,  3960,  4015,  4070,  4125,  4180, 
     4235,  4290,  4345,  4400,   110,   110,   110,   110,  4455,   110, 
     4510,  4565,  4620,  4675,  4730,  4785,  4840,  4895,  4950,  5005, 
     5060,  5115,  5170,  5225,  5280,  5335,  5390,  5445,  5500,  5555, 
     5610,  5665,  5720,   275,  5775,  5830,  5885,  5940,  5995,  6050, 
     6105,  6160,  6215,  6270,  6325,  6380,  6435,  6490,  6545,  6600, 
     6655,   275,  6710,  6765,  6820,  6875,  6930,  6985,  7040,   275, 
     7095,  7150,  7205,  7260,   110,  7315,  7370,  7425,  7480,  7535, 
     7590,  7645,  7700,  7755,  7810,  7865,  7920,  7975,  8030,   275, 
     8085,  8140,  8195,  8250,  8305,  8360,   275,  8415,  8470,  8525, 
     8580,  8635,  8690,  8745,  8800,  8855,  8910,  8965,  9020,   275, 
     9075,   275,  9130,  9185,  9240,  9295,  9350,   275,  9405,   275, 
     9460,  9515,  9570,  9625,  9680,  9735,  9790,  9845,  9900,  9955, 
    10010,   275, 10065, 10120,   275, 10175, 10230, 10285, 10340, 10395, 
    10450, 10505, 10560, 10615,   275, 10670, 10725, 10780, 10835, 10890, 
    10945, 11000, 11055, 11110, 11165, 11220, 11275,   275, 11330, 11385, 
      275, 11440,   275, 11495, 11550, 11605, 11660, 11715, 11770, 11825, 
    11880, 11935,   275, 11990, 12045, 12100,   275, 12155,   275, 12210, 
    12265,   275,   275,   275,   275, 12320,   275, 12375,   275,   275, 
    12430, 12485, 12540, 12595, 12650, 12705, 12760, 12815, 12870,   275, 
    12925, 12980, 13035, 13090, 13145,   275, 13200, 13255, 13310, 13365, 
    13420, 13475, 13530, 13585, 13640, 13695, 13750, 13805, 13860, 13915, 
    13970, 14025, 14080, 14135,   275, 14190, 14245, 14300, 14355, 14410, 
      275,   275, 14465, 14520, 14575, 14630, 14685, 14740,   275, 14795, 
    14850,   275, 14905, 14960, 15015, 15070, 15125, 15180, 15235,   275, 
    15290, 15345, 15400,   275,   275, 15455, 15510, 15565, 15620, 15675, 
      275,   275,   275,   275, 15730,   275, 15785, 15840, 15895,   275, 
    15950, 16005, 16060, 16115,   275, 16170, 16225, 16280, 16335, 16390, 
      275, 16445, 16500, 16555, 16610,   275,   275, 16665,   275, 16720, 
    16775,   275, 16830, 16885, 16940, 16995, 17050, 17105, 17160, 17215, 
      275,   275, 17270, 17325, 17380, 17435, 17490,   275,   275, 17545, 
    17600, 17655, 17710, 17765, 17820,   275, 17875, 17930, 17985, 18040, 
    18095, 18150, 18205,   275, 18260, 18315, 18370, 18425, 18480, 18480, 
    18535, 18590, 18645, 18700, 18755, 18810
  };

  /** 
   * The packed transition table of the DFA (part 0)
   */
  final private static String yy_packed0 = 
    "\1\3\1\4\2\5\1\6\1\3\1\7\1\3\1\10"+
    "\1\11\1\12\3\7\3\12\1\7\1\13\1\7\1\3"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\7\1\25\1\26\1\27\1\30\2\7\1\31"+
    "\1\32\1\33\1\34\2\7\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\3\7\1\46\1\47"+
    "\1\50\21\46\1\51\36\46\1\52\3\46\71\0\1\5"+
    "\70\0\1\53\1\54\67\0\3\7\1\0\10\7\1\0"+
    "\1\7\1\0\30\7\7\0\3\7\10\0\1\55\1\0"+
    "\1\56\1\57\1\60\1\0\1\61\1\62\1\63\1\64"+
    "\1\65\1\66\10\0\1\66\1\64\3\0\1\57\3\0"+
    "\1\64\33\0\1\67\3\0\3\67\56\0\1\12\1\0"+
    "\1\12\1\57\2\0\3\12\1\64\1\65\1\66\10\0"+
    "\1\66\1\64\3\0\1\57\3\0\1\64\31\0\1\65"+
    "\1\0\1\65\3\0\3\65\54\0\3\7\1\0\10\7"+
    "\1\0\1\7\1\0\1\7\1\70\4\7\1\71\21\7"+
    "\7\0\3\7\6\0\3\7\1\0\10\7\1\0\1\7"+
    "\1\0\4\7\1\72\23\7\7\0\3\7\6\0\3\7"+
    "\1\0\10\7\1\0\1\7\1\0\4\7\1\73\2\7"+
    "\1\74\20\7\7\0\3\7\6\0\3\7\1\0\10\7"+
    "\1\0\1\7\1\0\7\7\1\75\1\7\1\76\1\7"+
    "\1\77\14\7\7\0\3\7\6\0\3\7\1\0\10\7"+
    "\1\0\1\7\1\0\1\7\1\100\13\7\1\101\12\7"+
    "\7\0\3\7\6\0\3\7\1\0\10\7\1\0\1\7"+
    "\1\0\7\7\1\102\1\7\1\103\16\7\7\0\3\7"+
    "\6\0\3\7\1\0\10\7\1\0\1\7\1\0\2\7"+
    "\1\104\1\7\1\105\2\7\1\106\3\7\1\107\1\7"+
    "\1\110\3\7\1\111\6\7\7\0\3\7\6\0\3\7"+
    "\1\0\10\7\1\0\1\7\1\0\21\7\1\112\6\7"+
    "\7\0\3\7\6\0\3\7\1\0\10\7\1\0\1\7"+
    "\1\0\1\113\6\7\1\114\20\7\7\0\3\7\6\0"+
    "\3\7\1\0\10\7\1\0\1\7\1\0\5\7\1\115"+
    "\22\7\7\0\3\7\6\0\3\7\1\0\10\7\1\0"+
    "\1\7\1\0\1\116\4\7\1\117\16\7\1\120\3\7"+
    "\7\0\3\7\6\0\3\7\1\0\10\7\1\0\1\7"+
    "\1\0\1\121\6\7\1\122\1\7\1\123\16\7\7\0"+
    "\3\7\6\0\3\7\1\0\10\7\1\0\1\7\1\0"+
    "\6\7\1\124\21\7\7\0\3\7\6\0\3\7\1\0"+
    "\10\7\1\0\1\7\1\0\4\7\1\125\4\7\1\126"+
    "\3\7\1\127\12\7\7\0\3\7\6\0\3\7\1\0"+
    "\10\7\1\0\1\7\1\0\1\130\4\7\1\131\22\7"+
    "\7\0\3\7\6\0\3\7\1\0\10\7\1\0\1\7"+
    "\1\0\15\7\1\132\12\7\7\0\3\7\6\0\3\7"+
    "\1\0\10\7\1\0\1\7\1\0\7\7\1\133\20\7"+
    "\7\0\3\7\6\0\3\7\1\0\10\7\1\0\1\7"+
    "\1\0\1\134\6\7\1\135\20\7\7\0\3\7\6\0"+
    "\3\7\1\0\10\7\1\0\1\7\1\0\11\7\1\136"+
    "\16\7\7\0\3\7\1\46\2\0\21\46\1\0\36\46"+
    "\1\0\3\46\2\0\1\50\147\0\1\137\1\140\1\141"+
    "\1\142\1\53\1\4\1\5\64\53\67\143\10\0\1\55"+
    "\1\0\1\56\1\144\2\0\1\61\1\62\1\63\1\64"+
    "\1\65\1\66\10\0\1\66\1\64\3\0\1\144\3\0"+
    "\1\64\31\0\1\56\1\0\1\56\3\0\3\56\1\64"+
    "\1\65\1\66\10\0\1\66\1\64\7\0\1\64\31\0"+
    "\1\145\1\0\1\146\2\0\5\146\1\0\1\146\1\0"+
    "\1\146\1\0\1\146\4\0\2\146\6\0\2\146\31\0"+
    "\1\147\1\0\1\56\1\144\2\0\3\147\1\64\1\65"+
    "\1\66\10\0\1\66\1\64\3\0\1\144\3\0\1\64"+
    "\31\0\1\63\1\0\1\56\1\144\2\0\3\63\1\64"+
    "\1\65\1\66\10\0\1\66\1\64\3\0\1\144\3\0"+
    "\1\64\31\0\1\150\1\0\1\56\1\144\2\0\3\150"+
    "\1\64\1\65\1\66\10\0\1\66\1\64\3\0\1\144"+
    "\3\0\1\64\31\0\1\65\1\0\1\65\3\0\3\65"+
    "\1\64\1\0\1\66\10\0\1\66\1\64\7\0\1\64"+
    "\31\0\1\151\1\152\1\151\3\0\3\151\56\0\1\67"+
    "\1\0\1\67\1\57\2\0\3\67\20\0\1\57\33\0"+
    "\3\7\1\0\10\7\1\0\1\7\1\0\2\7\1\153"+
    "\25\7\7\0\3\7\6\0\3\7\1\0\10\7\1\0"+
    "\1\7\1\0\2\7\1\154\25\7\7\0\3\7\6\0"+
    "\3\7\1\0\10\7\1\0\1\7\1\0\1\7\1\155"+
    "\26\7\7\0\3\7\6\0\3\7\1\0\10\7\1\0"+
    "\1\7\1\0\1\7\1\156\12\7\1\157\13\7\7\0"+
    "\3\7\6\0\3\7\1\0\10\7\1\0\1\7\1\0"+
    "\1\7\1\160\26\7\7\0\3\7\6\0\3\7\1\0"+
    "\10\7\1\0\1\7\1\0\1\161\10\7\1\162\16\7"+
    "\7\0\3\7\6\0\3\7\1\0\10\7\1\0\1\7"+
    "\1\0\10\7\1\163\17\7\7\0\3\7\6\0\3\7"+
    "\1\0\10\7\1\0\1\7\1\0\16\7\1\164\11\7"+
    "\7\0\3\7\6\0\3\7\1\0\10\7\1\0\1\7"+
    "\1\0\13\7\1\165\14\7\7\0\3\7\6\0\3\7"+
    "\1\0\10\7\1\0\1\7\1\0\2\7\1\166\11\7"+
    "\1\167\4\7\1\170\6\7\7\0\3\7\6\0\3\7"+
    "\1\0\10\7\1\0\1\7\1\0\12\7\1\171\15\7"+
    "\7\0\3\7\6\0\3\7\1\0\10\7\1\0\1\7"+
    "\1\0\5\7\1\172\22\7\7\0\3\7\6\0\3\7"+
    "\1\0\10\7\1\0\1\7\1\0\5\7\1\173\22\7"+
    "\7\0\3\7\6\0\3\7\1\0\10\7\1\0\1\7"+
    "\1\0\13\7\1\174\14\7\7\0\3\7\6\0\3\7"+
    "\1\0\10\7\1\0\1\7\1\0\5\7\1\175\22\7"+
    "\7\0\3\7\6\0\3\7\1\0\10\7\1\0\1\7"+
    "\1\0\17\7\1\176\10\7\7\0\3\7\6\0\3\7"+
    "\1\0\10\7\1\0\1\7\1\0\1\177\27\7\7\0"+
    "\3\7\6\0\3\7\1\0\10\7\1\0\1\7\1\0"+
    "\11\7\1\200\16\7\7\0\3\7\6\0\3\7\1\0"+
    "\10\7\1\0\1\7\1\0\13\7\1\201\14\7\7\0"+
    "\3\7\6\0\3\7\1\0\10\7\1\0\1\7\1\0"+
    "\6\7\1\202\11\7\1\203\7\7\7\0\3\7\6\0"+
    "\3\7\1\0\10\7\1\0\1\7\1\0\4\7\1\204"+
    "\23\7\7\0\3\7\6\0\3\7\1\0\10\7\1\0"+
    "\1\7\1\0\17\7\1\205\10\7\7\0\3\7\6\0"+
    "\3\7\1\0\10\7\1\0\1\7\1\0\15\7\1\206"+
    "\12\7\7\0\3\7\6\0\3\7\1\0\10\7\1\0"+
    "\1\7\1\0\21\7\1\207\6\7\7\0\3\7\6\0"+
    "\3\7\1\0\10\7\1\0\1\7\1\0\17\7\1\210"+
    "\10\7\7\0\3\7\6\0\3\7\1\0\10\7\1\0"+
    "\1\7\1\0\20\7\1\211\7\7\7\0\3\7\6\0"+
    "\3\7\1\0\10\7\1\0\1\7\1\0\1\7\1\212"+
    "\26\7\7\0\3\7\6\0\3\7\1\0\10\7\1\0"+
    "\1\7\1\0\11\7\1\213\16\7\7\0\3\7\6\0"+
    "\3\7\1\0\10\7\1\0\1\7\1\0\1\7\1\214"+
    "\2\7\1\215\1\216\22\7\7\0\3\7\6\0\3\7"+
    "\1\0\10\7\1\0\1\7\1\0\7\7\1\217\4\7"+
    "\1\220\13\7\7\0\3\7\6\0\3\7\1\0\10\7"+
    "\1\0\1\7\1\0\1\7\1\221\26\7\7\0\3\7"+
    "\6\0\3\7\1\0\10\7\1\0\1\7\1\0\12\7"+
    "\1\222\15\7\7\0\3\7\6\0\3\7\1\0\10\7"+
    "\1\0\1\7\1\0\4\7\1\223\4\7\1\224\16\7"+
    "\7\0\3\7\6\0\3\7\1\0\10\7\1\0\1\7"+
    "\1\0\6\7\1\225\21\7\7\0\3\7\6\0\3\7"+
    "\1\0\10\7\1\0\1\7\1\0\24\7\1\226\3\7"+
    "\7\0\3\7\6\0\3\7\1\0\10\7\1\0\1\7"+
    "\1\0\14\7\1\227\13\7\7\0\3\7\6\0\3\7"+
    "\1\0\10\7\1\0\1\7\1\0\5\7\1\230\22\7"+
    "\7\0\3\7\6\0\3\7\1\0\10\7\1\0\1\7"+
    "\1\0\10\7\1\231\17\7\7\0\3\7\5\143\1\232"+
    "\61\143\10\0\1\145\1\0\1\146\1\233\1\0\5\146"+
    "\1\0\1\146\1\0\1\146\1\0\1\146\4\0\2\146"+
    "\3\0\1\233\2\0\2\146\31\0\1\234\1\0\1\234"+
    "\1\233\1\0\5\234\1\0\1\234\1\0\1\234\1\0"+
    "\1\234\4\0\2\234\3\0\1\233\2\0\2\234\31\0"+
    "\1\235\1\0\1\56\1\144\2\0\3\235\1\64\1\65"+
    "\1\66\10\0\1\66\1\64\3\0\1\144\3\0\1\64"+
    "\31\0\1\236\1\0\1\56\1\144\2\0\3\236\1\64"+
    "\1\65\1\66\10\0\1\66\1\64\3\0\1\144\3\0"+
    "\1\64\31\0\1\151\1\0\1\151\3\0\3\151\1\64"+
    "\13\0\1\64\7\0\1\64\31\0\1\151\1\0\1\151"+
    "\3\0\3\151\54\0\3\7\1\0\10\7\1\0\1\7"+
    "\1\0\3\7\1\237\24\7\7\0\3\7\6\0\3\7"+
    "\1\0\10\7\1\0\1\7\1\0\7\7\1\240\1\7"+
    "\1\241\16\7\7\0\3\7\6\0\3\7\1\0\10\7"+
    "\1\0\1\7\1\0\23\7\1\242\4\7\7\0\3\7"+
    "\6\0\3\7\1\0\10\7\1\0\1\7\1\0\6\7"+
    "\1\243\21\7\7\0\3\7\6\0\3\7\1\0\10\7"+
    "\1\0\1\7\1\0\4\7\1\244\10\7\1\245\12\7"+
    "\7\0\3\7\6\0\3\7\1\0\10\7\1\0\1\7"+
    "\1\0\13\7\1\246\14\7\7\0\3\7\6\0\3\7"+
    "\1\0\10\7\1\0\1\7\1\0\10\7\1\247\17\7"+
    "\7\0\3\7\6\0\3\7\1\0\10\7\1\0\1\7"+
    "\1\0\12\7\1\250\15\7\7\0\3\7\6\0\3\7"+
    "\1\0\10\7\1\0\1\7\1\0\10\7\1\251\17\7"+
    "\7\0\3\7\6\0\3\7\1\0\10\7\1\0\1\7"+
    "\1\0\14\7\1\252\13\7\7\0\3\7\6\0\3\7"+
    "\1\0\10\7\1\0\1\7\1\0\21\7\1\253\6\7"+
    "\7\0\3\7\6\0\3\7\1\0\10\7\1\0\1\7"+
    "\1\0\4\7\1\254\23\7\7\0\3\7\6\0\3\7"+
    "\1\0\10\7\1\0\1\7\1\0\1\255\27\7\7\0"+
    "\3\7\6\0\3\7\1\0\10\7\1\0\1\7\1\0"+
    "\4\7\1\256\23\7\7\0\3\7\6\0\3\7\1\0"+
    "\10\7\1\0\1\7\1\0\3\7\1\257\24\7\7\0"+
    "\3\7\6\0\3\7\1\0\10\7\1\0\1\7\1\0"+
    "\7\7\1\260\20\7\7\0\3\7\6\0\3\7\1\0"+
    "\10\7\1\0\1\7\1\0\13\7\1\261\14\7\7\0"+
    "\3\7\6\0\3\7\1\0\10\7\1\0\1\7\1\0"+
    "\15\7\1\262\12\7\7\0\3\7\6\0\3\7\1\0"+
    "\10\7\1\0\1\7\1\0\6\7\1\263\21\7\7\0"+
    "\3\7\6\0\3\7\1\0\10\7\1\0\1\7\1\0"+
    "\2\7\1\264\25\7\7\0\3\7\6\0\3\7\1\0"+
    "\10\7\1\0\1\7\1\0\14\7\1\265\13\7\7\0"+
    "\3\7\6\0\3\7\1\0\10\7\1\0\1\7\1\0"+
    "\1\266\27\7\7\0\3\7\6\0\3\7\1\0\10\7"+
    "\1\0\1\7\1\0\2\7\1\267\10\7\1\270\14\7"+
    "\7\0\3\7\6\0\3\7\1\0\10\7\1\0\1\7"+
    "\1\0\11\7\1\271\16\7\7\0\3\7\6\0\3\7"+
    "\1\0\10\7\1\0\1\7\1\0\15\7\1\272\12\7"+
    "\7\0\3\7\6\0\3\7\1\0\10\7\1\0\1\7"+
    "\1\0\14\7\1\273\1\274\12\7\7\0\3\7\6\0"+
    "\3\7\1\0\10\7\1\0\1\7\1\0\1\7\1\275"+
    "\26\7\7\0\3\7\6\0\3\7\1\0\10\7\1\0"+
    "\1\7\1\0\7\7\1\276\20\7\7\0\3\7\6\0"+
    "\3\7\1\0\10\7\1\0\1\7\1\0\7\7\1\277"+
    "\20\7\7\0\3\7\6\0\3\7\1\0\10\7\1\0"+
    "\1\7\1\0\13\7\1\300\14\7\7\0\3\7\6\0"+
    "\3\7\1\0\10\7\1\0\1\7\1\0\7\7\1\301"+
    "\20\7\7\0\3\7\6\0\3\7\1\0\10\7\1\0"+
    "\1\7\1\0\1\7\1\302\26\7\7\0\3\7\6\0"+
    "\3\7\1\0\10\7\1\0\1\7\1\0\13\7\1\303"+
    "\14\7\7\0\3\7\6\0\3\7\1\0\10\7\1\0"+
    "\1\7\1\0\13\7\1\304\14\7\7\0\3\7\6\0"+
    "\3\7\1\0\10\7\1\0\1\7\1\0\14\7\1\305"+
    "\13\7\7\0\3\7\6\0\3\7\1\0\10\7\1\0"+
    "\1\7\1\0\7\7\1\306\20\7\7\0\3\7\6\0"+
    "\3\7\1\0\10\7\1\0\1\7\1\0\2\7\1\307"+
    "\25\7\7\0\3\7\6\0\3\7\1\0\10\7\1\0"+
    "\1\7\1\0\7\7\1\310\20\7\7\0\3\7\6\0"+
    "\3\7\1\0\10\7\1\0\1\7\1\0\14\7\1\311"+
    "\13\7\7\0\3\7\6\0\3\7\1\0\10\7\1\0"+
    "\1\7\1\0\1\7\1\312\26\7\7\0\3\7\6\0"+
    "\3\7\1\0\10\7\1\0\1\7\1\0\13\7\1\313"+
    "\14\7\7\0\3\7\6\0\3\7\1\0\10\7\1\0"+
    "\1\7\1\0\15\7\1\314\12\7\7\0\3\7\6\0"+
    "\3\7\1\0\10\7\1\0\1\7\1\0\6\7\1\315"+
    "\21\7\7\0\3\7\6\0\3\7\1\0\10\7\1\0"+
    "\1\7\1\0\13\7\1\316\14\7\7\0\3\7\4\143"+
    "\1\5\1\232\61\143\10\0\1\317\1\0\1\317\1\233"+
    "\1\0\5\317\1\0\1\317\1\0\1\317\1\0\1\317"+
    "\4\0\2\317\3\0\1\233\2\0\2\317\31\0\1\320"+
    "\1\0\1\56\1\144\2\0\3\320\1\64\1\65\1\66"+
    "\10\0\1\66\1\64\3\0\1\144\3\0\1\64\31\0"+
    "\1\321\1\0\1\56\1\144\2\0\3\321\1\64\1\65"+
    "\1\66\10\0\1\66\1\64\3\0\1\144\3\0\1\64"+
    "\27\0\3\7\1\0\10\7\1\0\1\7\1\0\4\7"+
    "\1\322\23\7\7\0\3\7\6\0\3\7\1\0\10\7"+
    "\1\0\1\7\1\0\1\7\1\323\26\7\7\0\3\7"+
    "\6\0\3\7\1\0\10\7\1\0\1\7\1\0\11\7"+
    "\1\324\16\7\7\0\3\7\6\0\3\7\1\0\10\7"+
    "\1\0\1\7\1\0\7\7\1\325\20\7\7\0\3\7"+
    "\6\0\3\7\1\0\10\7\1\0\1\7\1\0\13\7"+
    "\1\326\14\7\7\0\3\7\6\0\3\7\1\0\10\7"+
    "\1\0\1\7\1\0\5\7\1\327\22\7\7\0\3\7"+
    "\6\0\3\7\1\0\10\7\1\0\1\7\1\0\16\7"+
    "\1\330\11\7\7\0\3\7\6\0\3\7\1\0\10\7"+
    "\1\0\1\7\1\0\7\7\1\331\20\7\7\0\3\7"+
    "\6\0\3\7\1\0\10\7\1\0\1\7\1\0\7\7"+
    "\1\332\20\7\7\0\3\7\6\0\3\7\1\0\10\7"+
    "\1\0\1\7\1\0\3\7\1\333\24\7\7\0\3\7"+
    "\6\0\3\7\1\0\10\7\1\0\1\7\1\0\7\7"+
    "\1\334\20\7\7\0\3\7\6\0\3\7\1\0\10\7"+
    "\1\0\1\7\1\0\15\7\1\335\12\7\7\0\3\7"+
    "\6\0\3\7\1\0\10\7\1\0\1\7\1\0\5\7"+
    "\1\336\22\7\7\0\3\7\6\0\3\7\1\0\10\7"+
    "\1\0\1\7\1\0\13\7\1\337\14\7\7\0\3\7"+
    "\6\0\3\7\1\0\10\7\1\0\1\7\1\0\5\7"+
    "\1\340\22\7\7\0\3\7\6\0\3\7\1\0\10\7"+
    "\1\0\1\7\1\0\13\7\1\341\14\7\7\0\3\7"+
    "\6\0\3\7\1\0\10\7\1\0\1\7\1\0\7\7"+
    "\1\342\20\7\7\0\3\7\6\0\3\7\1\0\10\7"+
    "\1\0\1\7\1\0\2\7\1\343\25\7\7\0\3\7"+
    "\6\0\3\7\1\0\10\7\1\0\1\7\1\0\13\7"+
    "\1\344\14\7\7\0\3\7\6\0\3\7\1\0\10\7"+
    "\1\0\1\7\1\0\7\7\1\345\1\7\1\346\16\7"+
    "\7\0\3\7\6\0\3\7\1\0\10\7\1\0\1\7"+
    "\1\0\4\7\1\347\23\7\7\0\3\7\6\0\3\7"+
    "\1\0\10\7\1\0\1\7\1\0\17\7\1\350\10\7"+
    "\7\0\3\7\6\0\3\7\1\0\10\7\1\0\1\7"+
    "\1\0\5\7\1\351\1\7\1\352\20\7\7\0\3\7"+
    "\6\0\3\7\1\0\10\7\1\0\1\7\1\0\11\7"+
    "\1\353\16\7\7\0\3\7\6\0\3\7\1\0\10\7"+
    "\1\0\1\7\1\0\1\7\1\354\26\7\7\0\3\7"+
    "\6\0\3\7\1\0\10\7\1\0\1\7\1\0\21\7"+
    "\1\355\6\7\7\0\3\7\6\0\3\7\1\0\10\7"+
    "\1\0\1\7\1\0\7\7\1\356\20\7\7\0\3\7"+
    "\6\0\3\7\1\0\10\7\1\0\1\7\1\0\14\7"+
    "\1\357\13\7\7\0\3\7\6\0\3\7\1\0\10\7"+
    "\1\0\1\7\1\0\2\7\1\360\25\7\7\0\3\7"+
    "\6\0\3\7\1\0\10\7\1\0\1\7\1\0\14\7"+
    "\1\361\13\7\7\0\3\7\6\0\3\7\1\0\10\7"+
    "\1\0\1\7\1\0\17\7\1\362\10\7\7\0\3\7"+
    "\6\0\3\7\1\0\10\7\1\0\1\7\1\0\12\7"+
    "\1\363\15\7\7\0\3\7\6\0\3\7\1\0\10\7"+
    "\1\0\1\7\1\0\11\7\1\364\16\7\7\0\3\7"+
    "\6\0\3\7\1\0\10\7\1\0\1\7\1\0\7\7"+
    "\1\365\20\7\7\0\3\7\6\0\3\7\1\0\10\7"+
    "\1\0\1\7\1\0\10\7\1\366\17\7\7\0\3\7"+
    "\6\0\3\7\1\0\10\7\1\0\1\7\1\0\13\7"+
    "\1\367\14\7\7\0\3\7\6\0\3\7\1\0\10\7"+
    "\1\0\1\7\1\0\4\7\1\370\23\7\7\0\3\7"+
    "\6\0\3\7\1\0\10\7\1\0\1\7\1\0\13\7"+
    "\1\371\14\7\7\0\3\7\6\0\3\7\1\0\10\7"+
    "\1\0\1\7\1\0\11\7\1\372\16\7\7\0\3\7"+
    "\6\0\3\7\1\0\10\7\1\0\1\7\1\0\7\7"+
    "\1\373\20\7\7\0\3\7\6\0\3\7\1\0\10\7"+
    "\1\0\1\7\1\0\11\7\1\374\16\7\7\0\3\7"+
    "\6\0\3\7\1\0\10\7\1\0\1\7\1\0\3\7"+
    "\1\375\24\7\7\0\3\7\10\0\1\376\1\0\1\376"+
    "\1\233\1\0\5\376\1\0\1\376\1\0\1\376\1\0"+
    "\1\376\4\0\2\376\3\0\1\233\2\0\2\376\31\0"+
    "\1\377\1\0\1\56\1\144\2\0\3\377\1\64\1\65"+
    "\1\66\10\0\1\66\1\64\3\0\1\144\3\0\1\64"+
    "\31\0\1\u0100\1\0\1\56\1\144\2\0\3\u0100\1\64"+
    "\1\65\1\66\10\0\1\66\1\64\3\0\1\144\3\0"+
    "\1\64\27\0\3\7\1\0\10\7\1\0\1\7\1\0"+
    "\5\7\1\u0101\22\7\7\0\3\7\6\0\3\7\1\0"+
    "\10\7\1\0\1\7\1\0\10\7\1\u0102\17\7\7\0"+
    "\3\7\6\0\3\7\1\0\10\7\1\0\1\7\1\0"+
    "\24\7\1\u0103\3\7\7\0\3\7\6\0\3\7\1\0"+
    "\10\7\1\0\1\7\1\0\5\7\1\u0104\22\7\7\0"+
    "\3\7\6\0\3\7\1\0\10\7\1\0\1\7\1\0"+
    "\1\7\1\u0105\26\7\7\0\3\7\6\0\3\7\1\0"+
    "\10\7\1\0\1\7\1\0\5\7\1\u0106\22\7\7\0"+
    "\3\7\6\0\3\7\1\0\10\7\1\0\1\7\1\0"+
    "\5\7\1\u0107\22\7\7\0\3\7\6\0\3\7\1\0"+
    "\10\7\1\0\1\7\1\0\13\7\1\u0108\14\7\7\0"+
    "\3\7\6\0\3\7\1\0\10\7\1\0\1\7\1\0"+
    "\1\7\1\u0109\26\7\7\0\3\7\6\0\3\7\1\0"+
    "\10\7\1\0\1\7\1\0\13\7\1\u010a\14\7\7\0"+
    "\3\7\6\0\3\7\1\0\10\7\1\0\1\7\1\0"+
    "\10\7\1\u010b\17\7\7\0\3\7\6\0\3\7\1\0"+
    "\10\7\1\0\1\7\1\0\11\7\1\u010c\16\7\7\0"+
    "\3\7\6\0\3\7\1\0\10\7\1\0\1\7\1\0"+
    "\13\7\1\u010d\14\7\7\0\3\7\6\0\3\7\1\0"+
    "\10\7\1\0\1\7\1\0\1\7\1\u010e\26\7\7\0"+
    "\3\7\6\0\3\7\1\0\10\7\1\0\1\7\1\0"+
    "\13\7\1\u010f\14\7\7\0\3\7\6\0\3\7\1\0"+
    "\10\7\1\0\1\7\1\0\5\7\1\u0110\22\7\7\0"+
    "\3\7\6\0\3\7\1\0\10\7\1\0\1\7\1\0"+
    "\25\7\1\u0111\2\7\7\0\3\7\6\0\3\7\1\0"+
    "\10\7\1\0\1\7\1\0\1\7\1\u0112\26\7\7\0"+
    "\3\7\6\0\3\7\1\0\10\7\1\0\1\7\1\0"+
    "\12\7\1\u0113\15\7\7\0\3\7\6\0\3\7\1\0"+
    "\10\7\1\0\1\7\1\0\1\u0114\27\7\7\0\3\7"+
    "\6\0\3\7\1\0\10\7\1\0\1\7\1\0\11\7"+
    "\1\u0115\16\7\7\0\3\7\6\0\3\7\1\0\10\7"+
    "\1\0\1\7\1\0\1\7\1\u0116\26\7\7\0\3\7"+
    "\6\0\3\7\1\0\10\7\1\0\1\7\1\0\1\7"+
    "\1\u0117\26\7\7\0\3\7\6\0\3\7\1\0\10\7"+
    "\1\0\1\7\1\0\7\7\1\u0118\20\7\7\0\3\7"+
    "\6\0\3\7\1\0\10\7\1\0\1\7\1\0\7\7"+
    "\1\u0119\20\7\7\0\3\7\6\0\3\7\1\0\10\7"+
    "\1\0\1\7\1\0\1\u011a\27\7\7\0\3\7\6\0"+
    "\3\7\1\0\10\7\1\0\1\7\1\0\1\u011b\27\7"+
    "\7\0\3\7\6\0\3\7\1\0\10\7\1\0\1\7"+
    "\1\0\5\7\1\u011c\22\7\7\0\3\7\6\0\3\7"+
    "\1\0\10\7\1\0\1\7\1\0\1\7\1\u011d\26\7"+
    "\7\0\3\7\6\0\3\7\1\0\10\7\1\0\1\7"+
    "\1\0\5\7\1\u011e\22\7\7\0\3\7\6\0\3\7"+
    "\1\0\10\7\1\0\1\7\1\0\6\7\1\u011f\21\7"+
    "\7\0\3\7\6\0\3\7\1\0\10\7\1\0\1\7"+
    "\1\0\11\7\1\u0120\16\7\7\0\3\7\6\0\3\7"+
    "\1\0\10\7\1\0\1\7\1\0\12\7\1\u0121\15\7"+
    "\7\0\3\7\6\0\3\7\1\0\10\7\1\0\1\7"+
    "\1\0\7\7\1\u0122\20\7\7\0\3\7\6\0\3\7"+
    "\1\0\10\7\1\0\1\7\1\0\20\7\1\u0123\7\7"+
    "\7\0\3\7\6\0\3\7\1\0\10\7\1\0\1\7"+
    "\1\0\25\7\1\u0124\2\7\7\0\3\7\6\0\3\7"+
    "\1\0\10\7\1\0\1\7\1\0\4\7\1\u0125\23\7"+
    "\7\0\3\7\10\0\1\u0126\1\0\1\u0126\1\233\1\0"+
    "\5\u0126\1\0\1\u0126\1\0\1\u0126\1\0\1\u0126\4\0"+
    "\2\u0126\3\0\1\233\2\0\2\u0126\31\0\1\u0127\1\0"+
    "\1\56\1\144\2\0\3\u0127\1\64\1\65\1\66\10\0"+
    "\1\66\1\64\3\0\1\144\3\0\1\64\31\0\1\u0128"+
    "\1\0\1\56\1\144\2\0\3\u0128\1\64\1\65\1\66"+
    "\10\0\1\66\1\64\3\0\1\144\3\0\1\64\27\0"+
    "\3\7\1\0\10\7\1\0\1\7\1\0\11\7\1\u0129"+
    "\16\7\7\0\3\7\6\0\3\7\1\0\10\7\1\0"+
    "\1\7\1\0\1\u012a\27\7\7\0\3\7\6\0\3\7"+
    "\1\0\10\7\1\0\1\7\1\0\1\7\1\u012b\26\7"+
    "\7\0\3\7\6\0\3\7\1\0\10\7\1\0\1\7"+
    "\1\0\20\7\1\u012c\7\7\7\0\3\7\6\0\3\7"+
    "\1\0\10\7\1\0\1\7\1\0\4\7\1\u012d\23\7"+
    "\7\0\3\7\6\0\3\7\1\0\10\7\1\0\1\7"+
    "\1\0\15\7\1\u012e\12\7\7\0\3\7\6\0\3\7"+
    "\1\0\10\7\1\0\1\7\1\0\11\7\1\u012f\16\7"+
    "\7\0\3\7\6\0\3\7\1\0\10\7\1\0\1\7"+
    "\1\0\17\7\1\u0130\10\7\7\0\3\7\6\0\3\7"+
    "\1\0\10\7\1\0\1\7\1\0\12\7\1\u0131\15\7"+
    "\7\0\3\7\6\0\3\7\1\0\10\7\1\0\1\7"+
    "\1\0\15\7\1\u0132\12\7\7\0\3\7\6\0\3\7"+
    "\1\0\10\7\1\0\1\7\1\0\6\7\1\u0133\21\7"+
    "\7\0\3\7\6\0\3\7\1\0\10\7\1\0\1\7"+
    "\1\0\21\7\1\u0134\6\7\7\0\3\7\6\0\3\7"+
    "\1\0\10\7\1\0\1\7\1\0\10\7\1\u0135\17\7"+
    "\7\0\3\7\6\0\3\7\1\0\10\7\1\0\1\7"+
    "\1\0\1\u0136\27\7\7\0\3\7\6\0\3\7\1\0"+
    "\10\7\1\0\1\7\1\0\10\7\1\u0137\17\7\7\0"+
    "\3\7\6\0\3\7\1\0\10\7\1\0\1\7\1\0"+
    "\5\7\1\u0138\22\7\7\0\3\7\6\0\3\7\1\0"+
    "\10\7\1\0\1\7\1\0\13\7\1\u0139\14\7\7\0"+
    "\3\7\6\0\3\7\1\0\10\7\1\0\1\7\1\0"+
    "\7\7\1\u013a\20\7\7\0\3\7\6\0\3\7\1\0"+
    "\10\7\1\0\1\7\1\0\20\7\1\u013b\7\7\7\0"+
    "\3\7\6\0\3\7\1\0\10\7\1\0\1\7\1\0"+
    "\7\7\1\u013c\20\7\7\0\3\7\6\0\3\7\1\0"+
    "\10\7\1\0\1\7\1\0\4\7\1\u013d\23\7\7\0"+
    "\3\7\6\0\3\7\1\0\10\7\1\0\1\7\1\0"+
    "\15\7\1\u013e\12\7\7\0\3\7\6\0\3\7\1\0"+
    "\10\7\1\0\1\7\1\0\5\7\1\u013f\22\7\7\0"+
    "\3\7\6\0\3\7\1\0\10\7\1\0\1\7\1\0"+
    "\11\7\1\u0140\16\7\7\0\3\7\6\0\3\7\1\0"+
    "\10\7\1\0\1\7\1\0\4\7\1\u0141\23\7\7\0"+
    "\3\7\6\0\3\7\1\0\10\7\1\0\1\7\1\0"+
    "\1\7\1\u0142\26\7\7\0\3\7\10\0\1\u0143\1\0"+
    "\1\u0143\1\233\1\0\5\u0143\1\0\1\u0143\1\0\1\u0143"+
    "\1\0\1\u0143\4\0\2\u0143\3\0\1\233\2\0\2\u0143"+
    "\31\0\1\u0144\1\0\1\56\1\144\2\0\3\u0144\1\64"+
    "\1\65\1\66\10\0\1\66\1\64\3\0\1\144\3\0"+
    "\1\64\31\0\1\u0145\1\0\1\56\1\144\2\0\3\u0145"+
    "\1\64\1\65\1\66\10\0\1\66\1\64\3\0\1\144"+
    "\3\0\1\64\27\0\3\7\1\0\10\7\1\0\1\7"+
    "\1\0\1\7\1\u0146\26\7\7\0\3\7\6\0\3\7"+
    "\1\0\10\7\1\0\1\7\1\0\11\7\1\u0147\16\7"+
    "\7\0\3\7\6\0\3\7\1\0\10\7\1\0\1\7"+
    "\1\0\1\u0148\27\7\7\0\3\7\6\0\3\7\1\0"+
    "\10\7\1\0\1\7\1\0\4\7\1\u0149\23\7\7\0"+
    "\3\7\6\0\3\7\1\0\10\7\1\0\1\7\1\0"+
    "\1\7\1\u014a\26\7\7\0\3\7\6\0\3\7\1\0"+
    "\10\7\1\0\1\7\1\0\5\7\1\u014b\22\7\7\0"+
    "\3\7\6\0\3\7\1\0\10\7\1\0\1\7\1\0"+
    "\1\7\1\u014c\26\7\7\0\3\7\6\0\3\7\1\0"+
    "\10\7\1\0\1\7\1\0\7\7\1\u014d\20\7\7\0"+
    "\3\7\6\0\3\7\1\0\10\7\1\0\1\7\1\0"+
    "\7\7\1\u014e\20\7\7\0\3\7\6\0\3\7\1\0"+
    "\10\7\1\0\1\7\1\0\7\7\1\u014f\20\7\7\0"+
    "\3\7\6\0\3\7\1\0\10\7\1\0\1\7\1\0"+
    "\13\7\1\u0150\14\7\7\0\3\7\6\0\3\7\1\0"+
    "\10\7\1\0\1\7\1\0\11\7\1\u0151\16\7\7\0"+
    "\3\7\6\0\3\7\1\0\10\7\1\0\1\7\1\0"+
    "\13\7\1\u0152\14\7\7\0\3\7\6\0\3\7\1\0"+
    "\10\7\1\0\1\7\1\0\11\7\1\u0153\16\7\7\0"+
    "\3\7\6\0\3\7\1\0\10\7\1\0\1\7\1\0"+
    "\1\u0154\27\7\7\0\3\7\6\0\3\7\1\0\10\7"+
    "\1\0\1\7\1\0\4\7\1\u0155\23\7\7\0\3\7"+
    "\6\0\3\7\1\0\10\7\1\0\1\7\1\0\13\7"+
    "\1\u0156\14\7\7\0\3\7\6\0\3\7\1\0\10\7"+
    "\1\0\1\7\1\0\1\7\1\u0157\26\7\7\0\3\7"+
    "\6\0\3\7\1\0\10\7\1\0\1\7\1\0\7\7"+
    "\1\u0158\20\7\7\0\3\7\6\0\3\7\1\0\10\7"+
    "\1\0\1\7\1\0\2\7\1\u0159\25\7\7\0\3\7"+
    "\6\0\3\7\1\0\10\7\1\0\1\7\1\0\20\7"+
    "\1\u015a\7\7\7\0\3\7\10\0\1\u015b\1\0\1\u015b"+
    "\1\233\1\0\5\u015b\1\0\1\u015b\1\0\1\u015b\1\0"+
    "\1\u015b\4\0\2\u015b\3\0\1\233\2\0\2\u015b\31\0"+
    "\1\u015c\1\0\1\56\1\144\2\0\3\u015c\1\64\1\65"+
    "\1\66\10\0\1\66\1\64\3\0\1\144\3\0\1\64"+
    "\31\0\1\u015d\1\0\1\56\1\144\2\0\3\u015d\1\64"+
    "\1\65\1\66\10\0\1\66\1\64\3\0\1\144\3\0"+
    "\1\64\27\0\3\7\1\0\10\7\1\0\1\7\1\0"+
    "\12\7\1\u015e\15\7\7\0\3\7\6\0\3\7\1\0"+
    "\10\7\1\0\1\7\1\0\1\7\1\u015f\26\7\7\0"+
    "\3\7\6\0\3\7\1\0\10\7\1\0\1\7\1\0"+
    "\16\7\1\u0160\11\7\7\0\3\7\6\0\3\7\1\0"+
    "\10\7\1\0\1\7\1\0\5\7\1\u0161\22\7\7\0"+
    "\3\7\6\0\3\7\1\0\10\7\1\0\1\7\1\0"+
    "\7\7\1\u0162\20\7\7\0\3\7\6\0\3\7\1\0"+
    "\10\7\1\0\1\7\1\0\12\7\1\u0163\15\7\7\0"+
    "\3\7\6\0\3\7\1\0\10\7\1\0\1\7\1\0"+
    "\20\7\1\u0164\7\7\7\0\3\7\6\0\3\7\1\0"+
    "\10\7\1\0\1\7\1\0\11\7\1\u0165\16\7\7\0"+
    "\3\7\6\0\3\7\1\0\10\7\1\0\1\7\1\0"+
    "\1\7\1\u0166\26\7\7\0\3\7\6\0\3\7\1\0"+
    "\10\7\1\0\1\7\1\0\11\7\1\u0167\16\7\7\0"+
    "\3\7\6\0\3\7\1\0\10\7\1\0\1\7\1\0"+
    "\4\7\1\u0168\23\7\7\0\3\7\6\0\3\7\1\0"+
    "\10\7\1\0\1\7\1\0\23\7\1\u0169\4\7\7\0"+
    "\3\7\6\0\3\7\1\0\10\7\1\0\1\7\1\0"+
    "\1\u016a\27\7\7\0\3\7\10\0\1\u016b\1\0\1\u016b"+
    "\1\233\1\0\5\u016b\1\0\1\u016b\1\0\1\u016b\1\0"+
    "\1\u016b\4\0\2\u016b\3\0\1\233\2\0\2\u016b\31\0"+
    "\1\u016c\1\0\1\56\1\144\2\0\3\u016c\1\64\1\65"+
    "\1\66\10\0\1\66\1\64\3\0\1\144\3\0\1\64"+
    "\31\0\1\u016d\1\0\1\56\1\144\2\0\3\u016d\1\64"+
    "\1\65\1\66\10\0\1\66\1\64\3\0\1\144\3\0"+
    "\1\64\27\0\3\7\1\0\10\7\1\0\1\7\1\0"+
    "\13\7\1\u016e\14\7\7\0\3\7\6\0\3\7\1\0"+
    "\10\7\1\0\1\7\1\0\7\7\1\u016f\20\7\7\0"+
    "\3\7\6\0\3\7\1\0\10\7\1\0\1\7\1\0"+
    "\16\7\1\u0170\11\7\7\0\3\7\6\0\3\7\1\0"+
    "\10\7\1\0\1\7\1\0\10\7\1\u0171\17\7\7\0"+
    "\3\7\6\0\3\7\1\0\10\7\1\0\1\7\1\0"+
    "\4\7\1\u0172\23\7\7\0\3\7\6\0\3\7\1\0"+
    "\10\7\1\0\1\7\1\0\4\7\1\u0173\23\7\7\0"+
    "\3\7\6\0\3\7\1\0\10\7\1\0\1\7\1\0"+
    "\12\7\1\u0174\15\7\7\0\3\7\6\0\3\7\1\0"+
    "\10\7\1\0\1\7\1\0\4\7\1\u0175\23\7\7\0"+
    "\3\7\6\0\3\7\1\0\10\7\1\0\1\7\1\0"+
    "\1\7\1\u0176\26\7\7\0\3\7\6\0\3\7\1\0"+
    "\10\7\1\0\1\7\1\0\13\7\1\u0177\14\7\7\0"+
    "\3\7\10\0\1\u0178\1\0\1\u0178\1\233\1\0\5\u0178"+
    "\1\0\1\u0178\1\0\1\u0178\1\0\1\u0178\4\0\2\u0178"+
    "\3\0\1\233\2\0\2\u0178\31\0\1\u0179\1\0\1\56"+
    "\1\144\2\0\3\u0179\1\64\1\65\1\66\10\0\1\66"+
    "\1\64\3\0\1\144\3\0\1\64\31\0\1\u017a\1\0"+
    "\1\56\1\144\2\0\3\u017a\1\64\1\65\1\66\10\0"+
    "\1\66\1\64\3\0\1\144\3\0\1\64\27\0\3\7"+
    "\1\0\10\7\1\0\1\7\1\0\1\u017b\27\7\7\0"+
    "\3\7\6\0\3\7\1\0\10\7\1\0\1\7\1\0"+
    "\5\7\1\u017c\22\7\7\0\3\7\6\0\3\7\1\0"+
    "\10\7\1\0\1\7\1\0\1\7\1\u017d\26\7\7\0"+
    "\3\7\6\0\3\7\1\0\10\7\1\0\1\7\1\0"+
    "\1\7\1\u017e\26\7\7\0\3\7\6\0\3\7\1\0"+
    "\10\7\1\0\1\7\1\0\25\7\1\u017f\2\7\7\0"+
    "\3\7\6\0\3\7\1\0\10\7\1\0\1\7\1\0"+
    "\11\7\1\u0180\16\7\7\0\3\7\10\0\1\u0181\1\0"+
    "\1\u0181\1\233\1\0\5\u0181\1\0\1\u0181\1\0\1\u0181"+
    "\1\0\1\u0181\4\0\2\u0181\3\0\1\233\2\0\2\u0181"+
    "\31\0\1\u0182\1\0\1\56\1\144\2\0\3\u0182\1\64"+
    "\1\65\1\66\10\0\1\66\1\64\3\0\1\144\3\0"+
    "\1\64\31\0\1\u0183\1\0\1\56\1\144\2\0\3\u0183"+
    "\1\64\1\65\1\66\10\0\1\66\1\64\3\0\1\144"+
    "\3\0\1\64\27\0\3\7\1\0\10\7\1\0\1\7"+
    "\1\0\13\7\1\u0184\14\7\7\0\3\7\6\0\3\7"+
    "\1\0\10\7\1\0\1\7\1\0\7\7\1\u0185\20\7"+
    "\7\0\3\7\6\0\3\7\1\0\10\7\1\0\1\7"+
    "\1\0\16\7\1\u0186\11\7\7\0\3\7\6\0\3\7"+
    "\1\0\10\7\1\0\1\7\1\0\4\7\1\u0187\23\7"+
    "\7\0\3\7\10\0\1\u0188\1\0\1\u0188\1\233\1\0"+
    "\5\u0188\1\0\1\u0188\1\0\1\u0188\1\0\1\u0188\4\0"+
    "\2\u0188\3\0\1\233\2\0\2\u0188\31\0\1\u0189\1\0"+
    "\1\56\1\144\2\0\3\u0189\1\64\1\65\1\66\10\0"+
    "\1\66\1\64\3\0\1\144\3\0\1\64\31\0\1\u018a"+
    "\1\0\1\56\1\144\2\0\3\u018a\1\64\1\65\1\66"+
    "\10\0\1\66\1\64\3\0\1\144\3\0\1\64\27\0"+
    "\3\7\1\0\10\7\1\0\1\7\1\0\1\u018b\27\7"+
    "\7\0\3\7\6\0\3\7\1\0\10\7\1\0\1\7"+
    "\1\0\1\7\1\u018c\26\7\7\0\3\7\10\0\1\u018d"+
    "\1\0\1\u018d\1\233\1\0\5\u018d\1\0\1\u018d\1\0"+
    "\1\u018d\1\0\1\u018d\4\0\2\u018d\3\0\1\233\2\0"+
    "\2\u018d\31\0\1\u018e\1\0\1\56\1\144\2\0\3\u018e"+
    "\1\64\1\65\1\66\10\0\1\66\1\64\3\0\1\144"+
    "\3\0\1\64\31\0\1\u018f\1\0\1\56\1\144\2\0"+
    "\3\u018f\1\64\1\65\1\66\10\0\1\66\1\64\3\0"+
    "\1\144\3\0\1\64\27\0\3\7\1\0\10\7\1\0"+
    "\1\7\1\0\5\7\1\u0190\22\7\7\0\3\7\10\0"+
    "\1\u0191\1\0\1\u0191\1\233\1\0\5\u0191\1\0\1\u0191"+
    "\1\0\1\u0191\1\0\1\u0191\4\0\2\u0191\3\0\1\233"+
    "\2\0\2\u0191\31\0\1\u0192\1\0\1\56\1\144\2\0"+
    "\3\u0192\1\64\1\65\1\66\10\0\1\66\1\64\3\0"+
    "\1\144\3\0\1\64\31\0\1\u0193\1\0\1\56\1\144"+
    "\2\0\3\u0193\1\64\1\65\1\66\10\0\1\66\1\64"+
    "\3\0\1\144\3\0\1\64\27\0\3\7\1\0\10\7"+
    "\1\0\1\7\1\0\23\7\1\u0194\4\7\7\0\3\7"+
    "\10\0\1\u0195\1\0\1\u0195\1\233\1\0\5\u0195\1\0"+
    "\1\u0195\1\0\1\u0195\1\0\1\u0195\4\0\2\u0195\3\0"+
    "\1\233\2\0\2\u0195\31\0\1\u0196\1\0\1\56\1\144"+
    "\2\0\3\u0196\1\64\1\65\1\66\10\0\1\66\1\64"+
    "\3\0\1\144\3\0\1\64\31\0\1\u0197\1\0\1\56"+
    "\1\144\2\0\3\u0197\1\64\1\65\1\66\10\0\1\66"+
    "\1\64\3\0\1\144\3\0\1\64\31\0\1\u0198\1\0"+
    "\1\u0198\1\233\1\0\5\u0198\1\0\1\u0198\1\0\1\u0198"+
    "\1\0\1\u0198\4\0\2\u0198\3\0\1\233\2\0\2\u0198"+
    "\31\0\1\u0199\1\0\1\56\1\144\2\0\3\u0199\1\64"+
    "\1\65\1\66\10\0\1\66\1\64\3\0\1\144\3\0"+
    "\1\64\31\0\1\u019a\1\0\1\56\1\144\2\0\3\u019a"+
    "\1\64\1\65\1\66\10\0\1\66\1\64\3\0\1\144"+
    "\3\0\1\64\31\0\1\u019b\1\0\1\u019b\1\233\1\0"+
    "\5\u019b\1\0\1\u019b\1\0\1\u019b\1\0\1\u019b\4\0"+
    "\2\u019b\3\0\1\233\2\0\2\u019b\31\0\1\u019c\1\0"+
    "\1\56\1\144\2\0\3\u019c\1\64\1\65\1\66\10\0"+
    "\1\66\1\64\3\0\1\144\3\0\1\64\34\0\1\233"+
    "\25\0\1\233\35\0\1\u019d\1\0\1\56\1\144\2\0"+
    "\3\u019d\1\64\1\65\1\66\10\0\1\66\1\64\3\0"+
    "\1\144\3\0\1\64\31\0\1\u019e\1\0\1\56\1\144"+
    "\2\0\3\u019e\1\64\1\65\1\66\10\0\1\66\1\64"+
    "\3\0\1\144\3\0\1\64\31\0\1\u019f\1\0\1\56"+
    "\1\144\2\0\3\u019f\1\64\1\65\1\66\10\0\1\66"+
    "\1\64\3\0\1\144\3\0\1\64\31\0\1\u01a0\1\0"+
    "\1\56\1\144\2\0\3\u01a0\1\64\1\65\1\66\10\0"+
    "\1\66\1\64\3\0\1\144\3\0\1\64\31\0\1\56"+
    "\1\0\1\56\1\144\2\0\3\56\1\64\1\65\1\66"+
    "\10\0\1\66\1\64\3\0\1\144\3\0\1\64\21\0";

  /** 
   * The transition table of the DFA
   */
  final private static int yytrans [] = yy_unpack();


  /* error codes */
  final private static int YY_UNKNOWN_ERROR = 0;
  final private static int YY_ILLEGAL_STATE = 1;
  final private static int YY_NO_MATCH = 2;
  final private static int YY_PUSHBACK_2BIG = 3;

  /* error messages for the codes above */
  final private static String YY_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Internal error: unknown state",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * YY_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private final static byte YY_ATTRIBUTE[] = {
     0,  0,  9,  1,  9,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  9,  9, 
     9,  9,  9,  9,  9,  1,  1,  9,  1,  9,  1,  0,  1,  1,  9,  0, 
     1,  1,  1,  9,  1,  0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  9,  9, 
     9,  9,  0,  9,  1,  1,  1,  1,  1,  0,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  0,  9,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  0,  1,  1,  1,  1,  1,  1,  1,  1, 
     0,  1,  1,  1,  1,  1,  1,  0,  1,  1,  1,  1,  0,  1,  1,  1, 
     0,  1,  1,  1,  0,  1,  1,  0,  1,  1,  0,  1,  1,  1,  1,  1
  };

  /** the input device */
  private java.io.Reader yy_reader;

  /** the current state of the DFA */
  private int yy_state;

  /** the current lexical state */
  private int yy_lexical_state = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char yy_buffer[] = new char[YY_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int yy_markedPos;

  /** the textposition at the last state to be included in yytext */
  private int yy_pushbackPos;

  /** the current text position in the buffer */
  private int yy_currentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int yy_startRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int yy_endRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn; 

  /** 
   * yy_atBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean yy_atBOL = true;

  /** yy_atEOF == true <=> the scanner is at the EOF */
  private boolean yy_atEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean yy_eof_done;

  /* user code: */
  static public final transient String RCS_ID = "$Id: qwr.flex,v 1.1 2009-11-25 08:17:39 sonntag Exp $";
  static public final transient String RCS_REV = "$Revision: 1.1 $";
  
  private final StringBuffer string = new StringBuffer();
  
  private boolean multiline = false;
  
  private Symbol symbol(int type) {
    return new QWRSymbol(type, yyline+1, yycolumn+1);
  }

  private Symbol symbol(int type, Object value) {
    return new QWRSymbol(type, yyline+1, yycolumn+1, value);
  }
  
  private static String adjustDecimal(String s) {
    if (s.startsWith("+")) {
      return s.substring(1);
    }

    return s;
  }

  /* assumes correct representation of a long value for 
     specified radix in String s */
  private long parseLong(String s, int radix) {
    int  max = s.length();
    long result = 0;
    long digit;

    for (int i = 0; i < max; i++) {
      digit  = Character.digit(yy_buffer[i],radix);
      result*= radix;
      result+= digit;
    }

    return result;
  }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public QWRScanner(java.io.Reader in) {
    this.yy_reader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public QWRScanner(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the split, compressed DFA transition table.
   *
   * @return the unpacked transition table
   */
  private static int [] yy_unpack() {
    int [] trans = new int[18865];
    int offset = 0;
    offset = yy_unpack(yy_packed0, offset, trans);
    return trans;
  }

  /** 
   * Unpacks the compressed DFA transition table.
   *
   * @param packed   the packed transition table
   * @return         the index of the last entry
   */
  private static int yy_unpack(String packed, int offset, int [] trans) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do trans[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] yy_unpack_cmap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1780) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   IOException  if any I/O-Error occurs
   */
  private boolean yy_refill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (yy_startRead > 0) {
      System.arraycopy(yy_buffer, yy_startRead, 
                       yy_buffer, 0, 
                       yy_endRead-yy_startRead);

      /* translate stored positions */
      yy_endRead-= yy_startRead;
      yy_currentPos-= yy_startRead;
      yy_markedPos-= yy_startRead;
      yy_pushbackPos-= yy_startRead;
      yy_startRead = 0;
    }

    /* is the buffer big enough? */
    if (yy_currentPos >= yy_buffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[yy_currentPos*2];
      System.arraycopy(yy_buffer, 0, newBuffer, 0, yy_buffer.length);
      yy_buffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = yy_reader.read(yy_buffer, yy_endRead, 
                                            yy_buffer.length-yy_endRead);

    if (numRead < 0) {
      return true;
    }
    else {
      yy_endRead+= numRead;  
      return false;
    }
  }


  /**
   * Closes the input stream.
   */
  final public void yyclose() throws java.io.IOException {
    yy_atEOF = true;            /* indicate end of file */
    yy_endRead = yy_startRead;  /* invalidate buffer    */

    if (yy_reader != null)
      yy_reader.close();
  }


  /**
   * Closes the current stream, and resets the
   * scanner to read from a new input stream.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>YY_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  final public void yyreset(java.io.Reader reader) throws java.io.IOException {
    yyclose();
    yy_reader = reader;
    yy_atBOL  = true;
    yy_atEOF  = false;
    yy_endRead = yy_startRead = 0;
    yy_currentPos = yy_markedPos = yy_pushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    yy_lexical_state = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  final public int yystate() {
    return yy_lexical_state;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  final public void yybegin(int newState) {
    yy_lexical_state = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  final public String yytext() {
    return new String( yy_buffer, yy_startRead, yy_markedPos-yy_startRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  final public char yycharat(int pos) {
    return yy_buffer[yy_startRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  final public int yylength() {
    return yy_markedPos-yy_startRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void yy_ScanError(int errorCode) {
    String message;
    try {
      message = YY_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = YY_ERROR_MSG[YY_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  private void yypushback(int number)  {
    if ( number > yylength() )
      yy_ScanError(YY_PUSHBACK_2BIG);

    yy_markedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void yy_do_eof() throws java.io.IOException {
    if (!yy_eof_done) {
      yy_eof_done = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int yy_input;
    int yy_action;

    // cached fields:
    int yy_currentPos_l;
    int yy_startRead_l;
    int yy_markedPos_l;
    int yy_endRead_l = yy_endRead;
    char [] yy_buffer_l = yy_buffer;
    char [] yycmap_l = yycmap;

    int [] yytrans_l = yytrans;
    int [] yy_rowMap_l = yy_rowMap;
    byte [] yy_attr_l = YY_ATTRIBUTE;

    while (true) {
      yy_markedPos_l = yy_markedPos;

      boolean yy_r = false;
      for (yy_currentPos_l = yy_startRead; yy_currentPos_l < yy_markedPos_l;
                                                             yy_currentPos_l++) {
        switch (yy_buffer_l[yy_currentPos_l]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          yy_r = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          yy_r = true;
          break;
        case '\n':
          if (yy_r)
            yy_r = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          yy_r = false;
          yycolumn++;
        }
      }

      if (yy_r) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean yy_peek;
        if (yy_markedPos_l < yy_endRead_l)
          yy_peek = yy_buffer_l[yy_markedPos_l] == '\n';
        else if (yy_atEOF)
          yy_peek = false;
        else {
          boolean eof = yy_refill();
          yy_markedPos_l = yy_markedPos;
          yy_buffer_l = yy_buffer;
          if (eof) 
            yy_peek = false;
          else 
            yy_peek = yy_buffer_l[yy_markedPos_l] == '\n';
        }
        if (yy_peek) yyline--;
      }
      yy_action = -1;

      yy_startRead_l = yy_currentPos_l = yy_currentPos = 
                       yy_startRead = yy_markedPos_l;

      yy_state = yy_lexical_state;


      yy_forAction: {
        while (true) {

          if (yy_currentPos_l < yy_endRead_l)
            yy_input = yy_buffer_l[yy_currentPos_l++];
          else if (yy_atEOF) {
            yy_input = YYEOF;
            break yy_forAction;
          }
          else {
            // store back cached positions
            yy_currentPos  = yy_currentPos_l;
            yy_markedPos   = yy_markedPos_l;
            boolean eof = yy_refill();
            // get translated positions and possibly new buffer
            yy_currentPos_l  = yy_currentPos;
            yy_markedPos_l   = yy_markedPos;
            yy_buffer_l      = yy_buffer;
            yy_endRead_l     = yy_endRead;
            if (eof) {
              yy_input = YYEOF;
              break yy_forAction;
            }
            else {
              yy_input = yy_buffer_l[yy_currentPos_l++];
            }
          }
          int yy_next = yytrans_l[ yy_rowMap_l[yy_state] + yycmap_l[yy_input] ];
          if (yy_next == -1) break yy_forAction;
          yy_state = yy_next;

          int yy_attributes = yy_attr_l[yy_state];
          if ( (yy_attributes & 1) == 1 ) {
            yy_action = yy_state; 
            yy_markedPos_l = yy_currentPos_l; 
            if ( (yy_attributes & 8) == 8 ) break yy_forAction;
          }

        }
      }

      // store back cached position
      yy_markedPos = yy_markedPos_l;

      switch (yy_action) {

        case 51: 
          {  return symbol(FLOATING_POINT_LITERAL, new Double(yytext().substring(0,yylength()-1)));  }
        case 417: break;
        case 33: 
          {  return symbol(RBRACE);  }
        case 418: break;
        case 32: 
          {  return symbol(LBRACE);  }
        case 419: break;
        case 31: 
          {  return symbol(RPAREN);  }
        case 420: break;
        case 30: 
          {  return symbol(LPAREN);  }
        case 421: break;
        case 3: 
        case 4: 
          {  /* ignore */  }
        case 422: break;
        case 42: 
          {  /* ignore */  }
        case 423: break;
        case 256: 
          {  return symbol(ANCHOR);  }
        case 424: break;
        case 258: 
          {  return symbol(NONKEY);  }
        case 425: break;
        case 261: 
          {  return symbol(CENTER);  }
        case 426: break;
        case 262: 
          {  return symbol(HEADER);  }
        case 427: break;
        case 263: 
          {  return symbol(HEIGHT);  }
        case 428: break;
        case 264: 
          {  return symbol(HIDDEN);  }
        case 429: break;
        case 266: 
          {  return symbol(RECORD);  }
        case 430: break;
        case 268: 
          {  return symbol(REPORT);  }
        case 431: break;
        case 269: 
          {  return symbol(SCREEN);  }
        case 432: break;
        case 279: 
          {  return symbol(DEFINE);  }
        case 433: break;
        case 285: 
          {  return symbol(FOOTER);  }
        case 434: break;
        case 304: 
          {  return symbol(SPACING);  }
        case 435: break;
        case 310: 
          {  return symbol(GROUPED);  }
        case 436: break;
        case 311: 
          {  return symbol(TABULAR);  }
        case 437: break;
        case 318: 
          {  return symbol(PRINTER);  }
        case 438: break;
        case 321: 
          {  return symbol(VERSION);  }
        case 439: break;
        case 97: 
          {  string.append( '\r' );  }
        case 440: break;
        case 96: 
          {  string.append( '\n' );  }
        case 441: break;
        case 95: 
          {  string.append( '\t' );  }
        case 442: break;
        case 94: 
          {  string.append( '\"' );  }
        case 443: break;
        case 36: 
          {  yybegin(STRINGLITERAL); multiline = false; string.setLength(0);  }
        case 444: break;
        case 38: 
        case 39: 
          {  multiline = true; string.append( yytext() );  }
        case 445: break;
        case 40: 
          {  string.append( '\\' );  }
        case 446: break;
        case 44: 
        case 48: 
        case 49: 
        case 50: 
        case 102: 
        case 103: 
        case 156: 
        case 157: 
        case 207: 
        case 208: 
        case 254: 
        case 255: 
        case 294: 
        case 295: 
        case 323: 
        case 324: 
        case 347: 
        case 348: 
        case 363: 
        case 364: 
        case 376: 
        case 377: 
        case 385: 
        case 386: 
        case 392: 
        case 393: 
        case 397: 
        case 398: 
        case 401: 
        case 402: 
        case 405: 
        case 406: 
        case 408: 
          {  return symbol(INTEGER_LITERAL, new Integer((int) parseLong(yytext(),8)));  }
        case 447: break;
        case 149: 
          {  return symbol(KEY);  }
        case 448: break;
        case 141: 
          {  return symbol(FOR);  }
        case 449: break;
        case 123: 
          {  return symbol(SET);  }
        case 450: break;
        case 63: 
          {  return symbol(ON);  }
        case 451: break;
        case 360: 
          {  return symbol(LINEBREAK);  }
        case 452: break;
        case 354: 
          {  return symbol(SUBSTRING);  }
        case 453: break;
        case 34: 
          {  return symbol(SEMICOLON);  }
        case 454: break;
        case 329: 
          {  return symbol(RELATION);  }
        case 455: break;
        case 333: 
          {  return symbol(EPILOGUE);  }
        case 456: break;
        case 334: 
          {  return symbol(DATABASE);  }
        case 457: break;
        case 340: 
          {  return symbol(FONTINFO);  }
        case 458: break;
        case 341: 
          {  return symbol(FIELDSET);  }
        case 459: break;
        case 342: 
          {  return symbol(FUNCTION);  }
        case 460: break;
        case 343: 
          {  return symbol(PROLOGUE);  }
        case 461: break;
        case 345: 
          {  return symbol(VALUE_OF);  }
        case 462: break;
        case 349: 
          {  return symbol(ASCENDING);  }
        case 463: break;
        case 191: 
          {  return symbol(LEFT);  }
        case 464: break;
        case 189: 
          {  return symbol(TYPE);  }
        case 465: break;
        case 176: 
          {  return symbol(SORT);  }
        case 466: break;
        case 169: 
          {  return symbol(HTML);  }
        case 467: break;
        case 35: 
          {  return symbol(COMMA);  }
        case 468: break;
        case 194: 
          {  return symbol(FONT);  }
        case 469: break;
        case 197: 
          {  return symbol(FILE);  }
        case 470: break;
        case 199: 
          {  return symbol(PAGE);  }
        case 471: break;
        case 211: 
          {  return symbol(ASCII);  }
        case 472: break;
        case 214: 
          {  return symbol(COLOR);  }
        case 473: break;
        case 224: 
          {  return symbol(RIGHT);  }
        case 474: break;
        case 237: 
          {  return symbol(TABLE);  }
        case 475: break;
        case 240: 
          {  return symbol(LABEL);  }
        case 476: break;
        case 242: 
          {  return symbol(USING);  }
        case 477: break;
        case 245: 
          {  return symbol(FIELD);  }
        case 478: break;
        case 252: 
          {  return symbol(WIDTH);  }
        case 479: break;
        case 6: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
        case 16: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
        case 24: 
        case 25: 
        case 26: 
        case 27: 
        case 28: 
        case 29: 
        case 55: 
        case 56: 
        case 57: 
        case 58: 
        case 59: 
        case 60: 
        case 61: 
        case 62: 
        case 64: 
        case 65: 
        case 66: 
        case 67: 
        case 68: 
        case 69: 
        case 70: 
        case 71: 
        case 72: 
        case 73: 
        case 74: 
        case 75: 
        case 76: 
        case 77: 
        case 78: 
        case 79: 
        case 80: 
        case 81: 
        case 82: 
        case 83: 
        case 84: 
        case 85: 
        case 86: 
        case 87: 
        case 88: 
        case 89: 
        case 90: 
        case 91: 
        case 92: 
        case 93: 
        case 106: 
        case 107: 
        case 108: 
        case 109: 
        case 110: 
        case 111: 
        case 112: 
        case 113: 
        case 114: 
        case 115: 
        case 116: 
        case 117: 
        case 118: 
        case 119: 
        case 120: 
        case 121: 
        case 122: 
        case 124: 
        case 125: 
        case 126: 
        case 127: 
        case 128: 
        case 129: 
        case 130: 
        case 131: 
        case 132: 
        case 133: 
        case 134: 
        case 135: 
        case 136: 
        case 137: 
        case 138: 
        case 139: 
        case 140: 
        case 142: 
        case 143: 
        case 144: 
        case 145: 
        case 146: 
        case 147: 
        case 148: 
        case 150: 
        case 151: 
        case 152: 
        case 158: 
        case 159: 
        case 160: 
        case 161: 
        case 162: 
        case 163: 
        case 164: 
        case 165: 
        case 166: 
        case 167: 
        case 168: 
        case 170: 
        case 171: 
        case 172: 
        case 173: 
        case 174: 
        case 175: 
        case 177: 
        case 178: 
        case 179: 
        case 180: 
        case 181: 
        case 182: 
        case 183: 
        case 184: 
        case 185: 
        case 186: 
        case 187: 
        case 188: 
        case 190: 
        case 192: 
        case 193: 
        case 195: 
        case 196: 
        case 198: 
        case 200: 
        case 201: 
        case 202: 
        case 203: 
        case 204: 
        case 205: 
        case 209: 
        case 210: 
        case 212: 
        case 213: 
        case 215: 
        case 216: 
        case 217: 
        case 218: 
        case 219: 
        case 220: 
        case 221: 
        case 222: 
        case 223: 
        case 225: 
        case 226: 
        case 227: 
        case 228: 
        case 229: 
        case 230: 
        case 231: 
        case 232: 
        case 233: 
        case 234: 
        case 235: 
        case 236: 
        case 238: 
        case 239: 
        case 241: 
        case 243: 
        case 244: 
        case 246: 
        case 247: 
        case 248: 
        case 249: 
        case 250: 
        case 251: 
        case 257: 
        case 259: 
        case 260: 
        case 265: 
        case 267: 
        case 270: 
        case 271: 
        case 272: 
        case 273: 
        case 274: 
        case 275: 
        case 276: 
        case 277: 
        case 278: 
        case 280: 
        case 281: 
        case 282: 
        case 283: 
        case 284: 
        case 286: 
        case 287: 
        case 288: 
        case 289: 
        case 290: 
        case 291: 
        case 292: 
        case 296: 
        case 297: 
        case 298: 
        case 299: 
        case 300: 
        case 301: 
        case 302: 
        case 303: 
        case 305: 
        case 306: 
        case 307: 
        case 308: 
        case 309: 
        case 312: 
        case 313: 
        case 314: 
        case 315: 
        case 316: 
        case 317: 
        case 319: 
        case 320: 
        case 325: 
        case 326: 
        case 327: 
        case 328: 
        case 330: 
        case 331: 
        case 332: 
        case 335: 
        case 336: 
        case 337: 
        case 338: 
        case 339: 
        case 344: 
        case 350: 
        case 351: 
        case 352: 
        case 353: 
        case 355: 
        case 356: 
        case 357: 
        case 358: 
        case 359: 
        case 361: 
        case 367: 
        case 369: 
        case 370: 
        case 372: 
        case 373: 
        case 374: 
        case 378: 
        case 379: 
        case 382: 
        case 383: 
        case 389: 
        case 390: 
        case 394: 
        case 399: 
          {  return symbol(IDENTIFIER, yytext());  }
        case 480: break;
        case 388: 
          {  return symbol(SPACE_BEFORE);  }
        case 481: break;
        case 403: 
          {  return symbol(TRUNCATION_MARK);  }
        case 482: break;
        case 387: 
          {  return symbol(OUTPUTFORMAT);  }
        case 483: break;
        case 154: 
          {  return symbol(INTEGER_LITERAL, new Long(parseLong(yytext().substring(2,yylength()-1),16)));  }
        case 484: break;
        case 99: 
          {  return symbol(INTEGER_LITERAL, new Long(parseLong(yytext().substring(0,yylength()-1),8)));  }
        case 485: break;
        case 395: 
          {  return symbol(JUSTIFICATION);  }
        case 486: break;
        case 45: 
        case 52: 
        case 104: 
        case 409: 
        case 411: 
        case 412: 
        case 413: 
        case 414: 
        case 415: 
          {  return symbol(FLOATING_POINT_LITERAL, new Double(yytext()));  }
        case 487: break;
        case 41: 
          {  yybegin(YYINITIAL); return symbol(multiline ? /*MULTILINE_*/ STRING_LITERAL : STRING_LITERAL, string.toString());  }
        case 488: break;
        case 46: 
          {  return symbol(INTEGER_LITERAL, new Long(adjustDecimal(yytext().substring(0,yylength()-1))));  }
        case 489: break;
        case 381: 
          {  return symbol(DESTINATION);  }
        case 490: break;
        case 380: 
          {  return symbol(DESCRIPTION);  }
        case 491: break;
        case 371: 
          {  return symbol(DESCENDING);  }
        case 492: break;
        case 368: 
          {  return symbol(STRUCTURED);  }
        case 493: break;
        case 366: 
          {  return symbol(COLUMNNAME);  }
        case 494: break;
        case 365: 
          {  return symbol(CONSTRAINT);  }
        case 495: break;
        case 100: 
        case 101: 
        case 155: 
        case 206: 
        case 253: 
        case 293: 
        case 322: 
        case 346: 
        case 362: 
          {  return symbol(INTEGER_LITERAL, new Integer((int) parseLong(yytext().substring(2),16)));  }
        case 496: break;
        case 37: 
          {  string.append( yytext() );  }
        case 497: break;
        case 7: 
        case 9: 
        case 54: 
          {  return symbol(INTEGER_LITERAL, new Integer(adjustDecimal(yytext())));  }
        case 498: break;
        case 2: 
        case 5: 
        case 8: 
        case 10: 
          {  throw new RuntimeException("Illegal character \""+yytext()+
                                                              "\" at line "+(yyline+1)+", column "+(yycolumn+1));  }
        case 499: break;
        default: 
          if (yy_input == YYEOF && yy_startRead == yy_currentPos) {
            yy_atEOF = true;
            yy_do_eof();
              {  return symbol(EOF);  }
          } 
          else {
            yy_ScanError(YY_NO_MATCH);
          }
      }
    }
  }


}
